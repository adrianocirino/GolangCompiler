
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGN BOOL BREAK COLONEQ COMMA DIFFERENT DIVIDE DMINUS DOT DPLUS ELSE EQUALS FALSE FOR FUNC GREATER GREATER_EQUAL ID IF IMPORT INT LCHAVES LESS LESS_EQUAL LPAREN MINUS MOD NEWLINE NOT NUMBER OR PACKAGE PLUS RCHAVES RETURN RPAREN SEMICOLON STRING TIMES TRUE VARprogramaGO : defpackage defimport funcdeclsdefpackage : PACKAGE ID NEWLINEdefimport : IMPORT STRING NEWLINEfuncdecl : FUNC ID signature NEWLINE body NEWLINE\n                | FUNC ID signature body\n                | FUNC ID signature body NEWLINEfuncdecls : funcdecl \n                 | funcdecl funcdecls signature : LPAREN sigparams RPAREN \n               | LPAREN sigparams RPAREN funcreturn \n               | LPAREN RPAREN\n               | LPAREN RPAREN funcreturn sigparams : ID type\n               | ID type COMMA sigparamsfuncreturn : type\n                | LPAREN type RPARENbody : LCHAVES  NEWLINE stms  RCHAVES\n          | LCHAVES  NEWLINE RCHAVESstms : statement \n            | statement NEWLINE stms\n            | statement NEWLINEstatement : statement1statement1 : IF exp body ELSE body\n                | IF exp body\n                | declaration\n                | for\n                | callFunc\n                | callFuncPS\n                | return\n                | breakfor : FOR body\n         | FOR exp body\n         | FOR exp SEMICOLON exp SEMICOLON exp bodydeclaration : VAR ID type \n                   | VAR ID type ASSIGN exp\n                   | VAR ID type COLONEQ exp\n                   | VAR ID type SEMICOLON\n                   | VAR ID type ASSIGN exp SEMICOLON\n                   | VAR ID type COLONEQ exp SEMICOLONtype : INT\n            | STRING\n            | BOOLexp : exp1 exp1 : exp1 ASSIGN exp2\n             | exp1 COLONEQ exp2\n             | exp2exp2 : exp2 OR exp3\n            | exp3exp3 : exp3 AND exp4\n            | exp4exp4 : exp4 EQUALS exp5\n          | exp4 DIFFERENT exp5\n          | exp5exp5 : exp5 LESS exp6\n          | exp5 GREATER exp6\n          | exp5 LESS_EQUAL exp6\n          | exp5 GREATER_EQUAL exp6\n          | exp6exp6 : exp6 PLUS exp7\n          | exp6 MINUS exp7\n          | exp7exp7 : exp7 TIMES exp8\n          | exp7 DIVIDE exp8\n          | exp7 MOD exp8\n          | exp8exp8 : exp8 DPLUS\n          | exp8 DMINUS\n          | exp9exp9 : NOT exp9\n          | NUMBER\n          | STRING\n          | ID \n          | TRUE\n          | FALSE\n          | LPAREN exp RPARENreturn : RETURN exp\n              | RETURN\n              | RETURN exp SEMICOLON\n              | RETURN SEMICOLONbreak : BREAK\n             | BREAK SEMICOLONcallFunc : ID LPAREN params RPAREN\n                | ID LPAREN RPAREN\n                | ID LPAREN params RPAREN SEMICOLON\n                | ID LPAREN RPAREN SEMICOLONcallFuncPS : ID DOT ID LPAREN params RPAREN\n                  | ID DOT ID LPAREN RPAREN\n                  | ID DOT ID LPAREN params RPAREN SEMICOLON\n                  | ID DOT ID LPAREN RPAREN SEMICOLONparams : exp COMMA params\n              | exp'
    
_lr_action_items = {'PACKAGE':([0,],[3,]),'$end':([1,7,8,12,18,24,34,36,54,],[0,-1,-7,-8,-5,-6,-4,-18,-17,]),'IMPORT':([2,11,],[5,-2,]),'ID':([3,9,16,25,39,46,48,49,53,55,66,72,74,75,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,110,129,130,134,135,144,],[6,13,22,47,69,73,69,69,22,47,69,69,69,108,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,]),'FUNC':([4,8,14,18,24,34,36,54,],[9,9,-3,-5,-6,-4,-18,-17,]),'STRING':([5,21,22,26,27,39,48,49,66,72,73,74,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,110,129,130,134,135,144,],[10,31,31,31,31,68,68,68,68,68,31,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,]),'NEWLINE':([6,10,15,18,19,21,23,26,28,29,30,31,32,36,37,38,40,41,42,43,44,45,49,50,51,54,57,58,59,60,61,62,63,64,65,67,68,69,70,71,76,78,79,80,81,84,100,101,102,104,106,109,111,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,131,132,133,137,138,139,140,143,145,146,147,148,150,151,],[11,14,17,24,25,-11,34,-9,-12,-15,-40,-41,-42,-18,55,-22,-25,-26,-27,-28,-29,-30,-77,-80,-10,-17,-43,-46,-48,-50,-53,-58,-61,-65,-68,-70,-71,-72,-73,-74,-31,-76,-79,-81,-16,-24,-66,-67,-69,-34,-83,-32,-78,-44,-45,-47,-49,-51,-52,-54,-55,-56,-57,-59,-60,-62,-63,-64,-75,-37,-82,-85,-23,-35,-36,-84,-87,-38,-39,-86,-89,-88,-33,]),'LPAREN':([13,21,26,39,47,48,49,66,72,74,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,108,110,129,130,134,135,144,],[16,27,27,72,74,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,135,72,72,72,72,72,72,]),'LCHAVES':([15,17,21,26,28,29,30,31,32,48,51,56,57,58,59,60,61,62,63,64,65,67,68,69,70,71,77,81,100,101,102,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,149,],[19,19,-11,-9,-12,-15,-40,-41,-42,19,-10,19,-43,-46,-48,-50,-53,-58,-61,-65,-68,-70,-71,-72,-73,-74,19,-16,-66,-67,-69,19,-44,-45,-47,-49,-51,-52,-54,-55,-56,-57,-59,-60,-62,-63,-64,-75,19,]),'RPAREN':([16,20,30,31,32,33,52,57,58,59,60,61,62,63,64,65,67,68,69,70,71,74,82,100,101,102,103,105,107,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,135,141,142,],[21,26,-40,-41,-42,-13,81,-43,-46,-48,-50,-53,-58,-61,-65,-68,-70,-71,-72,-73,-74,106,-14,-66,-67,-69,128,132,-91,-44,-45,-47,-49,-51,-52,-54,-55,-56,-57,-59,-60,-62,-63,-64,-75,143,-90,147,]),'INT':([21,22,26,27,73,],[30,30,30,30,30,]),'BOOL':([21,22,26,27,73,],[32,32,32,32,32,]),'RCHAVES':([25,30,31,32,35,36,37,38,40,41,42,43,44,45,49,50,54,55,57,58,59,60,61,62,63,64,65,67,68,69,70,71,76,78,79,80,83,84,100,101,102,104,106,109,111,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,131,132,133,137,138,139,140,143,145,146,147,148,150,151,],[36,-40,-41,-42,54,-18,-19,-22,-25,-26,-27,-28,-29,-30,-77,-80,-17,-21,-43,-46,-48,-50,-53,-58,-61,-65,-68,-70,-71,-72,-73,-74,-31,-76,-79,-81,-20,-24,-66,-67,-69,-34,-83,-32,-78,-44,-45,-47,-49,-51,-52,-54,-55,-56,-57,-59,-60,-62,-63,-64,-75,-37,-82,-85,-23,-35,-36,-84,-87,-38,-39,-86,-89,-88,-33,]),'IF':([25,55,],[39,39,]),'VAR':([25,55,],[46,46,]),'FOR':([25,55,],[48,48,]),'RETURN':([25,55,],[49,49,]),'BREAK':([25,55,],[50,50,]),'COMMA':([30,31,32,33,57,58,59,60,61,62,63,64,65,67,68,69,70,71,100,101,102,107,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,],[-40,-41,-42,53,-43,-46,-48,-50,-53,-58,-61,-65,-68,-70,-71,-72,-73,-74,-66,-67,-69,134,-44,-45,-47,-49,-51,-52,-54,-55,-56,-57,-59,-60,-62,-63,-64,-75,]),'ASSIGN':([30,31,32,57,58,59,60,61,62,63,64,65,67,68,69,70,71,100,101,102,104,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,],[-40,-41,-42,85,-46,-48,-50,-53,-58,-61,-65,-68,-70,-71,-72,-73,-74,-66,-67,-69,129,-44,-45,-47,-49,-51,-52,-54,-55,-56,-57,-59,-60,-62,-63,-64,-75,]),'COLONEQ':([30,31,32,57,58,59,60,61,62,63,64,65,67,68,69,70,71,100,101,102,104,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,],[-40,-41,-42,86,-46,-48,-50,-53,-58,-61,-65,-68,-70,-71,-72,-73,-74,-66,-67,-69,130,-44,-45,-47,-49,-51,-52,-54,-55,-56,-57,-59,-60,-62,-63,-64,-75,]),'SEMICOLON':([30,31,32,49,50,57,58,59,60,61,62,63,64,65,67,68,69,70,71,77,78,100,101,102,104,106,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,132,136,138,139,143,147,],[-40,-41,-42,79,80,-43,-46,-48,-50,-53,-58,-61,-65,-68,-70,-71,-72,-73,-74,110,111,-66,-67,-69,131,133,-44,-45,-47,-49,-51,-52,-54,-55,-56,-57,-59,-60,-62,-63,-64,-75,140,144,145,146,148,150,]),'ELSE':([36,54,84,],[-18,-17,112,]),'NOT':([39,48,49,66,72,74,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,110,129,130,134,135,144,],[66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,]),'NUMBER':([39,48,49,66,72,74,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,110,129,130,134,135,144,],[67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,]),'TRUE':([39,48,49,66,72,74,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,110,129,130,134,135,144,],[70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,]),'FALSE':([39,48,49,66,72,74,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,110,129,130,134,135,144,],[71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,]),'DOT':([47,],[75,]),'OR':([58,59,60,61,62,63,64,65,67,68,69,70,71,100,101,102,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,],[87,-48,-50,-53,-58,-61,-65,-68,-70,-71,-72,-73,-74,-66,-67,-69,87,87,-47,-49,-51,-52,-54,-55,-56,-57,-59,-60,-62,-63,-64,-75,]),'AND':([59,60,61,62,63,64,65,67,68,69,70,71,100,101,102,115,116,117,118,119,120,121,122,123,124,125,126,127,128,],[88,-50,-53,-58,-61,-65,-68,-70,-71,-72,-73,-74,-66,-67,-69,88,-49,-51,-52,-54,-55,-56,-57,-59,-60,-62,-63,-64,-75,]),'EQUALS':([60,61,62,63,64,65,67,68,69,70,71,100,101,102,116,117,118,119,120,121,122,123,124,125,126,127,128,],[89,-53,-58,-61,-65,-68,-70,-71,-72,-73,-74,-66,-67,-69,89,-51,-52,-54,-55,-56,-57,-59,-60,-62,-63,-64,-75,]),'DIFFERENT':([60,61,62,63,64,65,67,68,69,70,71,100,101,102,116,117,118,119,120,121,122,123,124,125,126,127,128,],[90,-53,-58,-61,-65,-68,-70,-71,-72,-73,-74,-66,-67,-69,90,-51,-52,-54,-55,-56,-57,-59,-60,-62,-63,-64,-75,]),'LESS':([61,62,63,64,65,67,68,69,70,71,100,101,102,117,118,119,120,121,122,123,124,125,126,127,128,],[91,-58,-61,-65,-68,-70,-71,-72,-73,-74,-66,-67,-69,91,91,-54,-55,-56,-57,-59,-60,-62,-63,-64,-75,]),'GREATER':([61,62,63,64,65,67,68,69,70,71,100,101,102,117,118,119,120,121,122,123,124,125,126,127,128,],[92,-58,-61,-65,-68,-70,-71,-72,-73,-74,-66,-67,-69,92,92,-54,-55,-56,-57,-59,-60,-62,-63,-64,-75,]),'LESS_EQUAL':([61,62,63,64,65,67,68,69,70,71,100,101,102,117,118,119,120,121,122,123,124,125,126,127,128,],[93,-58,-61,-65,-68,-70,-71,-72,-73,-74,-66,-67,-69,93,93,-54,-55,-56,-57,-59,-60,-62,-63,-64,-75,]),'GREATER_EQUAL':([61,62,63,64,65,67,68,69,70,71,100,101,102,117,118,119,120,121,122,123,124,125,126,127,128,],[94,-58,-61,-65,-68,-70,-71,-72,-73,-74,-66,-67,-69,94,94,-54,-55,-56,-57,-59,-60,-62,-63,-64,-75,]),'PLUS':([62,63,64,65,67,68,69,70,71,100,101,102,119,120,121,122,123,124,125,126,127,128,],[95,-61,-65,-68,-70,-71,-72,-73,-74,-66,-67,-69,95,95,95,95,-59,-60,-62,-63,-64,-75,]),'MINUS':([62,63,64,65,67,68,69,70,71,100,101,102,119,120,121,122,123,124,125,126,127,128,],[96,-61,-65,-68,-70,-71,-72,-73,-74,-66,-67,-69,96,96,96,96,-59,-60,-62,-63,-64,-75,]),'TIMES':([63,64,65,67,68,69,70,71,100,101,102,123,124,125,126,127,128,],[97,-65,-68,-70,-71,-72,-73,-74,-66,-67,-69,97,97,-62,-63,-64,-75,]),'DIVIDE':([63,64,65,67,68,69,70,71,100,101,102,123,124,125,126,127,128,],[98,-65,-68,-70,-71,-72,-73,-74,-66,-67,-69,98,98,-62,-63,-64,-75,]),'MOD':([63,64,65,67,68,69,70,71,100,101,102,123,124,125,126,127,128,],[99,-65,-68,-70,-71,-72,-73,-74,-66,-67,-69,99,99,-62,-63,-64,-75,]),'DPLUS':([64,65,67,68,69,70,71,100,101,102,125,126,127,128,],[100,-68,-70,-71,-72,-73,-74,-66,-67,-69,100,100,100,-75,]),'DMINUS':([64,65,67,68,69,70,71,100,101,102,125,126,127,128,],[101,-68,-70,-71,-72,-73,-74,-66,-67,-69,101,101,101,-75,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programaGO':([0,],[1,]),'defpackage':([0,],[2,]),'defimport':([2,],[4,]),'funcdecls':([4,8,],[7,12,]),'funcdecl':([4,8,],[8,8,]),'signature':([13,],[15,]),'body':([15,17,48,56,77,112,149,],[18,23,76,84,109,137,151,]),'sigparams':([16,53,],[20,82,]),'funcreturn':([21,26,],[28,51,]),'type':([21,22,26,27,73,],[29,33,29,52,104,]),'stms':([25,55,],[35,83,]),'statement':([25,55,],[37,37,]),'statement1':([25,55,],[38,38,]),'declaration':([25,55,],[40,40,]),'for':([25,55,],[41,41,]),'callFunc':([25,55,],[42,42,]),'callFuncPS':([25,55,],[43,43,]),'return':([25,55,],[44,44,]),'break':([25,55,],[45,45,]),'exp':([39,48,49,72,74,110,129,130,134,135,144,],[56,77,78,103,107,136,138,139,107,107,149,]),'exp1':([39,48,49,72,74,110,129,130,134,135,144,],[57,57,57,57,57,57,57,57,57,57,57,]),'exp2':([39,48,49,72,74,85,86,110,129,130,134,135,144,],[58,58,58,58,58,113,114,58,58,58,58,58,58,]),'exp3':([39,48,49,72,74,85,86,87,110,129,130,134,135,144,],[59,59,59,59,59,59,59,115,59,59,59,59,59,59,]),'exp4':([39,48,49,72,74,85,86,87,88,110,129,130,134,135,144,],[60,60,60,60,60,60,60,60,116,60,60,60,60,60,60,]),'exp5':([39,48,49,72,74,85,86,87,88,89,90,110,129,130,134,135,144,],[61,61,61,61,61,61,61,61,61,117,118,61,61,61,61,61,61,]),'exp6':([39,48,49,72,74,85,86,87,88,89,90,91,92,93,94,110,129,130,134,135,144,],[62,62,62,62,62,62,62,62,62,62,62,119,120,121,122,62,62,62,62,62,62,]),'exp7':([39,48,49,72,74,85,86,87,88,89,90,91,92,93,94,95,96,110,129,130,134,135,144,],[63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,123,124,63,63,63,63,63,63,]),'exp8':([39,48,49,72,74,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,110,129,130,134,135,144,],[64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,125,126,127,64,64,64,64,64,64,]),'exp9':([39,48,49,66,72,74,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,110,129,130,134,135,144,],[65,65,65,102,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,]),'params':([74,134,135,],[105,141,142,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programaGO","S'",1,None,None,None),
  ('programaGO -> defpackage defimport funcdecls','programaGO',3,'p_programaGO','parser.py',10),
  ('defpackage -> PACKAGE ID NEWLINE','defpackage',3,'p_defpackage','parser.py',14),
  ('defimport -> IMPORT STRING NEWLINE','defimport',3,'p_defimport','parser.py',18),
  ('funcdecl -> FUNC ID signature NEWLINE body NEWLINE','funcdecl',6,'p_funcdecl','parser.py',23),
  ('funcdecl -> FUNC ID signature body','funcdecl',4,'p_funcdecl','parser.py',24),
  ('funcdecl -> FUNC ID signature body NEWLINE','funcdecl',5,'p_funcdecl','parser.py',25),
  ('funcdecls -> funcdecl','funcdecls',1,'p_funcdecls','parser.py',29),
  ('funcdecls -> funcdecl funcdecls','funcdecls',2,'p_funcdecls','parser.py',30),
  ('signature -> LPAREN sigparams RPAREN','signature',3,'p_signature','parser.py',34),
  ('signature -> LPAREN sigparams RPAREN funcreturn','signature',4,'p_signature','parser.py',35),
  ('signature -> LPAREN RPAREN','signature',2,'p_signature','parser.py',36),
  ('signature -> LPAREN RPAREN funcreturn','signature',3,'p_signature','parser.py',37),
  ('sigparams -> ID type','sigparams',2,'p_sigparams','parser.py',41),
  ('sigparams -> ID type COMMA sigparams','sigparams',4,'p_sigparams','parser.py',42),
  ('funcreturn -> type','funcreturn',1,'p_funcreturn','parser.py',46),
  ('funcreturn -> LPAREN type RPAREN','funcreturn',3,'p_funcreturn','parser.py',47),
  ('body -> LCHAVES NEWLINE stms RCHAVES','body',4,'p_body','parser.py',51),
  ('body -> LCHAVES NEWLINE RCHAVES','body',3,'p_body','parser.py',52),
  ('stms -> statement','stms',1,'p_stms','parser.py',56),
  ('stms -> statement NEWLINE stms','stms',3,'p_stms','parser.py',57),
  ('stms -> statement NEWLINE','stms',2,'p_stms','parser.py',58),
  ('statement -> statement1','statement',1,'p_statement','parser.py',62),
  ('statement1 -> IF exp body ELSE body','statement1',5,'p_statement1','parser.py',67),
  ('statement1 -> IF exp body','statement1',3,'p_statement1','parser.py',68),
  ('statement1 -> declaration','statement1',1,'p_statement1','parser.py',69),
  ('statement1 -> for','statement1',1,'p_statement1','parser.py',70),
  ('statement1 -> callFunc','statement1',1,'p_statement1','parser.py',71),
  ('statement1 -> callFuncPS','statement1',1,'p_statement1','parser.py',72),
  ('statement1 -> return','statement1',1,'p_statement1','parser.py',73),
  ('statement1 -> break','statement1',1,'p_statement1','parser.py',74),
  ('for -> FOR body','for',2,'p_for','parser.py',78),
  ('for -> FOR exp body','for',3,'p_for','parser.py',79),
  ('for -> FOR exp SEMICOLON exp SEMICOLON exp body','for',7,'p_for','parser.py',80),
  ('declaration -> VAR ID type','declaration',3,'p_declaration','parser.py',84),
  ('declaration -> VAR ID type ASSIGN exp','declaration',5,'p_declaration','parser.py',85),
  ('declaration -> VAR ID type COLONEQ exp','declaration',5,'p_declaration','parser.py',86),
  ('declaration -> VAR ID type SEMICOLON','declaration',4,'p_declaration','parser.py',87),
  ('declaration -> VAR ID type ASSIGN exp SEMICOLON','declaration',6,'p_declaration','parser.py',88),
  ('declaration -> VAR ID type COLONEQ exp SEMICOLON','declaration',6,'p_declaration','parser.py',89),
  ('type -> INT','type',1,'p_type','parser.py',93),
  ('type -> STRING','type',1,'p_type','parser.py',94),
  ('type -> BOOL','type',1,'p_type','parser.py',95),
  ('exp -> exp1','exp',1,'p_exp_exp1','parser.py',99),
  ('exp1 -> exp1 ASSIGN exp2','exp1',3,'p_exp1','parser.py',114),
  ('exp1 -> exp1 COLONEQ exp2','exp1',3,'p_exp1','parser.py',115),
  ('exp1 -> exp2','exp1',1,'p_exp1','parser.py',116),
  ('exp2 -> exp2 OR exp3','exp2',3,'p_exp2','parser.py',120),
  ('exp2 -> exp3','exp2',1,'p_exp2','parser.py',121),
  ('exp3 -> exp3 AND exp4','exp3',3,'p_exp3','parser.py',125),
  ('exp3 -> exp4','exp3',1,'p_exp3','parser.py',126),
  ('exp4 -> exp4 EQUALS exp5','exp4',3,'p_exp4','parser.py',130),
  ('exp4 -> exp4 DIFFERENT exp5','exp4',3,'p_exp4','parser.py',131),
  ('exp4 -> exp5','exp4',1,'p_exp4','parser.py',132),
  ('exp5 -> exp5 LESS exp6','exp5',3,'p_exp5','parser.py',136),
  ('exp5 -> exp5 GREATER exp6','exp5',3,'p_exp5','parser.py',137),
  ('exp5 -> exp5 LESS_EQUAL exp6','exp5',3,'p_exp5','parser.py',138),
  ('exp5 -> exp5 GREATER_EQUAL exp6','exp5',3,'p_exp5','parser.py',139),
  ('exp5 -> exp6','exp5',1,'p_exp5','parser.py',140),
  ('exp6 -> exp6 PLUS exp7','exp6',3,'p_exp6','parser.py',144),
  ('exp6 -> exp6 MINUS exp7','exp6',3,'p_exp6','parser.py',145),
  ('exp6 -> exp7','exp6',1,'p_exp6','parser.py',146),
  ('exp7 -> exp7 TIMES exp8','exp7',3,'p_exp7','parser.py',150),
  ('exp7 -> exp7 DIVIDE exp8','exp7',3,'p_exp7','parser.py',151),
  ('exp7 -> exp7 MOD exp8','exp7',3,'p_exp7','parser.py',152),
  ('exp7 -> exp8','exp7',1,'p_exp7','parser.py',153),
  ('exp8 -> exp8 DPLUS','exp8',2,'p_exp8','parser.py',157),
  ('exp8 -> exp8 DMINUS','exp8',2,'p_exp8','parser.py',158),
  ('exp8 -> exp9','exp8',1,'p_exp8','parser.py',159),
  ('exp9 -> NOT exp9','exp9',2,'p_exp9','parser.py',163),
  ('exp9 -> NUMBER','exp9',1,'p_exp9','parser.py',164),
  ('exp9 -> STRING','exp9',1,'p_exp9','parser.py',165),
  ('exp9 -> ID','exp9',1,'p_exp9','parser.py',166),
  ('exp9 -> TRUE','exp9',1,'p_exp9','parser.py',167),
  ('exp9 -> FALSE','exp9',1,'p_exp9','parser.py',168),
  ('exp9 -> LPAREN exp RPAREN','exp9',3,'p_exp9','parser.py',169),
  ('return -> RETURN exp','return',2,'p_return','parser.py',173),
  ('return -> RETURN','return',1,'p_return','parser.py',174),
  ('return -> RETURN exp SEMICOLON','return',3,'p_return','parser.py',175),
  ('return -> RETURN SEMICOLON','return',2,'p_return','parser.py',176),
  ('break -> BREAK','break',1,'p_break','parser.py',180),
  ('break -> BREAK SEMICOLON','break',2,'p_break','parser.py',181),
  ('callFunc -> ID LPAREN params RPAREN','callFunc',4,'p_callFunc','parser.py',185),
  ('callFunc -> ID LPAREN RPAREN','callFunc',3,'p_callFunc','parser.py',186),
  ('callFunc -> ID LPAREN params RPAREN SEMICOLON','callFunc',5,'p_callFunc','parser.py',187),
  ('callFunc -> ID LPAREN RPAREN SEMICOLON','callFunc',4,'p_callFunc','parser.py',188),
  ('callFuncPS -> ID DOT ID LPAREN params RPAREN','callFuncPS',6,'p_callFuncPS','parser.py',192),
  ('callFuncPS -> ID DOT ID LPAREN RPAREN','callFuncPS',5,'p_callFuncPS','parser.py',193),
  ('callFuncPS -> ID DOT ID LPAREN params RPAREN SEMICOLON','callFuncPS',7,'p_callFuncPS','parser.py',194),
  ('callFuncPS -> ID DOT ID LPAREN RPAREN SEMICOLON','callFuncPS',6,'p_callFuncPS','parser.py',195),
  ('params -> exp COMMA params','params',3,'p_params','parser.py',198),
  ('params -> exp','params',1,'p_params','parser.py',199),
]
