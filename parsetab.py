
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGN BOOL BREAK COLONEQ COMMA DIFFERENT DIVIDE DMINUS DOT DPLUS ELSE EQUALS FALSE FOR FUNC GREATER GREATER_EQUAL ID IF IMPORT INT LCHAVES LESS LESS_EQUAL LPAREN MINUS MOD NEWLINE NOT NUMBER OR PACKAGE PLUS RCHAVES RETURN RPAREN SEMICOLON STRING TIMES TRUE VARprogramaGO : defpackage defimport funcdecls\n                | NEWLINE defpackage defimport funcdeclsdefpackage : PACKAGE ID NEWLINEdefimport : IMPORT STRING NEWLINEfuncdecl : FUNC ID signature NEWLINE body NEWLINE\n                | FUNC ID signature body\n                | FUNC ID signature body NEWLINEfuncdecls : funcdecl \n                 | funcdecl funcdecls signature : LPAREN sigparams RPAREN \n               | LPAREN sigparams RPAREN funcreturn \n               | LPAREN RPAREN\n               | LPAREN RPAREN funcreturn sigparams : ID type\n               | ID type COMMA sigparamsfuncreturn : type\n                | LPAREN type RPARENbody : LCHAVES  NEWLINE stms  RCHAVES\n          | LCHAVES  NEWLINE RCHAVESstms : statement \n            | statement NEWLINE stms\n            | statement NEWLINEstatement : statement1statement1 : IF exp body ELSE body\n                | IF exp body\n                | declaration\n                | for\n                | callFunc\n                | callFuncPS\n                | return\n                | breakfor : FOR body\n         | FOR exp body\n         | FOR exp SEMICOLON exp SEMICOLON exp bodydeclaration : VAR ID type \n                   | VAR ID type ASSIGN exp\n                   | VAR ID type COLONEQ exp\n                   | VAR ID type SEMICOLON\n                   | VAR ID type ASSIGN exp SEMICOLON\n                   | VAR ID type COLONEQ exp SEMICOLONtype : INT\n            | STRING\n            | BOOLexp : exp1 exp1 : exp1 ASSIGN exp2\n             | exp1 COLONEQ exp2\n             | exp2exp2 : exp2 OR exp3\n            | exp3exp3 : exp3 AND exp4\n            | exp4exp4 : exp4 EQUALS exp5\n          | exp4 DIFFERENT exp5\n          | exp5exp5 : exp5 LESS exp6\n          | exp5 GREATER exp6\n          | exp5 LESS_EQUAL exp6\n          | exp5 GREATER_EQUAL exp6\n          | exp6exp6 : exp6 PLUS exp7\n          | exp6 MINUS exp7\n          | exp7exp7 : exp7 TIMES exp8\n          | exp7 DIVIDE exp8\n          | exp7 MOD exp8\n          | exp8exp8 : exp8 DPLUS\n          | exp8 DMINUS\n          | exp9exp9 : NOT exp9\n          | NUMBER\n          | STRING\n          | ID \n          | TRUE\n          | FALSE\n          | LPAREN exp RPARENreturn : RETURN exp\n              | RETURN\n              | RETURN exp SEMICOLON\n              | RETURN SEMICOLONbreak : BREAK\n             | BREAK SEMICOLONcallFunc : ID LPAREN params RPAREN\n                | ID LPAREN RPAREN\n                | ID LPAREN params RPAREN SEMICOLON\n                | ID LPAREN RPAREN SEMICOLONcallFuncPS : ID DOT ID LPAREN params RPAREN\n                  | ID DOT ID LPAREN RPAREN\n                  | ID DOT ID LPAREN params RPAREN SEMICOLON\n                  | ID DOT ID LPAREN RPAREN SEMICOLONparams : exp COMMA params\n              | exp'
    
_lr_action_items = {'NEWLINE':([0,8,12,19,22,23,25,27,30,32,33,34,35,36,40,41,42,44,45,46,47,48,49,53,54,55,58,61,62,63,64,65,66,67,68,69,71,72,73,74,75,80,82,83,84,85,88,104,105,106,108,110,113,115,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,135,136,137,141,142,143,144,147,149,150,151,152,154,155,],[3,14,17,21,28,29,-12,38,-10,-13,-16,-41,-42,-43,-19,59,-23,-26,-27,-28,-29,-30,-31,-78,-81,-11,-18,-44,-47,-49,-51,-54,-59,-62,-66,-69,-71,-72,-73,-74,-75,-32,-77,-80,-82,-17,-25,-67,-68,-70,-35,-84,-33,-79,-45,-46,-48,-50,-52,-53,-55,-56,-57,-58,-60,-61,-63,-64,-65,-76,-38,-83,-86,-24,-36,-37,-85,-88,-39,-40,-87,-90,-89,-34,]),'PACKAGE':([0,3,],[4,4,]),'$end':([1,9,10,15,18,22,28,38,40,58,],[0,-1,-8,-9,-2,-6,-7,-5,-19,-18,]),'IMPORT':([2,7,14,],[6,6,-3,]),'ID':([4,11,20,29,43,50,52,53,57,59,70,76,78,79,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,114,133,134,138,139,148,],[8,16,26,51,73,77,73,73,26,51,73,73,73,112,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,]),'FUNC':([5,10,13,17,22,28,38,40,58,],[11,11,11,-4,-6,-7,-5,-19,-18,]),'STRING':([6,25,26,30,31,43,52,53,70,76,77,78,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,114,133,134,138,139,148,],[12,35,35,35,35,72,72,72,72,72,35,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,]),'LPAREN':([16,25,30,43,51,52,53,70,76,78,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,112,114,133,134,138,139,148,],[20,31,31,76,78,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,139,76,76,76,76,76,76,]),'LCHAVES':([19,21,25,30,32,33,34,35,36,52,55,60,61,62,63,64,65,66,67,68,69,71,72,73,74,75,81,85,104,105,106,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,153,],[23,23,-12,-10,-13,-16,-41,-42,-43,23,-11,23,-44,-47,-49,-51,-54,-59,-62,-66,-69,-71,-72,-73,-74,-75,23,-17,-67,-68,-70,23,-45,-46,-48,-50,-52,-53,-55,-56,-57,-58,-60,-61,-63,-64,-65,-76,23,]),'RPAREN':([20,24,34,35,36,37,56,61,62,63,64,65,66,67,68,69,71,72,73,74,75,78,86,104,105,106,107,109,111,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,139,145,146,],[25,30,-41,-42,-43,-14,85,-44,-47,-49,-51,-54,-59,-62,-66,-69,-71,-72,-73,-74,-75,110,-15,-67,-68,-70,132,136,-92,-45,-46,-48,-50,-52,-53,-55,-56,-57,-58,-60,-61,-63,-64,-65,-76,147,-91,151,]),'INT':([25,26,30,31,77,],[34,34,34,34,34,]),'BOOL':([25,26,30,31,77,],[36,36,36,36,36,]),'RCHAVES':([29,34,35,36,39,40,41,42,44,45,46,47,48,49,53,54,58,59,61,62,63,64,65,66,67,68,69,71,72,73,74,75,80,82,83,84,87,88,104,105,106,108,110,113,115,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,135,136,137,141,142,143,144,147,149,150,151,152,154,155,],[40,-41,-42,-43,58,-19,-20,-23,-26,-27,-28,-29,-30,-31,-78,-81,-18,-22,-44,-47,-49,-51,-54,-59,-62,-66,-69,-71,-72,-73,-74,-75,-32,-77,-80,-82,-21,-25,-67,-68,-70,-35,-84,-33,-79,-45,-46,-48,-50,-52,-53,-55,-56,-57,-58,-60,-61,-63,-64,-65,-76,-38,-83,-86,-24,-36,-37,-85,-88,-39,-40,-87,-90,-89,-34,]),'IF':([29,59,],[43,43,]),'VAR':([29,59,],[50,50,]),'FOR':([29,59,],[52,52,]),'RETURN':([29,59,],[53,53,]),'BREAK':([29,59,],[54,54,]),'COMMA':([34,35,36,37,61,62,63,64,65,66,67,68,69,71,72,73,74,75,104,105,106,111,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,],[-41,-42,-43,57,-44,-47,-49,-51,-54,-59,-62,-66,-69,-71,-72,-73,-74,-75,-67,-68,-70,138,-45,-46,-48,-50,-52,-53,-55,-56,-57,-58,-60,-61,-63,-64,-65,-76,]),'ASSIGN':([34,35,36,61,62,63,64,65,66,67,68,69,71,72,73,74,75,104,105,106,108,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,],[-41,-42,-43,89,-47,-49,-51,-54,-59,-62,-66,-69,-71,-72,-73,-74,-75,-67,-68,-70,133,-45,-46,-48,-50,-52,-53,-55,-56,-57,-58,-60,-61,-63,-64,-65,-76,]),'COLONEQ':([34,35,36,61,62,63,64,65,66,67,68,69,71,72,73,74,75,104,105,106,108,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,],[-41,-42,-43,90,-47,-49,-51,-54,-59,-62,-66,-69,-71,-72,-73,-74,-75,-67,-68,-70,134,-45,-46,-48,-50,-52,-53,-55,-56,-57,-58,-60,-61,-63,-64,-65,-76,]),'SEMICOLON':([34,35,36,53,54,61,62,63,64,65,66,67,68,69,71,72,73,74,75,81,82,104,105,106,108,110,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,136,140,142,143,147,151,],[-41,-42,-43,83,84,-44,-47,-49,-51,-54,-59,-62,-66,-69,-71,-72,-73,-74,-75,114,115,-67,-68,-70,135,137,-45,-46,-48,-50,-52,-53,-55,-56,-57,-58,-60,-61,-63,-64,-65,-76,144,148,149,150,152,154,]),'ELSE':([40,58,88,],[-19,-18,116,]),'NOT':([43,52,53,70,76,78,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,114,133,134,138,139,148,],[70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,]),'NUMBER':([43,52,53,70,76,78,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,114,133,134,138,139,148,],[71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,]),'TRUE':([43,52,53,70,76,78,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,114,133,134,138,139,148,],[74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,]),'FALSE':([43,52,53,70,76,78,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,114,133,134,138,139,148,],[75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,]),'DOT':([51,],[79,]),'OR':([62,63,64,65,66,67,68,69,71,72,73,74,75,104,105,106,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,],[91,-49,-51,-54,-59,-62,-66,-69,-71,-72,-73,-74,-75,-67,-68,-70,91,91,-48,-50,-52,-53,-55,-56,-57,-58,-60,-61,-63,-64,-65,-76,]),'AND':([63,64,65,66,67,68,69,71,72,73,74,75,104,105,106,119,120,121,122,123,124,125,126,127,128,129,130,131,132,],[92,-51,-54,-59,-62,-66,-69,-71,-72,-73,-74,-75,-67,-68,-70,92,-50,-52,-53,-55,-56,-57,-58,-60,-61,-63,-64,-65,-76,]),'EQUALS':([64,65,66,67,68,69,71,72,73,74,75,104,105,106,120,121,122,123,124,125,126,127,128,129,130,131,132,],[93,-54,-59,-62,-66,-69,-71,-72,-73,-74,-75,-67,-68,-70,93,-52,-53,-55,-56,-57,-58,-60,-61,-63,-64,-65,-76,]),'DIFFERENT':([64,65,66,67,68,69,71,72,73,74,75,104,105,106,120,121,122,123,124,125,126,127,128,129,130,131,132,],[94,-54,-59,-62,-66,-69,-71,-72,-73,-74,-75,-67,-68,-70,94,-52,-53,-55,-56,-57,-58,-60,-61,-63,-64,-65,-76,]),'LESS':([65,66,67,68,69,71,72,73,74,75,104,105,106,121,122,123,124,125,126,127,128,129,130,131,132,],[95,-59,-62,-66,-69,-71,-72,-73,-74,-75,-67,-68,-70,95,95,-55,-56,-57,-58,-60,-61,-63,-64,-65,-76,]),'GREATER':([65,66,67,68,69,71,72,73,74,75,104,105,106,121,122,123,124,125,126,127,128,129,130,131,132,],[96,-59,-62,-66,-69,-71,-72,-73,-74,-75,-67,-68,-70,96,96,-55,-56,-57,-58,-60,-61,-63,-64,-65,-76,]),'LESS_EQUAL':([65,66,67,68,69,71,72,73,74,75,104,105,106,121,122,123,124,125,126,127,128,129,130,131,132,],[97,-59,-62,-66,-69,-71,-72,-73,-74,-75,-67,-68,-70,97,97,-55,-56,-57,-58,-60,-61,-63,-64,-65,-76,]),'GREATER_EQUAL':([65,66,67,68,69,71,72,73,74,75,104,105,106,121,122,123,124,125,126,127,128,129,130,131,132,],[98,-59,-62,-66,-69,-71,-72,-73,-74,-75,-67,-68,-70,98,98,-55,-56,-57,-58,-60,-61,-63,-64,-65,-76,]),'PLUS':([66,67,68,69,71,72,73,74,75,104,105,106,123,124,125,126,127,128,129,130,131,132,],[99,-62,-66,-69,-71,-72,-73,-74,-75,-67,-68,-70,99,99,99,99,-60,-61,-63,-64,-65,-76,]),'MINUS':([66,67,68,69,71,72,73,74,75,104,105,106,123,124,125,126,127,128,129,130,131,132,],[100,-62,-66,-69,-71,-72,-73,-74,-75,-67,-68,-70,100,100,100,100,-60,-61,-63,-64,-65,-76,]),'TIMES':([67,68,69,71,72,73,74,75,104,105,106,127,128,129,130,131,132,],[101,-66,-69,-71,-72,-73,-74,-75,-67,-68,-70,101,101,-63,-64,-65,-76,]),'DIVIDE':([67,68,69,71,72,73,74,75,104,105,106,127,128,129,130,131,132,],[102,-66,-69,-71,-72,-73,-74,-75,-67,-68,-70,102,102,-63,-64,-65,-76,]),'MOD':([67,68,69,71,72,73,74,75,104,105,106,127,128,129,130,131,132,],[103,-66,-69,-71,-72,-73,-74,-75,-67,-68,-70,103,103,-63,-64,-65,-76,]),'DPLUS':([68,69,71,72,73,74,75,104,105,106,129,130,131,132,],[104,-69,-71,-72,-73,-74,-75,-67,-68,-70,104,104,104,-76,]),'DMINUS':([68,69,71,72,73,74,75,104,105,106,129,130,131,132,],[105,-69,-71,-72,-73,-74,-75,-67,-68,-70,105,105,105,-76,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programaGO':([0,],[1,]),'defpackage':([0,3,],[2,7,]),'defimport':([2,7,],[5,13,]),'funcdecls':([5,10,13,],[9,15,18,]),'funcdecl':([5,10,13,],[10,10,10,]),'signature':([16,],[19,]),'body':([19,21,52,60,81,116,153,],[22,27,80,88,113,141,155,]),'sigparams':([20,57,],[24,86,]),'funcreturn':([25,30,],[32,55,]),'type':([25,26,30,31,77,],[33,37,33,56,108,]),'stms':([29,59,],[39,87,]),'statement':([29,59,],[41,41,]),'statement1':([29,59,],[42,42,]),'declaration':([29,59,],[44,44,]),'for':([29,59,],[45,45,]),'callFunc':([29,59,],[46,46,]),'callFuncPS':([29,59,],[47,47,]),'return':([29,59,],[48,48,]),'break':([29,59,],[49,49,]),'exp':([43,52,53,76,78,114,133,134,138,139,148,],[60,81,82,107,111,140,142,143,111,111,153,]),'exp1':([43,52,53,76,78,114,133,134,138,139,148,],[61,61,61,61,61,61,61,61,61,61,61,]),'exp2':([43,52,53,76,78,89,90,114,133,134,138,139,148,],[62,62,62,62,62,117,118,62,62,62,62,62,62,]),'exp3':([43,52,53,76,78,89,90,91,114,133,134,138,139,148,],[63,63,63,63,63,63,63,119,63,63,63,63,63,63,]),'exp4':([43,52,53,76,78,89,90,91,92,114,133,134,138,139,148,],[64,64,64,64,64,64,64,64,120,64,64,64,64,64,64,]),'exp5':([43,52,53,76,78,89,90,91,92,93,94,114,133,134,138,139,148,],[65,65,65,65,65,65,65,65,65,121,122,65,65,65,65,65,65,]),'exp6':([43,52,53,76,78,89,90,91,92,93,94,95,96,97,98,114,133,134,138,139,148,],[66,66,66,66,66,66,66,66,66,66,66,123,124,125,126,66,66,66,66,66,66,]),'exp7':([43,52,53,76,78,89,90,91,92,93,94,95,96,97,98,99,100,114,133,134,138,139,148,],[67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,127,128,67,67,67,67,67,67,]),'exp8':([43,52,53,76,78,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,114,133,134,138,139,148,],[68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,129,130,131,68,68,68,68,68,68,]),'exp9':([43,52,53,70,76,78,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,114,133,134,138,139,148,],[69,69,69,106,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,]),'params':([78,138,139,],[109,145,146,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programaGO","S'",1,None,None,None),
  ('programaGO -> defpackage defimport funcdecls','programaGO',3,'p_programaGO','parser.py',16),
  ('programaGO -> NEWLINE defpackage defimport funcdecls','programaGO',4,'p_programaGO','parser.py',17),
  ('defpackage -> PACKAGE ID NEWLINE','defpackage',3,'p_defpackage','parser.py',24),
  ('defimport -> IMPORT STRING NEWLINE','defimport',3,'p_defimport','parser.py',28),
  ('funcdecl -> FUNC ID signature NEWLINE body NEWLINE','funcdecl',6,'p_funcdecl','parser.py',32),
  ('funcdecl -> FUNC ID signature body','funcdecl',4,'p_funcdecl','parser.py',33),
  ('funcdecl -> FUNC ID signature body NEWLINE','funcdecl',5,'p_funcdecl','parser.py',34),
  ('funcdecls -> funcdecl','funcdecls',1,'p_funcdecls','parser.py',44),
  ('funcdecls -> funcdecl funcdecls','funcdecls',2,'p_funcdecls','parser.py',45),
  ('signature -> LPAREN sigparams RPAREN','signature',3,'p_signature','parser.py',53),
  ('signature -> LPAREN sigparams RPAREN funcreturn','signature',4,'p_signature','parser.py',54),
  ('signature -> LPAREN RPAREN','signature',2,'p_signature','parser.py',55),
  ('signature -> LPAREN RPAREN funcreturn','signature',3,'p_signature','parser.py',56),
  ('sigparams -> ID type','sigparams',2,'p_sigparams','parser.py',67),
  ('sigparams -> ID type COMMA sigparams','sigparams',4,'p_sigparams','parser.py',68),
  ('funcreturn -> type','funcreturn',1,'p_funcreturn','parser.py',75),
  ('funcreturn -> LPAREN type RPAREN','funcreturn',3,'p_funcreturn','parser.py',76),
  ('body -> LCHAVES NEWLINE stms RCHAVES','body',4,'p_body','parser.py',83),
  ('body -> LCHAVES NEWLINE RCHAVES','body',3,'p_body','parser.py',84),
  ('stms -> statement','stms',1,'p_stms','parser.py',92),
  ('stms -> statement NEWLINE stms','stms',3,'p_stms','parser.py',93),
  ('stms -> statement NEWLINE','stms',2,'p_stms','parser.py',94),
  ('statement -> statement1','statement',1,'p_statement','parser.py',101),
  ('statement1 -> IF exp body ELSE body','statement1',5,'p_statement1','parser.py',106),
  ('statement1 -> IF exp body','statement1',3,'p_statement1','parser.py',107),
  ('statement1 -> declaration','statement1',1,'p_statement1','parser.py',108),
  ('statement1 -> for','statement1',1,'p_statement1','parser.py',109),
  ('statement1 -> callFunc','statement1',1,'p_statement1','parser.py',110),
  ('statement1 -> callFuncPS','statement1',1,'p_statement1','parser.py',111),
  ('statement1 -> return','statement1',1,'p_statement1','parser.py',112),
  ('statement1 -> break','statement1',1,'p_statement1','parser.py',113),
  ('for -> FOR body','for',2,'p_for','parser.py',134),
  ('for -> FOR exp body','for',3,'p_for','parser.py',135),
  ('for -> FOR exp SEMICOLON exp SEMICOLON exp body','for',7,'p_for','parser.py',136),
  ('declaration -> VAR ID type','declaration',3,'p_declaration','parser.py',145),
  ('declaration -> VAR ID type ASSIGN exp','declaration',5,'p_declaration','parser.py',146),
  ('declaration -> VAR ID type COLONEQ exp','declaration',5,'p_declaration','parser.py',147),
  ('declaration -> VAR ID type SEMICOLON','declaration',4,'p_declaration','parser.py',148),
  ('declaration -> VAR ID type ASSIGN exp SEMICOLON','declaration',6,'p_declaration','parser.py',149),
  ('declaration -> VAR ID type COLONEQ exp SEMICOLON','declaration',6,'p_declaration','parser.py',150),
  ('type -> INT','type',1,'p_type','parser.py',161),
  ('type -> STRING','type',1,'p_type','parser.py',162),
  ('type -> BOOL','type',1,'p_type','parser.py',163),
  ('exp -> exp1','exp',1,'p_exp_exp1','parser.py',172),
  ('exp1 -> exp1 ASSIGN exp2','exp1',3,'p_exp1','parser.py',176),
  ('exp1 -> exp1 COLONEQ exp2','exp1',3,'p_exp1','parser.py',177),
  ('exp1 -> exp2','exp1',1,'p_exp1','parser.py',178),
  ('exp2 -> exp2 OR exp3','exp2',3,'p_exp2','parser.py',187),
  ('exp2 -> exp3','exp2',1,'p_exp2','parser.py',188),
  ('exp3 -> exp3 AND exp4','exp3',3,'p_exp3','parser.py',195),
  ('exp3 -> exp4','exp3',1,'p_exp3','parser.py',196),
  ('exp4 -> exp4 EQUALS exp5','exp4',3,'p_exp4','parser.py',203),
  ('exp4 -> exp4 DIFFERENT exp5','exp4',3,'p_exp4','parser.py',204),
  ('exp4 -> exp5','exp4',1,'p_exp4','parser.py',205),
  ('exp5 -> exp5 LESS exp6','exp5',3,'p_exp5','parser.py',214),
  ('exp5 -> exp5 GREATER exp6','exp5',3,'p_exp5','parser.py',215),
  ('exp5 -> exp5 LESS_EQUAL exp6','exp5',3,'p_exp5','parser.py',216),
  ('exp5 -> exp5 GREATER_EQUAL exp6','exp5',3,'p_exp5','parser.py',217),
  ('exp5 -> exp6','exp5',1,'p_exp5','parser.py',218),
  ('exp6 -> exp6 PLUS exp7','exp6',3,'p_exp6','parser.py',231),
  ('exp6 -> exp6 MINUS exp7','exp6',3,'p_exp6','parser.py',232),
  ('exp6 -> exp7','exp6',1,'p_exp6','parser.py',233),
  ('exp7 -> exp7 TIMES exp8','exp7',3,'p_exp7','parser.py',242),
  ('exp7 -> exp7 DIVIDE exp8','exp7',3,'p_exp7','parser.py',243),
  ('exp7 -> exp7 MOD exp8','exp7',3,'p_exp7','parser.py',244),
  ('exp7 -> exp8','exp7',1,'p_exp7','parser.py',245),
  ('exp8 -> exp8 DPLUS','exp8',2,'p_exp8','parser.py',256),
  ('exp8 -> exp8 DMINUS','exp8',2,'p_exp8','parser.py',257),
  ('exp8 -> exp9','exp8',1,'p_exp8','parser.py',258),
  ('exp9 -> NOT exp9','exp9',2,'p_exp9','parser.py',267),
  ('exp9 -> NUMBER','exp9',1,'p_exp9','parser.py',268),
  ('exp9 -> STRING','exp9',1,'p_exp9','parser.py',269),
  ('exp9 -> ID','exp9',1,'p_exp9','parser.py',270),
  ('exp9 -> TRUE','exp9',1,'p_exp9','parser.py',271),
  ('exp9 -> FALSE','exp9',1,'p_exp9','parser.py',272),
  ('exp9 -> LPAREN exp RPAREN','exp9',3,'p_exp9','parser.py',273),
  ('return -> RETURN exp','return',2,'p_return','parser.py',288),
  ('return -> RETURN','return',1,'p_return','parser.py',289),
  ('return -> RETURN exp SEMICOLON','return',3,'p_return','parser.py',290),
  ('return -> RETURN SEMICOLON','return',2,'p_return','parser.py',291),
  ('break -> BREAK','break',1,'p_break','parser.py',302),
  ('break -> BREAK SEMICOLON','break',2,'p_break','parser.py',303),
  ('callFunc -> ID LPAREN params RPAREN','callFunc',4,'p_callFunc','parser.py',307),
  ('callFunc -> ID LPAREN RPAREN','callFunc',3,'p_callFunc','parser.py',308),
  ('callFunc -> ID LPAREN params RPAREN SEMICOLON','callFunc',5,'p_callFunc','parser.py',309),
  ('callFunc -> ID LPAREN RPAREN SEMICOLON','callFunc',4,'p_callFunc','parser.py',310),
  ('callFuncPS -> ID DOT ID LPAREN params RPAREN','callFuncPS',6,'p_callFuncPS','parser.py',318),
  ('callFuncPS -> ID DOT ID LPAREN RPAREN','callFuncPS',5,'p_callFuncPS','parser.py',319),
  ('callFuncPS -> ID DOT ID LPAREN params RPAREN SEMICOLON','callFuncPS',7,'p_callFuncPS','parser.py',320),
  ('callFuncPS -> ID DOT ID LPAREN RPAREN SEMICOLON','callFuncPS',6,'p_callFuncPS','parser.py',321),
  ('params -> exp COMMA params','params',3,'p_params','parser.py',329),
  ('params -> exp','params',1,'p_params','parser.py',330),
]
