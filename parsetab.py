
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGN BOOL BREAK COLONEQ COMMA DIFFERENT DIVIDE DMINUS DOT DPLUS ELSE EQUALS FALSE FOR FUNC GREATER GREATER_EQUAL ID IF IMPORT INT LCHAVES LESS LESS_EQUAL LPAREN MINUS MOD NEWLINE NOT NUMBER OR PACKAGE PLUS RCHAVES RETURN RPAREN SEMICOLON STRING TIMES TRUE VARprogramaGO : defpackage defimport funcdeclsdefpackage : PACKAGE IDdefimport : IMPORT IDfuncdecl : FUNC ID signature bodyfuncdecls : funcdecl\n                 | funcdecl funcdeclssignature : LPAREN sigparams RPAREN \n               | LPAREN sigparams RPAREN funcreturn \n               | LPAREN RPAREN\n               | LPAREN RPAREN funcreturn sigparams : ID type\n               | ID type COMMA sigparamsfuncreturn : type\n                | LPAREN type RPAREN body : LCHAVES stms RCHAVES\n          | LCHAVES RCHAVESstms : statement \n            | statement NEWLINE stms\n            | statement NEWLINEstatement : statement1statement1 : IF LPAREN exp RPAREN body ELSE body\n                | IF exp statement1 ELSE body\n                | IF exp body\n                | IF LPAREN exp RPAREN body \n                | declaration\n                | for\n                | callFunc\n                | callFuncP\n                | return\n                | breakfor : FOR body\n         | FOR exp body\n         | FOR exp SEMICOLON exp SEMICOLON exp bodydeclaration : VAR ID type \n                   | VAR ID type ASSIGN exp\n                   | VAR ID type COLONEQ exp\n                   | VAR ID type SEMICOLON\n                   | VAR ID type ASSIGN exp SEMICOLON\n                   | VAR ID type COLONEQ exp SEMICOLONtype : INT\n            | STRING\n            | BOOLexp : exp1 exp1 : exp1 ASSIGN exp2\n             | exp1 COLONEQ exp2\n             | exp2exp2 : exp2 OR exp3\n            | exp3exp3 : exp3 AND exp4\n            | exp4exp4 : exp4 EQUALS exp5\n          | exp4 DIFFERENT exp5\n          | exp5exp5 : exp5 LESS exp6\n          | exp5 GREATER exp6\n          | exp5 LESS_EQUAL exp6\n          | exp5 GREATER_EQUAL exp6\n          | exp6exp6 : exp6 PLUS exp7\n          | exp6 MINUS exp7\n          | exp7exp7 : exp7 TIMES exp8\n          | exp7 DIVIDE exp8\n          | exp7 MOD exp8\n          | exp8exp8 : exp8 DPLUS\n          | exp8 DMINUS\n          | NOT exp8\n          | exp9exp9 : NUMBER\n          | STRING\n          | ID \n          | TRUE\n          | FALSE\n          | LPAREN exp RPAREN\n          | expreturn : RETURN exp\n              | RETURN\n              | RETURN exp SEMICOLON\n              | RETURN SEMICOLONbreak : BREAK\n             | BREAK SEMICOLONcallFunc : ID LPAREN params RPAREN\n                | ID LPAREN RPAREN\n                | ID LPAREN params RPAREN SEMICOLON\n                | ID LPAREN RPAREN SEMICOLONcallFuncP : ID DOT ID LPAREN params RPAREN\n                 | ID DOT ID LPAREN RPAREN\n                 | ID DOT ID LPAREN params RPAREN SEMICOLON\n                 | ID DOT ID LPAREN RPAREN SEMICOLONparams : exp COMMA params\n              | exp'
    
_lr_action_items = {'PACKAGE':([0,],[3,]),'$end':([1,7,8,11,15,21,44,],[0,-1,-5,-6,-4,-16,-15,]),'IMPORT':([2,6,],[5,-2,]),'ID':([3,5,9,14,16,24,31,33,34,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,64,65,68,74,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,104,109,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,131,132,134,143,],[6,10,12,19,32,60,63,60,60,32,60,32,-43,-46,-48,-50,-53,-58,-61,-65,60,-69,-70,-71,-72,-73,-74,60,102,60,19,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,-66,-67,-65,-76,60,-75,-44,-45,-47,-49,-51,-52,-54,-55,-56,-57,-59,-60,-62,-63,-64,60,60,60,60,-75,60,]),'FUNC':([4,8,10,15,21,44,],[9,9,-3,-4,-16,-15,]),'LPAREN':([12,18,24,32,33,34,36,46,56,64,68,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,102,104,126,127,131,132,143,],[14,37,46,64,68,68,37,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,132,68,68,68,68,68,68,]),'LCHAVES':([13,18,33,36,38,39,40,41,42,47,48,49,50,51,52,53,54,55,57,58,59,60,61,62,67,72,94,95,96,97,107,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,134,144,149,],[16,-9,16,-7,-10,-13,-40,-41,-42,16,-43,-46,-48,-50,-53,-58,-61,-65,-69,-70,-71,-72,-73,-74,16,-8,-66,-67,-65,-76,-14,16,16,-44,-45,-47,-49,-51,-52,-54,-55,-56,-57,-59,-60,-62,-63,-64,-75,16,16,]),'RPAREN':([14,17,40,41,42,43,48,49,50,51,52,53,54,55,57,58,59,60,61,62,64,73,76,94,95,96,97,99,101,105,108,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,132,134,140,141,],[18,36,-40,-41,-42,-11,-43,-46,-48,-50,-53,-58,-61,-65,-69,-70,-71,-72,-73,-74,100,107,109,-66,-67,-65,-76,129,-76,134,-12,-44,-45,-47,-49,-51,-52,-54,-55,-56,-57,-59,-60,-62,-63,-64,142,-75,-91,147,]),'RCHAVES':([16,20,21,22,23,25,26,27,28,29,30,34,35,40,41,42,44,45,48,49,50,51,52,53,54,55,57,58,59,60,61,62,66,69,70,71,75,78,94,95,96,97,98,100,103,106,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,128,129,130,134,135,136,137,138,139,142,145,146,147,148,150,151,152,],[21,44,-16,-17,-20,-25,-26,-27,-28,-29,-30,-78,-81,-40,-41,-42,-15,-19,-43,-46,-48,-50,-53,-58,-61,-65,-69,-70,-71,-72,-73,-74,-31,-76,-80,-82,-18,-23,-66,-67,-65,-76,-34,-84,-32,-79,-44,-45,-47,-49,-51,-52,-54,-55,-56,-57,-59,-60,-62,-63,-64,-37,-83,-86,-75,-24,-22,-35,-36,-85,-88,-38,-39,-87,-90,-21,-89,-33,]),'IF':([16,45,47,48,49,50,51,52,53,54,55,57,58,59,60,61,62,94,95,96,97,109,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,134,],[24,24,24,-43,-46,-48,-50,-53,-58,-61,-65,-69,-70,-71,-72,-73,-74,-66,-67,-65,-76,-75,-44,-45,-47,-49,-51,-52,-54,-55,-56,-57,-59,-60,-62,-63,-64,-75,]),'VAR':([16,45,47,48,49,50,51,52,53,54,55,57,58,59,60,61,62,94,95,96,97,109,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,134,],[31,31,31,-43,-46,-48,-50,-53,-58,-61,-65,-69,-70,-71,-72,-73,-74,-66,-67,-65,-76,-75,-44,-45,-47,-49,-51,-52,-54,-55,-56,-57,-59,-60,-62,-63,-64,-75,]),'FOR':([16,45,47,48,49,50,51,52,53,54,55,57,58,59,60,61,62,94,95,96,97,109,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,134,],[33,33,33,-43,-46,-48,-50,-53,-58,-61,-65,-69,-70,-71,-72,-73,-74,-66,-67,-65,-76,-75,-44,-45,-47,-49,-51,-52,-54,-55,-56,-57,-59,-60,-62,-63,-64,-75,]),'RETURN':([16,45,47,48,49,50,51,52,53,54,55,57,58,59,60,61,62,94,95,96,97,109,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,134,],[34,34,34,-43,-46,-48,-50,-53,-58,-61,-65,-69,-70,-71,-72,-73,-74,-66,-67,-65,-76,-75,-44,-45,-47,-49,-51,-52,-54,-55,-56,-57,-59,-60,-62,-63,-64,-75,]),'BREAK':([16,45,47,48,49,50,51,52,53,54,55,57,58,59,60,61,62,94,95,96,97,109,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,134,],[35,35,35,-43,-46,-48,-50,-53,-58,-61,-65,-69,-70,-71,-72,-73,-74,-66,-67,-65,-76,-75,-44,-45,-47,-49,-51,-52,-54,-55,-56,-57,-59,-60,-62,-63,-64,-75,]),'INT':([18,19,36,37,63,],[40,40,40,40,40,]),'STRING':([18,19,24,33,34,36,37,46,56,63,64,68,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,104,126,127,131,132,143,],[41,41,59,59,59,41,41,59,59,41,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'BOOL':([18,19,36,37,63,],[42,42,42,42,42,]),'NEWLINE':([21,22,23,25,26,27,28,29,30,34,35,40,41,42,44,48,49,50,51,52,53,54,55,57,58,59,60,61,62,66,69,70,71,78,94,95,96,97,98,100,103,106,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,128,129,130,134,135,136,137,138,139,142,145,146,147,148,150,151,152,],[-16,45,-20,-25,-26,-27,-28,-29,-30,-78,-81,-40,-41,-42,-15,-43,-46,-48,-50,-53,-58,-61,-65,-69,-70,-71,-72,-73,-74,-31,-76,-80,-82,-23,-66,-67,-65,-76,-34,-84,-32,-79,-44,-45,-47,-49,-51,-52,-54,-55,-56,-57,-59,-60,-62,-63,-64,-37,-83,-86,-75,-24,-22,-35,-36,-85,-88,-38,-39,-87,-90,-21,-89,-33,]),'ELSE':([21,25,26,27,28,29,30,34,35,40,41,42,44,48,49,50,51,52,53,54,55,57,58,59,60,61,62,66,69,70,71,77,78,94,95,96,97,98,100,103,106,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,128,129,130,134,135,136,137,138,139,142,145,146,147,148,150,151,152,],[-16,-25,-26,-27,-28,-29,-30,-78,-81,-40,-41,-42,-15,-43,-46,-48,-50,-53,-58,-61,-65,-69,-70,-71,-72,-73,-74,-31,-76,-80,-82,110,-23,-66,-67,-65,-76,-34,-84,-32,-79,-44,-45,-47,-49,-51,-52,-54,-55,-56,-57,-59,-60,-62,-63,-64,-37,-83,-86,-75,144,-22,-35,-36,-85,-88,-38,-39,-87,-90,-21,-89,-33,]),'NOT':([24,33,34,46,56,64,68,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,104,126,127,131,132,143,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'NUMBER':([24,33,34,46,56,64,68,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,104,126,127,131,132,143,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'TRUE':([24,33,34,46,56,64,68,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,104,126,127,131,132,143,],[61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'FALSE':([24,33,34,46,56,64,68,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,104,126,127,131,132,143,],[62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'DOT':([32,],[65,]),'SEMICOLON':([34,35,40,41,42,48,49,50,51,52,53,54,55,57,58,59,60,61,62,67,69,94,95,96,97,98,100,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,129,133,134,137,138,142,147,],[70,71,-40,-41,-42,-43,-46,-48,-50,-53,-58,-61,-65,-69,-70,-71,-72,-73,-74,104,106,-66,-67,-65,-76,128,130,-44,-45,-47,-49,-51,-52,-54,-55,-56,-57,-59,-60,-62,-63,-64,139,143,-75,145,146,148,151,]),'COMMA':([40,41,42,43,48,49,50,51,52,53,54,55,57,58,59,60,61,62,94,95,96,97,101,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,134,],[-40,-41,-42,74,-43,-46,-48,-50,-53,-58,-61,-65,-69,-70,-71,-72,-73,-74,-66,-67,-65,-76,131,-44,-45,-47,-49,-51,-52,-54,-55,-56,-57,-59,-60,-62,-63,-64,-75,]),'ASSIGN':([40,41,42,47,48,49,50,51,52,53,54,55,57,58,59,60,61,62,67,69,76,94,95,96,97,98,101,105,109,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,133,134,137,138,149,],[-40,-41,-42,-76,79,-46,-48,-50,-53,-58,-61,-65,-69,-70,-71,-72,-73,-74,-76,-76,-76,-66,-67,-65,-76,126,-76,-76,-75,-44,-45,-47,-49,-51,-52,-54,-55,-56,-57,-59,-60,-62,-63,-64,-76,-75,-76,-76,-76,]),'COLONEQ':([40,41,42,47,48,49,50,51,52,53,54,55,57,58,59,60,61,62,67,69,76,94,95,96,97,98,101,105,109,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,133,134,137,138,149,],[-40,-41,-42,-76,80,-46,-48,-50,-53,-58,-61,-65,-69,-70,-71,-72,-73,-74,-76,-76,-76,-66,-67,-65,-76,127,-76,-76,-75,-44,-45,-47,-49,-51,-52,-54,-55,-56,-57,-59,-60,-62,-63,-64,-76,-75,-76,-76,-76,]),'DPLUS':([47,48,49,50,51,52,53,54,55,57,58,59,60,61,62,67,69,76,94,95,96,97,101,105,109,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,133,134,137,138,149,],[-76,-43,-46,-48,-50,-53,-58,-61,94,-69,-70,-71,-72,-73,-74,-76,-76,-76,-66,-67,94,-76,-76,-76,-75,-44,-45,-47,-49,-51,-52,-54,-55,-56,-57,-59,-60,94,94,94,-76,-75,-76,-76,-76,]),'DMINUS':([47,48,49,50,51,52,53,54,55,57,58,59,60,61,62,67,69,76,94,95,96,97,101,105,109,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,133,134,137,138,149,],[-76,-43,-46,-48,-50,-53,-58,-61,95,-69,-70,-71,-72,-73,-74,-76,-76,-76,-66,-67,95,-76,-76,-76,-75,-44,-45,-47,-49,-51,-52,-54,-55,-56,-57,-59,-60,95,95,95,-76,-75,-76,-76,-76,]),'TIMES':([47,48,49,50,51,52,53,54,55,57,58,59,60,61,62,67,69,76,94,95,96,97,101,105,109,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,133,134,137,138,149,],[-76,-43,-46,-48,-50,-53,-58,91,-65,-69,-70,-71,-72,-73,-74,-76,-76,-76,-66,-67,-65,-76,-76,-76,-75,-44,-45,-47,-49,-51,-52,-54,-55,-56,-57,91,91,-62,-63,-64,-76,-75,-76,-76,-76,]),'DIVIDE':([47,48,49,50,51,52,53,54,55,57,58,59,60,61,62,67,69,76,94,95,96,97,101,105,109,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,133,134,137,138,149,],[-76,-43,-46,-48,-50,-53,-58,92,-65,-69,-70,-71,-72,-73,-74,-76,-76,-76,-66,-67,-65,-76,-76,-76,-75,-44,-45,-47,-49,-51,-52,-54,-55,-56,-57,92,92,-62,-63,-64,-76,-75,-76,-76,-76,]),'MOD':([47,48,49,50,51,52,53,54,55,57,58,59,60,61,62,67,69,76,94,95,96,97,101,105,109,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,133,134,137,138,149,],[-76,-43,-46,-48,-50,-53,-58,93,-65,-69,-70,-71,-72,-73,-74,-76,-76,-76,-66,-67,-65,-76,-76,-76,-75,-44,-45,-47,-49,-51,-52,-54,-55,-56,-57,93,93,-62,-63,-64,-76,-75,-76,-76,-76,]),'PLUS':([47,48,49,50,51,52,53,54,55,57,58,59,60,61,62,67,69,76,94,95,96,97,101,105,109,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,133,134,137,138,149,],[-76,-43,-46,-48,-50,-53,89,-61,-65,-69,-70,-71,-72,-73,-74,-76,-76,-76,-66,-67,-65,-76,-76,-76,-75,-44,-45,-47,-49,-51,-52,89,89,89,89,-59,-60,-62,-63,-64,-76,-75,-76,-76,-76,]),'MINUS':([47,48,49,50,51,52,53,54,55,57,58,59,60,61,62,67,69,76,94,95,96,97,101,105,109,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,133,134,137,138,149,],[-76,-43,-46,-48,-50,-53,90,-61,-65,-69,-70,-71,-72,-73,-74,-76,-76,-76,-66,-67,-65,-76,-76,-76,-75,-44,-45,-47,-49,-51,-52,90,90,90,90,-59,-60,-62,-63,-64,-76,-75,-76,-76,-76,]),'LESS':([47,48,49,50,51,52,53,54,55,57,58,59,60,61,62,67,69,76,94,95,96,97,101,105,109,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,133,134,137,138,149,],[-76,-43,-46,-48,-50,85,-58,-61,-65,-69,-70,-71,-72,-73,-74,-76,-76,-76,-66,-67,-65,-76,-76,-76,-75,-44,-45,-47,-49,85,85,-54,-55,-56,-57,-59,-60,-62,-63,-64,-76,-75,-76,-76,-76,]),'GREATER':([47,48,49,50,51,52,53,54,55,57,58,59,60,61,62,67,69,76,94,95,96,97,101,105,109,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,133,134,137,138,149,],[-76,-43,-46,-48,-50,86,-58,-61,-65,-69,-70,-71,-72,-73,-74,-76,-76,-76,-66,-67,-65,-76,-76,-76,-75,-44,-45,-47,-49,86,86,-54,-55,-56,-57,-59,-60,-62,-63,-64,-76,-75,-76,-76,-76,]),'LESS_EQUAL':([47,48,49,50,51,52,53,54,55,57,58,59,60,61,62,67,69,76,94,95,96,97,101,105,109,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,133,134,137,138,149,],[-76,-43,-46,-48,-50,87,-58,-61,-65,-69,-70,-71,-72,-73,-74,-76,-76,-76,-66,-67,-65,-76,-76,-76,-75,-44,-45,-47,-49,87,87,-54,-55,-56,-57,-59,-60,-62,-63,-64,-76,-75,-76,-76,-76,]),'GREATER_EQUAL':([47,48,49,50,51,52,53,54,55,57,58,59,60,61,62,67,69,76,94,95,96,97,101,105,109,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,133,134,137,138,149,],[-76,-43,-46,-48,-50,88,-58,-61,-65,-69,-70,-71,-72,-73,-74,-76,-76,-76,-66,-67,-65,-76,-76,-76,-75,-44,-45,-47,-49,88,88,-54,-55,-56,-57,-59,-60,-62,-63,-64,-76,-75,-76,-76,-76,]),'EQUALS':([47,48,49,50,51,52,53,54,55,57,58,59,60,61,62,67,69,76,94,95,96,97,101,105,109,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,133,134,137,138,149,],[-76,-43,-46,-48,83,-53,-58,-61,-65,-69,-70,-71,-72,-73,-74,-76,-76,-76,-66,-67,-65,-76,-76,-76,-75,-44,-45,-47,83,-51,-52,-54,-55,-56,-57,-59,-60,-62,-63,-64,-76,-75,-76,-76,-76,]),'DIFFERENT':([47,48,49,50,51,52,53,54,55,57,58,59,60,61,62,67,69,76,94,95,96,97,101,105,109,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,133,134,137,138,149,],[-76,-43,-46,-48,84,-53,-58,-61,-65,-69,-70,-71,-72,-73,-74,-76,-76,-76,-66,-67,-65,-76,-76,-76,-75,-44,-45,-47,84,-51,-52,-54,-55,-56,-57,-59,-60,-62,-63,-64,-76,-75,-76,-76,-76,]),'AND':([47,48,49,50,51,52,53,54,55,57,58,59,60,61,62,67,69,76,94,95,96,97,101,105,109,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,133,134,137,138,149,],[-76,-43,-46,82,-50,-53,-58,-61,-65,-69,-70,-71,-72,-73,-74,-76,-76,-76,-66,-67,-65,-76,-76,-76,-75,-44,-45,82,-49,-51,-52,-54,-55,-56,-57,-59,-60,-62,-63,-64,-76,-75,-76,-76,-76,]),'OR':([47,48,49,50,51,52,53,54,55,57,58,59,60,61,62,67,69,76,94,95,96,97,101,105,109,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,133,134,137,138,149,],[-76,-43,81,-48,-50,-53,-58,-61,-65,-69,-70,-71,-72,-73,-74,-76,-76,-76,-66,-67,-65,-76,-76,-76,-75,81,81,-47,-49,-51,-52,-54,-55,-56,-57,-59,-60,-62,-63,-64,-76,-75,-76,-76,-76,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programaGO':([0,],[1,]),'defpackage':([0,],[2,]),'defimport':([2,],[4,]),'funcdecls':([4,8,],[7,11,]),'funcdecl':([4,8,],[8,8,]),'signature':([12,],[13,]),'body':([13,33,47,67,109,110,144,149,],[15,66,78,103,135,136,150,152,]),'sigparams':([14,74,],[17,108,]),'stms':([16,45,],[20,75,]),'statement':([16,45,],[22,22,]),'statement1':([16,45,47,],[23,23,77,]),'declaration':([16,45,47,],[25,25,25,]),'for':([16,45,47,],[26,26,26,]),'callFunc':([16,45,47,],[27,27,27,]),'callFuncP':([16,45,47,],[28,28,28,]),'return':([16,45,47,],[29,29,29,]),'break':([16,45,47,],[30,30,30,]),'funcreturn':([18,36,],[38,72,]),'type':([18,19,36,37,63,],[39,43,39,73,98,]),'exp':([24,33,34,46,56,64,68,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,104,126,127,131,132,143,],[47,67,69,76,97,101,105,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,133,137,138,101,101,149,]),'exp1':([24,33,34,46,56,64,68,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,104,126,127,131,132,143,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'exp2':([24,33,34,46,56,64,68,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,104,126,127,131,132,143,],[49,49,49,49,49,49,49,111,112,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'exp3':([24,33,34,46,56,64,68,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,104,126,127,131,132,143,],[50,50,50,50,50,50,50,50,50,113,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'exp4':([24,33,34,46,56,64,68,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,104,126,127,131,132,143,],[51,51,51,51,51,51,51,51,51,51,114,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'exp5':([24,33,34,46,56,64,68,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,104,126,127,131,132,143,],[52,52,52,52,52,52,52,52,52,52,52,115,116,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'exp6':([24,33,34,46,56,64,68,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,104,126,127,131,132,143,],[53,53,53,53,53,53,53,53,53,53,53,53,53,117,118,119,120,53,53,53,53,53,53,53,53,53,53,53,]),'exp7':([24,33,34,46,56,64,68,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,104,126,127,131,132,143,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,121,122,54,54,54,54,54,54,54,54,54,]),'exp8':([24,33,34,46,56,64,68,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,104,126,127,131,132,143,],[55,55,55,55,96,55,55,55,55,55,55,55,55,55,55,55,55,55,55,123,124,125,55,55,55,55,55,55,]),'exp9':([24,33,34,46,56,64,68,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,104,126,127,131,132,143,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'params':([64,131,132,],[99,140,141,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programaGO","S'",1,None,None,None),
  ('programaGO -> defpackage defimport funcdecls','programaGO',3,'p_programaGO','parser.py',9),
  ('defpackage -> PACKAGE ID','defpackage',2,'p_defpackage','parser.py',13),
  ('defimport -> IMPORT ID','defimport',2,'p_defimport','parser.py',17),
  ('funcdecl -> FUNC ID signature body','funcdecl',4,'p_funcdecl','parser.py',21),
  ('funcdecls -> funcdecl','funcdecls',1,'p_funcdecls','parser.py',25),
  ('funcdecls -> funcdecl funcdecls','funcdecls',2,'p_funcdecls','parser.py',26),
  ('signature -> LPAREN sigparams RPAREN','signature',3,'p_signature','parser.py',30),
  ('signature -> LPAREN sigparams RPAREN funcreturn','signature',4,'p_signature','parser.py',31),
  ('signature -> LPAREN RPAREN','signature',2,'p_signature','parser.py',32),
  ('signature -> LPAREN RPAREN funcreturn','signature',3,'p_signature','parser.py',33),
  ('sigparams -> ID type','sigparams',2,'p_sigparams','parser.py',37),
  ('sigparams -> ID type COMMA sigparams','sigparams',4,'p_sigparams','parser.py',38),
  ('funcreturn -> type','funcreturn',1,'p_funcreturn','parser.py',42),
  ('funcreturn -> LPAREN type RPAREN','funcreturn',3,'p_funcreturn','parser.py',43),
  ('body -> LCHAVES stms RCHAVES','body',3,'p_body','parser.py',47),
  ('body -> LCHAVES RCHAVES','body',2,'p_body','parser.py',48),
  ('stms -> statement','stms',1,'p_stms','parser.py',52),
  ('stms -> statement NEWLINE stms','stms',3,'p_stms','parser.py',53),
  ('stms -> statement NEWLINE','stms',2,'p_stms','parser.py',54),
  ('statement -> statement1','statement',1,'p_statement','parser.py',58),
  ('statement1 -> IF LPAREN exp RPAREN body ELSE body','statement1',7,'p_statement1','parser.py',62),
  ('statement1 -> IF exp statement1 ELSE body','statement1',5,'p_statement1','parser.py',63),
  ('statement1 -> IF exp body','statement1',3,'p_statement1','parser.py',64),
  ('statement1 -> IF LPAREN exp RPAREN body','statement1',5,'p_statement1','parser.py',65),
  ('statement1 -> declaration','statement1',1,'p_statement1','parser.py',66),
  ('statement1 -> for','statement1',1,'p_statement1','parser.py',67),
  ('statement1 -> callFunc','statement1',1,'p_statement1','parser.py',68),
  ('statement1 -> callFuncP','statement1',1,'p_statement1','parser.py',69),
  ('statement1 -> return','statement1',1,'p_statement1','parser.py',70),
  ('statement1 -> break','statement1',1,'p_statement1','parser.py',71),
  ('for -> FOR body','for',2,'p_for','parser.py',75),
  ('for -> FOR exp body','for',3,'p_for','parser.py',76),
  ('for -> FOR exp SEMICOLON exp SEMICOLON exp body','for',7,'p_for','parser.py',77),
  ('declaration -> VAR ID type','declaration',3,'p_declaration','parser.py',81),
  ('declaration -> VAR ID type ASSIGN exp','declaration',5,'p_declaration','parser.py',82),
  ('declaration -> VAR ID type COLONEQ exp','declaration',5,'p_declaration','parser.py',83),
  ('declaration -> VAR ID type SEMICOLON','declaration',4,'p_declaration','parser.py',84),
  ('declaration -> VAR ID type ASSIGN exp SEMICOLON','declaration',6,'p_declaration','parser.py',85),
  ('declaration -> VAR ID type COLONEQ exp SEMICOLON','declaration',6,'p_declaration','parser.py',86),
  ('type -> INT','type',1,'p_type','parser.py',90),
  ('type -> STRING','type',1,'p_type','parser.py',91),
  ('type -> BOOL','type',1,'p_type','parser.py',92),
  ('exp -> exp1','exp',1,'p_exp_exp1','parser.py',96),
  ('exp1 -> exp1 ASSIGN exp2','exp1',3,'p_exp1','parser.py',111),
  ('exp1 -> exp1 COLONEQ exp2','exp1',3,'p_exp1','parser.py',112),
  ('exp1 -> exp2','exp1',1,'p_exp1','parser.py',113),
  ('exp2 -> exp2 OR exp3','exp2',3,'p_exp2','parser.py',117),
  ('exp2 -> exp3','exp2',1,'p_exp2','parser.py',118),
  ('exp3 -> exp3 AND exp4','exp3',3,'p_exp3','parser.py',122),
  ('exp3 -> exp4','exp3',1,'p_exp3','parser.py',123),
  ('exp4 -> exp4 EQUALS exp5','exp4',3,'p_exp4','parser.py',127),
  ('exp4 -> exp4 DIFFERENT exp5','exp4',3,'p_exp4','parser.py',128),
  ('exp4 -> exp5','exp4',1,'p_exp4','parser.py',129),
  ('exp5 -> exp5 LESS exp6','exp5',3,'p_exp5','parser.py',133),
  ('exp5 -> exp5 GREATER exp6','exp5',3,'p_exp5','parser.py',134),
  ('exp5 -> exp5 LESS_EQUAL exp6','exp5',3,'p_exp5','parser.py',135),
  ('exp5 -> exp5 GREATER_EQUAL exp6','exp5',3,'p_exp5','parser.py',136),
  ('exp5 -> exp6','exp5',1,'p_exp5','parser.py',137),
  ('exp6 -> exp6 PLUS exp7','exp6',3,'p_exp6','parser.py',141),
  ('exp6 -> exp6 MINUS exp7','exp6',3,'p_exp6','parser.py',142),
  ('exp6 -> exp7','exp6',1,'p_exp6','parser.py',143),
  ('exp7 -> exp7 TIMES exp8','exp7',3,'p_exp7','parser.py',147),
  ('exp7 -> exp7 DIVIDE exp8','exp7',3,'p_exp7','parser.py',148),
  ('exp7 -> exp7 MOD exp8','exp7',3,'p_exp7','parser.py',149),
  ('exp7 -> exp8','exp7',1,'p_exp7','parser.py',150),
  ('exp8 -> exp8 DPLUS','exp8',2,'p_exp8','parser.py',154),
  ('exp8 -> exp8 DMINUS','exp8',2,'p_exp8','parser.py',155),
  ('exp8 -> NOT exp8','exp8',2,'p_exp8','parser.py',156),
  ('exp8 -> exp9','exp8',1,'p_exp8','parser.py',157),
  ('exp9 -> NUMBER','exp9',1,'p_exp9','parser.py',161),
  ('exp9 -> STRING','exp9',1,'p_exp9','parser.py',162),
  ('exp9 -> ID','exp9',1,'p_exp9','parser.py',163),
  ('exp9 -> TRUE','exp9',1,'p_exp9','parser.py',164),
  ('exp9 -> FALSE','exp9',1,'p_exp9','parser.py',165),
  ('exp9 -> LPAREN exp RPAREN','exp9',3,'p_exp9','parser.py',166),
  ('exp9 -> exp','exp9',1,'p_exp9','parser.py',167),
  ('return -> RETURN exp','return',2,'p_return','parser.py',171),
  ('return -> RETURN','return',1,'p_return','parser.py',172),
  ('return -> RETURN exp SEMICOLON','return',3,'p_return','parser.py',173),
  ('return -> RETURN SEMICOLON','return',2,'p_return','parser.py',174),
  ('break -> BREAK','break',1,'p_break','parser.py',178),
  ('break -> BREAK SEMICOLON','break',2,'p_break','parser.py',179),
  ('callFunc -> ID LPAREN params RPAREN','callFunc',4,'p_callFunc','parser.py',183),
  ('callFunc -> ID LPAREN RPAREN','callFunc',3,'p_callFunc','parser.py',184),
  ('callFunc -> ID LPAREN params RPAREN SEMICOLON','callFunc',5,'p_callFunc','parser.py',185),
  ('callFunc -> ID LPAREN RPAREN SEMICOLON','callFunc',4,'p_callFunc','parser.py',186),
  ('callFuncP -> ID DOT ID LPAREN params RPAREN','callFuncP',6,'p_callFuncP','parser.py',190),
  ('callFuncP -> ID DOT ID LPAREN RPAREN','callFuncP',5,'p_callFuncP','parser.py',191),
  ('callFuncP -> ID DOT ID LPAREN params RPAREN SEMICOLON','callFuncP',7,'p_callFuncP','parser.py',192),
  ('callFuncP -> ID DOT ID LPAREN RPAREN SEMICOLON','callFuncP',6,'p_callFuncP','parser.py',193),
  ('params -> exp COMMA params','params',3,'p_params','parser.py',196),
  ('params -> exp','params',1,'p_params','parser.py',197),
]
