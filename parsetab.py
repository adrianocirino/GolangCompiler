
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGN BOOL BREAK COLONEQ COMMA DIFFERENT DIVIDE DMINUS DOT DPLUS ELSE EQUALS FALSE FOR FUNC GREATER GREATER_EQUAL ID IF IMPORT INT LCHAVES LESS LESS_EQUAL LPAREN MINUS MOD NEWLINE NOT NUMBER OR PACKAGE PLUS RCHAVES RETURN RPAREN SEMICOLON STRING TIMES TRUE VARprogramaGO : defpackage defimport funcdeclsdefpackage : PACKAGE IDdefimport : IMPORT STRINGfuncdecl : FUNC ID signature bodyfuncdecls : funcdecl\n                 | funcdecl funcdeclssignature : LPAREN sigparams RPAREN \n               | LPAREN sigparams RPAREN funcreturn \n               | LPAREN RPAREN\n               | LPAREN RPAREN funcreturn sigparams : ID type\n               | ID type COMMA sigparamsfuncreturn : type\n                | LPAREN type RPARENbody : LCHAVES stms RCHAVES\n          | LCHAVES RCHAVESstms : statement \n            | statement stms\n            | statement NEWLINE stms\n            | statement NEWLINEstatement : statement1statement1 : IF exp body ELSE body\n                | IF exp body\n                | declaration\n                | for\n                | callFunc\n                | callFuncPS\n                | return\n                | breakfor : FOR body\n         | FOR exp body\n         | FOR exp SEMICOLON exp SEMICOLON exp bodydeclaration : VAR ID type \n                   | VAR ID type ASSIGN exp\n                   | VAR ID type COLONEQ exp\n                   | VAR ID type SEMICOLON\n                   | VAR ID type ASSIGN exp SEMICOLON\n                   | VAR ID type COLONEQ exp SEMICOLONtype : INT\n            | STRING\n            | BOOLexp : exp1 exp1 : exp1 ASSIGN exp2\n             | exp1 COLONEQ exp2\n             | exp2exp2 : exp2 OR exp3\n            | exp3exp3 : exp3 AND exp4\n            | exp4exp4 : exp4 EQUALS exp5\n          | exp4 DIFFERENT exp5\n          | exp5exp5 : exp5 LESS exp6\n          | exp5 GREATER exp6\n          | exp5 LESS_EQUAL exp6\n          | exp5 GREATER_EQUAL exp6\n          | exp6exp6 : exp6 PLUS exp7\n          | exp6 MINUS exp7\n          | exp7exp7 : exp7 TIMES exp8\n          | exp7 DIVIDE exp8\n          | exp7 MOD exp8\n          | exp8exp8 : exp8 DPLUS\n          | exp8 DMINUS\n          | exp9exp9 : NOT exp9\n          | NUMBER\n          | STRING\n          | ID \n          | TRUE\n          | FALSE\n          | LPAREN exp RPARENreturn : RETURN exp\n              | RETURN\n              | RETURN exp SEMICOLON\n              | RETURN SEMICOLONbreak : BREAK\n             | BREAK SEMICOLONcallFunc : ID LPAREN params RPAREN\n                | ID LPAREN RPAREN\n                | ID LPAREN params RPAREN SEMICOLON\n                | ID LPAREN RPAREN SEMICOLONcallFuncPS : ID DOT ID LPAREN params RPAREN\n                  | ID DOT ID LPAREN RPAREN\n                  | ID DOT ID LPAREN params RPAREN SEMICOLON\n                  | ID DOT ID LPAREN RPAREN SEMICOLONparams : exp COMMA params\n              | exp'
    
_lr_action_items = {'PACKAGE':([0,],[3,]),'$end':([1,7,8,11,15,21,44,],[0,-1,-5,-6,-4,-16,-15,]),'IMPORT':([2,6,],[5,-2,]),'ID':([3,9,14,16,21,22,23,24,25,26,27,28,29,30,31,33,34,35,40,41,42,44,46,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,65,66,67,69,70,71,74,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,96,98,101,102,103,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,131,132,133,134,137,138,139,140,141,142,144,145,],[6,12,19,32,-16,32,-21,60,-24,-25,-26,-27,-28,-29,64,60,60,-79,-39,-40,-41,-15,32,-42,-45,-47,-49,-52,-57,-60,-64,-67,60,-69,-70,-71,-72,-73,60,60,100,-30,-75,-78,-80,19,-23,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,-65,-66,-68,-33,-82,-31,60,-77,-43,-44,-46,-48,-50,-51,-53,-54,-55,-56,-58,-59,-61,-62,-63,-74,60,60,-36,-81,-84,60,60,-22,-34,-35,-83,-86,60,-37,-38,-85,-88,-87,-32,]),'FUNC':([4,8,10,15,21,44,],[9,9,-3,-4,-16,-15,]),'STRING':([5,18,19,24,33,34,36,37,57,63,64,65,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,102,123,124,128,129,138,],[10,41,41,59,59,59,41,41,59,59,41,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'LPAREN':([12,18,24,32,33,34,36,57,63,65,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,100,102,123,124,128,129,138,],[14,37,63,65,63,63,37,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,129,63,63,63,63,63,63,]),'LCHAVES':([13,18,33,36,38,39,40,41,42,47,48,49,50,51,52,53,54,55,56,58,59,60,61,62,68,72,92,93,94,104,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,143,],[16,-9,16,-7,-10,-13,-39,-40,-41,16,-42,-45,-47,-49,-52,-57,-60,-64,-67,-69,-70,-71,-72,-73,16,-8,-65,-66,-68,-14,16,-43,-44,-46,-48,-50,-51,-53,-54,-55,-56,-58,-59,-61,-62,-63,-74,16,]),'RPAREN':([14,17,40,41,42,43,48,49,50,51,52,53,54,55,56,58,59,60,61,62,65,73,92,93,94,95,97,99,105,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,129,135,136,],[18,36,-39,-40,-41,-11,-42,-45,-47,-49,-52,-57,-60,-64,-67,-69,-70,-71,-72,-73,98,104,-65,-66,-68,122,126,-90,-12,-43,-44,-46,-48,-50,-51,-53,-54,-55,-56,-58,-59,-61,-62,-63,-74,137,-89,141,]),'RCHAVES':([16,20,21,22,23,25,26,27,28,29,30,34,35,40,41,42,44,45,46,48,49,50,51,52,53,54,55,56,58,59,60,61,62,67,69,70,71,75,76,92,93,94,96,98,101,103,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,125,126,127,131,132,133,134,137,139,140,141,142,144,145,],[21,44,-16,-17,-21,-24,-25,-26,-27,-28,-29,-76,-79,-39,-40,-41,-15,-18,-20,-42,-45,-47,-49,-52,-57,-60,-64,-67,-69,-70,-71,-72,-73,-30,-75,-78,-80,-19,-23,-65,-66,-68,-33,-82,-31,-77,-43,-44,-46,-48,-50,-51,-53,-54,-55,-56,-58,-59,-61,-62,-63,-74,-36,-81,-84,-22,-34,-35,-83,-86,-37,-38,-85,-88,-87,-32,]),'IF':([16,21,22,23,25,26,27,28,29,30,34,35,40,41,42,44,46,48,49,50,51,52,53,54,55,56,58,59,60,61,62,67,69,70,71,76,92,93,94,96,98,101,103,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,125,126,127,131,132,133,134,137,139,140,141,142,144,145,],[24,-16,24,-21,-24,-25,-26,-27,-28,-29,-76,-79,-39,-40,-41,-15,24,-42,-45,-47,-49,-52,-57,-60,-64,-67,-69,-70,-71,-72,-73,-30,-75,-78,-80,-23,-65,-66,-68,-33,-82,-31,-77,-43,-44,-46,-48,-50,-51,-53,-54,-55,-56,-58,-59,-61,-62,-63,-74,-36,-81,-84,-22,-34,-35,-83,-86,-37,-38,-85,-88,-87,-32,]),'VAR':([16,21,22,23,25,26,27,28,29,30,34,35,40,41,42,44,46,48,49,50,51,52,53,54,55,56,58,59,60,61,62,67,69,70,71,76,92,93,94,96,98,101,103,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,125,126,127,131,132,133,134,137,139,140,141,142,144,145,],[31,-16,31,-21,-24,-25,-26,-27,-28,-29,-76,-79,-39,-40,-41,-15,31,-42,-45,-47,-49,-52,-57,-60,-64,-67,-69,-70,-71,-72,-73,-30,-75,-78,-80,-23,-65,-66,-68,-33,-82,-31,-77,-43,-44,-46,-48,-50,-51,-53,-54,-55,-56,-58,-59,-61,-62,-63,-74,-36,-81,-84,-22,-34,-35,-83,-86,-37,-38,-85,-88,-87,-32,]),'FOR':([16,21,22,23,25,26,27,28,29,30,34,35,40,41,42,44,46,48,49,50,51,52,53,54,55,56,58,59,60,61,62,67,69,70,71,76,92,93,94,96,98,101,103,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,125,126,127,131,132,133,134,137,139,140,141,142,144,145,],[33,-16,33,-21,-24,-25,-26,-27,-28,-29,-76,-79,-39,-40,-41,-15,33,-42,-45,-47,-49,-52,-57,-60,-64,-67,-69,-70,-71,-72,-73,-30,-75,-78,-80,-23,-65,-66,-68,-33,-82,-31,-77,-43,-44,-46,-48,-50,-51,-53,-54,-55,-56,-58,-59,-61,-62,-63,-74,-36,-81,-84,-22,-34,-35,-83,-86,-37,-38,-85,-88,-87,-32,]),'RETURN':([16,21,22,23,25,26,27,28,29,30,34,35,40,41,42,44,46,48,49,50,51,52,53,54,55,56,58,59,60,61,62,67,69,70,71,76,92,93,94,96,98,101,103,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,125,126,127,131,132,133,134,137,139,140,141,142,144,145,],[34,-16,34,-21,-24,-25,-26,-27,-28,-29,-76,-79,-39,-40,-41,-15,34,-42,-45,-47,-49,-52,-57,-60,-64,-67,-69,-70,-71,-72,-73,-30,-75,-78,-80,-23,-65,-66,-68,-33,-82,-31,-77,-43,-44,-46,-48,-50,-51,-53,-54,-55,-56,-58,-59,-61,-62,-63,-74,-36,-81,-84,-22,-34,-35,-83,-86,-37,-38,-85,-88,-87,-32,]),'BREAK':([16,21,22,23,25,26,27,28,29,30,34,35,40,41,42,44,46,48,49,50,51,52,53,54,55,56,58,59,60,61,62,67,69,70,71,76,92,93,94,96,98,101,103,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,125,126,127,131,132,133,134,137,139,140,141,142,144,145,],[35,-16,35,-21,-24,-25,-26,-27,-28,-29,-76,-79,-39,-40,-41,-15,35,-42,-45,-47,-49,-52,-57,-60,-64,-67,-69,-70,-71,-72,-73,-30,-75,-78,-80,-23,-65,-66,-68,-33,-82,-31,-77,-43,-44,-46,-48,-50,-51,-53,-54,-55,-56,-58,-59,-61,-62,-63,-74,-36,-81,-84,-22,-34,-35,-83,-86,-37,-38,-85,-88,-87,-32,]),'INT':([18,19,36,37,64,],[40,40,40,40,40,]),'BOOL':([18,19,36,37,64,],[42,42,42,42,42,]),'NEWLINE':([21,22,23,25,26,27,28,29,30,34,35,40,41,42,44,48,49,50,51,52,53,54,55,56,58,59,60,61,62,67,69,70,71,76,92,93,94,96,98,101,103,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,125,126,127,131,132,133,134,137,139,140,141,142,144,145,],[-16,46,-21,-24,-25,-26,-27,-28,-29,-76,-79,-39,-40,-41,-15,-42,-45,-47,-49,-52,-57,-60,-64,-67,-69,-70,-71,-72,-73,-30,-75,-78,-80,-23,-65,-66,-68,-33,-82,-31,-77,-43,-44,-46,-48,-50,-51,-53,-54,-55,-56,-58,-59,-61,-62,-63,-74,-36,-81,-84,-22,-34,-35,-83,-86,-37,-38,-85,-88,-87,-32,]),'ELSE':([21,44,76,],[-16,-15,106,]),'NOT':([24,33,34,57,63,65,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,102,123,124,128,129,138,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'NUMBER':([24,33,34,57,63,65,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,102,123,124,128,129,138,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'TRUE':([24,33,34,57,63,65,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,102,123,124,128,129,138,],[61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'FALSE':([24,33,34,57,63,65,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,102,123,124,128,129,138,],[62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'DOT':([32,],[66,]),'SEMICOLON':([34,35,40,41,42,48,49,50,51,52,53,54,55,56,58,59,60,61,62,68,69,92,93,94,96,98,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,126,130,132,133,137,141,],[70,71,-39,-40,-41,-42,-45,-47,-49,-52,-57,-60,-64,-67,-69,-70,-71,-72,-73,102,103,-65,-66,-68,125,127,-43,-44,-46,-48,-50,-51,-53,-54,-55,-56,-58,-59,-61,-62,-63,-74,134,138,139,140,142,144,]),'COMMA':([40,41,42,43,48,49,50,51,52,53,54,55,56,58,59,60,61,62,92,93,94,99,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,],[-39,-40,-41,74,-42,-45,-47,-49,-52,-57,-60,-64,-67,-69,-70,-71,-72,-73,-65,-66,-68,128,-43,-44,-46,-48,-50,-51,-53,-54,-55,-56,-58,-59,-61,-62,-63,-74,]),'ASSIGN':([40,41,42,48,49,50,51,52,53,54,55,56,58,59,60,61,62,92,93,94,96,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,],[-39,-40,-41,77,-45,-47,-49,-52,-57,-60,-64,-67,-69,-70,-71,-72,-73,-65,-66,-68,123,-43,-44,-46,-48,-50,-51,-53,-54,-55,-56,-58,-59,-61,-62,-63,-74,]),'COLONEQ':([40,41,42,48,49,50,51,52,53,54,55,56,58,59,60,61,62,92,93,94,96,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,],[-39,-40,-41,78,-45,-47,-49,-52,-57,-60,-64,-67,-69,-70,-71,-72,-73,-65,-66,-68,124,-43,-44,-46,-48,-50,-51,-53,-54,-55,-56,-58,-59,-61,-62,-63,-74,]),'OR':([49,50,51,52,53,54,55,56,58,59,60,61,62,92,93,94,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,],[79,-47,-49,-52,-57,-60,-64,-67,-69,-70,-71,-72,-73,-65,-66,-68,79,79,-46,-48,-50,-51,-53,-54,-55,-56,-58,-59,-61,-62,-63,-74,]),'AND':([50,51,52,53,54,55,56,58,59,60,61,62,92,93,94,109,110,111,112,113,114,115,116,117,118,119,120,121,122,],[80,-49,-52,-57,-60,-64,-67,-69,-70,-71,-72,-73,-65,-66,-68,80,-48,-50,-51,-53,-54,-55,-56,-58,-59,-61,-62,-63,-74,]),'EQUALS':([51,52,53,54,55,56,58,59,60,61,62,92,93,94,110,111,112,113,114,115,116,117,118,119,120,121,122,],[81,-52,-57,-60,-64,-67,-69,-70,-71,-72,-73,-65,-66,-68,81,-50,-51,-53,-54,-55,-56,-58,-59,-61,-62,-63,-74,]),'DIFFERENT':([51,52,53,54,55,56,58,59,60,61,62,92,93,94,110,111,112,113,114,115,116,117,118,119,120,121,122,],[82,-52,-57,-60,-64,-67,-69,-70,-71,-72,-73,-65,-66,-68,82,-50,-51,-53,-54,-55,-56,-58,-59,-61,-62,-63,-74,]),'LESS':([52,53,54,55,56,58,59,60,61,62,92,93,94,111,112,113,114,115,116,117,118,119,120,121,122,],[83,-57,-60,-64,-67,-69,-70,-71,-72,-73,-65,-66,-68,83,83,-53,-54,-55,-56,-58,-59,-61,-62,-63,-74,]),'GREATER':([52,53,54,55,56,58,59,60,61,62,92,93,94,111,112,113,114,115,116,117,118,119,120,121,122,],[84,-57,-60,-64,-67,-69,-70,-71,-72,-73,-65,-66,-68,84,84,-53,-54,-55,-56,-58,-59,-61,-62,-63,-74,]),'LESS_EQUAL':([52,53,54,55,56,58,59,60,61,62,92,93,94,111,112,113,114,115,116,117,118,119,120,121,122,],[85,-57,-60,-64,-67,-69,-70,-71,-72,-73,-65,-66,-68,85,85,-53,-54,-55,-56,-58,-59,-61,-62,-63,-74,]),'GREATER_EQUAL':([52,53,54,55,56,58,59,60,61,62,92,93,94,111,112,113,114,115,116,117,118,119,120,121,122,],[86,-57,-60,-64,-67,-69,-70,-71,-72,-73,-65,-66,-68,86,86,-53,-54,-55,-56,-58,-59,-61,-62,-63,-74,]),'PLUS':([53,54,55,56,58,59,60,61,62,92,93,94,113,114,115,116,117,118,119,120,121,122,],[87,-60,-64,-67,-69,-70,-71,-72,-73,-65,-66,-68,87,87,87,87,-58,-59,-61,-62,-63,-74,]),'MINUS':([53,54,55,56,58,59,60,61,62,92,93,94,113,114,115,116,117,118,119,120,121,122,],[88,-60,-64,-67,-69,-70,-71,-72,-73,-65,-66,-68,88,88,88,88,-58,-59,-61,-62,-63,-74,]),'TIMES':([54,55,56,58,59,60,61,62,92,93,94,117,118,119,120,121,122,],[89,-64,-67,-69,-70,-71,-72,-73,-65,-66,-68,89,89,-61,-62,-63,-74,]),'DIVIDE':([54,55,56,58,59,60,61,62,92,93,94,117,118,119,120,121,122,],[90,-64,-67,-69,-70,-71,-72,-73,-65,-66,-68,90,90,-61,-62,-63,-74,]),'MOD':([54,55,56,58,59,60,61,62,92,93,94,117,118,119,120,121,122,],[91,-64,-67,-69,-70,-71,-72,-73,-65,-66,-68,91,91,-61,-62,-63,-74,]),'DPLUS':([55,56,58,59,60,61,62,92,93,94,119,120,121,122,],[92,-67,-69,-70,-71,-72,-73,-65,-66,-68,92,92,92,-74,]),'DMINUS':([55,56,58,59,60,61,62,92,93,94,119,120,121,122,],[93,-67,-69,-70,-71,-72,-73,-65,-66,-68,93,93,93,-74,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programaGO':([0,],[1,]),'defpackage':([0,],[2,]),'defimport':([2,],[4,]),'funcdecls':([4,8,],[7,11,]),'funcdecl':([4,8,],[8,8,]),'signature':([12,],[13,]),'body':([13,33,47,68,106,143,],[15,67,76,101,131,145,]),'sigparams':([14,74,],[17,105,]),'stms':([16,22,46,],[20,45,75,]),'statement':([16,22,46,],[22,22,22,]),'statement1':([16,22,46,],[23,23,23,]),'declaration':([16,22,46,],[25,25,25,]),'for':([16,22,46,],[26,26,26,]),'callFunc':([16,22,46,],[27,27,27,]),'callFuncPS':([16,22,46,],[28,28,28,]),'return':([16,22,46,],[29,29,29,]),'break':([16,22,46,],[30,30,30,]),'funcreturn':([18,36,],[38,72,]),'type':([18,19,36,37,64,],[39,43,39,73,96,]),'exp':([24,33,34,63,65,102,123,124,128,129,138,],[47,68,69,95,99,130,132,133,99,99,143,]),'exp1':([24,33,34,63,65,102,123,124,128,129,138,],[48,48,48,48,48,48,48,48,48,48,48,]),'exp2':([24,33,34,63,65,77,78,102,123,124,128,129,138,],[49,49,49,49,49,107,108,49,49,49,49,49,49,]),'exp3':([24,33,34,63,65,77,78,79,102,123,124,128,129,138,],[50,50,50,50,50,50,50,109,50,50,50,50,50,50,]),'exp4':([24,33,34,63,65,77,78,79,80,102,123,124,128,129,138,],[51,51,51,51,51,51,51,51,110,51,51,51,51,51,51,]),'exp5':([24,33,34,63,65,77,78,79,80,81,82,102,123,124,128,129,138,],[52,52,52,52,52,52,52,52,52,111,112,52,52,52,52,52,52,]),'exp6':([24,33,34,63,65,77,78,79,80,81,82,83,84,85,86,102,123,124,128,129,138,],[53,53,53,53,53,53,53,53,53,53,53,113,114,115,116,53,53,53,53,53,53,]),'exp7':([24,33,34,63,65,77,78,79,80,81,82,83,84,85,86,87,88,102,123,124,128,129,138,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,117,118,54,54,54,54,54,54,]),'exp8':([24,33,34,63,65,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,102,123,124,128,129,138,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,119,120,121,55,55,55,55,55,55,]),'exp9':([24,33,34,57,63,65,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,102,123,124,128,129,138,],[56,56,56,94,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'params':([65,128,129,],[97,135,136,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programaGO","S'",1,None,None,None),
  ('programaGO -> defpackage defimport funcdecls','programaGO',3,'p_programaGO','parser.py',10),
  ('defpackage -> PACKAGE ID','defpackage',2,'p_defpackage','parser.py',14),
  ('defimport -> IMPORT STRING','defimport',2,'p_defimport','parser.py',18),
  ('funcdecl -> FUNC ID signature body','funcdecl',4,'p_funcdecl','parser.py',22),
  ('funcdecls -> funcdecl','funcdecls',1,'p_funcdecls','parser.py',26),
  ('funcdecls -> funcdecl funcdecls','funcdecls',2,'p_funcdecls','parser.py',27),
  ('signature -> LPAREN sigparams RPAREN','signature',3,'p_signature','parser.py',31),
  ('signature -> LPAREN sigparams RPAREN funcreturn','signature',4,'p_signature','parser.py',32),
  ('signature -> LPAREN RPAREN','signature',2,'p_signature','parser.py',33),
  ('signature -> LPAREN RPAREN funcreturn','signature',3,'p_signature','parser.py',34),
  ('sigparams -> ID type','sigparams',2,'p_sigparams','parser.py',38),
  ('sigparams -> ID type COMMA sigparams','sigparams',4,'p_sigparams','parser.py',39),
  ('funcreturn -> type','funcreturn',1,'p_funcreturn','parser.py',43),
  ('funcreturn -> LPAREN type RPAREN','funcreturn',3,'p_funcreturn','parser.py',44),
  ('body -> LCHAVES stms RCHAVES','body',3,'p_body','parser.py',48),
  ('body -> LCHAVES RCHAVES','body',2,'p_body','parser.py',49),
  ('stms -> statement','stms',1,'p_stms','parser.py',53),
  ('stms -> statement stms','stms',2,'p_stms','parser.py',54),
  ('stms -> statement NEWLINE stms','stms',3,'p_stms','parser.py',55),
  ('stms -> statement NEWLINE','stms',2,'p_stms','parser.py',56),
  ('statement -> statement1','statement',1,'p_statement','parser.py',60),
  ('statement1 -> IF exp body ELSE body','statement1',5,'p_statement1','parser.py',65),
  ('statement1 -> IF exp body','statement1',3,'p_statement1','parser.py',66),
  ('statement1 -> declaration','statement1',1,'p_statement1','parser.py',67),
  ('statement1 -> for','statement1',1,'p_statement1','parser.py',68),
  ('statement1 -> callFunc','statement1',1,'p_statement1','parser.py',69),
  ('statement1 -> callFuncPS','statement1',1,'p_statement1','parser.py',70),
  ('statement1 -> return','statement1',1,'p_statement1','parser.py',71),
  ('statement1 -> break','statement1',1,'p_statement1','parser.py',72),
  ('for -> FOR body','for',2,'p_for','parser.py',76),
  ('for -> FOR exp body','for',3,'p_for','parser.py',77),
  ('for -> FOR exp SEMICOLON exp SEMICOLON exp body','for',7,'p_for','parser.py',78),
  ('declaration -> VAR ID type','declaration',3,'p_declaration','parser.py',82),
  ('declaration -> VAR ID type ASSIGN exp','declaration',5,'p_declaration','parser.py',83),
  ('declaration -> VAR ID type COLONEQ exp','declaration',5,'p_declaration','parser.py',84),
  ('declaration -> VAR ID type SEMICOLON','declaration',4,'p_declaration','parser.py',85),
  ('declaration -> VAR ID type ASSIGN exp SEMICOLON','declaration',6,'p_declaration','parser.py',86),
  ('declaration -> VAR ID type COLONEQ exp SEMICOLON','declaration',6,'p_declaration','parser.py',87),
  ('type -> INT','type',1,'p_type','parser.py',91),
  ('type -> STRING','type',1,'p_type','parser.py',92),
  ('type -> BOOL','type',1,'p_type','parser.py',93),
  ('exp -> exp1','exp',1,'p_exp_exp1','parser.py',97),
  ('exp1 -> exp1 ASSIGN exp2','exp1',3,'p_exp1','parser.py',112),
  ('exp1 -> exp1 COLONEQ exp2','exp1',3,'p_exp1','parser.py',113),
  ('exp1 -> exp2','exp1',1,'p_exp1','parser.py',114),
  ('exp2 -> exp2 OR exp3','exp2',3,'p_exp2','parser.py',118),
  ('exp2 -> exp3','exp2',1,'p_exp2','parser.py',119),
  ('exp3 -> exp3 AND exp4','exp3',3,'p_exp3','parser.py',123),
  ('exp3 -> exp4','exp3',1,'p_exp3','parser.py',124),
  ('exp4 -> exp4 EQUALS exp5','exp4',3,'p_exp4','parser.py',128),
  ('exp4 -> exp4 DIFFERENT exp5','exp4',3,'p_exp4','parser.py',129),
  ('exp4 -> exp5','exp4',1,'p_exp4','parser.py',130),
  ('exp5 -> exp5 LESS exp6','exp5',3,'p_exp5','parser.py',134),
  ('exp5 -> exp5 GREATER exp6','exp5',3,'p_exp5','parser.py',135),
  ('exp5 -> exp5 LESS_EQUAL exp6','exp5',3,'p_exp5','parser.py',136),
  ('exp5 -> exp5 GREATER_EQUAL exp6','exp5',3,'p_exp5','parser.py',137),
  ('exp5 -> exp6','exp5',1,'p_exp5','parser.py',138),
  ('exp6 -> exp6 PLUS exp7','exp6',3,'p_exp6','parser.py',142),
  ('exp6 -> exp6 MINUS exp7','exp6',3,'p_exp6','parser.py',143),
  ('exp6 -> exp7','exp6',1,'p_exp6','parser.py',144),
  ('exp7 -> exp7 TIMES exp8','exp7',3,'p_exp7','parser.py',148),
  ('exp7 -> exp7 DIVIDE exp8','exp7',3,'p_exp7','parser.py',149),
  ('exp7 -> exp7 MOD exp8','exp7',3,'p_exp7','parser.py',150),
  ('exp7 -> exp8','exp7',1,'p_exp7','parser.py',151),
  ('exp8 -> exp8 DPLUS','exp8',2,'p_exp8','parser.py',155),
  ('exp8 -> exp8 DMINUS','exp8',2,'p_exp8','parser.py',156),
  ('exp8 -> exp9','exp8',1,'p_exp8','parser.py',157),
  ('exp9 -> NOT exp9','exp9',2,'p_exp9','parser.py',161),
  ('exp9 -> NUMBER','exp9',1,'p_exp9','parser.py',162),
  ('exp9 -> STRING','exp9',1,'p_exp9','parser.py',163),
  ('exp9 -> ID','exp9',1,'p_exp9','parser.py',164),
  ('exp9 -> TRUE','exp9',1,'p_exp9','parser.py',165),
  ('exp9 -> FALSE','exp9',1,'p_exp9','parser.py',166),
  ('exp9 -> LPAREN exp RPAREN','exp9',3,'p_exp9','parser.py',167),
  ('return -> RETURN exp','return',2,'p_return','parser.py',171),
  ('return -> RETURN','return',1,'p_return','parser.py',172),
  ('return -> RETURN exp SEMICOLON','return',3,'p_return','parser.py',173),
  ('return -> RETURN SEMICOLON','return',2,'p_return','parser.py',174),
  ('break -> BREAK','break',1,'p_break','parser.py',178),
  ('break -> BREAK SEMICOLON','break',2,'p_break','parser.py',179),
  ('callFunc -> ID LPAREN params RPAREN','callFunc',4,'p_callFunc','parser.py',183),
  ('callFunc -> ID LPAREN RPAREN','callFunc',3,'p_callFunc','parser.py',184),
  ('callFunc -> ID LPAREN params RPAREN SEMICOLON','callFunc',5,'p_callFunc','parser.py',185),
  ('callFunc -> ID LPAREN RPAREN SEMICOLON','callFunc',4,'p_callFunc','parser.py',186),
  ('callFuncPS -> ID DOT ID LPAREN params RPAREN','callFuncPS',6,'p_callFuncPS','parser.py',190),
  ('callFuncPS -> ID DOT ID LPAREN RPAREN','callFuncPS',5,'p_callFuncPS','parser.py',191),
  ('callFuncPS -> ID DOT ID LPAREN params RPAREN SEMICOLON','callFuncPS',7,'p_callFuncPS','parser.py',192),
  ('callFuncPS -> ID DOT ID LPAREN RPAREN SEMICOLON','callFuncPS',6,'p_callFuncPS','parser.py',193),
  ('params -> exp COMMA params','params',3,'p_params','parser.py',196),
  ('params -> exp','params',1,'p_params','parser.py',197),
]
