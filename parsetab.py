
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGN BOOL COLONEQ COMMA DIFFERENT DIVIDE DMINUS DPLUS ELSE EQUALS FALSE FOR FUNC GREATER GREATER_EQUAL ID IF IMPORT INT LCHAVES LESS LESS_EQUAL LPAREN MINUS MOD NOT NUMBER OR PACKAGE PLUS RANGE RCHAVES RETURN RPAREN SEMICOLON STRING TIMES TRUE TYPE VARprogramaGO : defpackage defimport funcdeclsdefpackage : PACKAGE IDdefimport : IMPORT IDfuncdecl : FUNC ID signature bodyfuncdecls : funcdecl\n                 | funcdecl funcdeclssignature : LPAREN sigparams RPAREN \n               | LPAREN sigparams RPAREN funcreturn \n               | LPAREN RPAREN\n               | LPAREN RPAREN funcreturn sigparams : ID type\n               | ID type COMMA sigparamsfuncreturn : type\n                | LPAREN type RPAREN body : LCHAVES stms RCHAVES\n          | LCHAVES RCHAVESstms : statement \n            | statement stmsstatement : statement1\n                 | statement2statement1 : IF LPAREN exp RPAREN statement1 ELSE statement1\n                | IF exp statement1 ELSE statement1\n                | declaration\n                | for\n                | statement1\n                | statement2\n                | returnstatement2 : IF LPAREN exp RPAREN statement \n                | IF exp statement \n                | IF exp statement1 ELSE statement2\n                | IF LPAREN exp RPAREN statement1 ELSE statement2for : FOR\n         | FOR exp \n         | FOR exp SEMICOLON exp SEMICOLON exp\n         | FOR RANGE exp \n         | FOR exp COMMA exp ASSIGN RANGE expdeclaration : ID type\n                   | ID type ASSIGN exp\n                   | ID type COLONEQ exptype : INT\n            | STRING\n            | VAR\n            | BOOLexp : exp1exp1 : NUMBER\n          | STRING\n          | ID \n          | TRUE\n          | FALSE\n          | LPAREN exp RPAREN\n          | exp2exp2 : exp2 DPLUS\n          | exp2 DMINUS\n          | NOT exp2\n          | exp3exp3 : exp3 TIMES exp4\n          | exp3 DIVIDE exp4\n          | exp3 MOD exp4\n          | exp4exp4 : exp4 PLUS exp5\n          | exp4 MINUS exp5\n          | exp5exp5 : exp5 LESS exp6\n          | exp5 GREATER exp6\n          | exp5 LESS_EQUAL exp6\n          | exp5 GREATER_EQUAL exp6\n          | exp6exp6 : exp6 EQUALS exp7\n          | exp6 DIFFERENT exp7\n          | exp7exp7 : exp7 AND exp8\n            | exp8exp8 : exp8 OR exp9\n            | exp9 exp9 : exp9 ASSIGN exp1\n             | exp9 COLONEQ exp1\n             | exp1return : RETURN exp\n              | RETURN'
    
_lr_action_items = {'PACKAGE':([0,],[3,]),'$end':([1,7,8,11,15,21,41,],[0,-1,-5,-6,-4,-16,-15,]),'IMPORT':([2,6,],[5,-2,]),'ID':([3,5,9,14,16,22,23,24,25,26,27,28,30,31,36,37,38,39,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,67,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,120,121,122,123,124,125,127,128,129,130,131,132,],[6,10,12,19,29,29,-19,-20,48,-23,-24,-27,48,48,-40,-41,-42,-43,48,29,-44,-45,-46,-47,-48,-49,-51,48,-55,-59,-62,-67,-70,-72,-74,-37,-33,48,48,-78,19,-19,-29,-20,-52,-53,-51,-77,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-35,29,29,-56,-57,-58,-60,-61,-63,-64,-65,-66,-68,-69,-71,-73,-75,-76,-38,-39,-50,-19,-28,-22,-26,48,29,-34,48,-21,-26,-36,]),'FUNC':([4,8,10,15,21,41,],[9,9,-3,-4,-16,-15,]),'LPAREN':([12,18,25,30,31,32,43,52,62,63,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,125,129,],[14,33,43,63,63,33,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'LCHAVES':([13,18,32,34,35,36,37,38,39,65,97,],[16,-9,-7,-10,-13,-40,-41,-42,-43,-8,-14,]),'RPAREN':([14,17,36,37,38,39,40,45,46,47,48,49,50,51,53,54,55,56,57,58,59,66,68,72,73,74,75,96,98,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,120,],[18,32,-40,-41,-42,-43,-11,-44,-45,-46,-47,-48,-49,-51,-55,-59,-62,-67,-70,-72,-74,97,99,-52,-53,-51,-77,120,-12,-56,-57,-58,-60,-61,-63,-64,-65,-66,-68,-69,-71,-73,-75,-76,-50,]),'RCHAVES':([16,20,22,23,24,26,27,28,30,31,36,37,38,39,42,45,46,47,48,49,50,51,53,54,55,56,57,58,59,60,61,64,69,70,71,72,73,74,75,95,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,120,121,122,123,124,128,130,131,132,],[21,41,-17,-19,-20,-23,-24,-27,-32,-79,-40,-41,-42,-43,-18,-44,-45,-46,-47,-48,-49,-51,-55,-59,-62,-67,-70,-72,-74,-37,-33,-78,-19,-29,-20,-52,-53,-51,-77,-35,-56,-57,-58,-60,-61,-63,-64,-65,-66,-68,-69,-71,-73,-75,-76,-38,-39,-50,-19,-28,-22,-26,-34,-21,-26,-36,]),'IF':([16,22,23,24,26,27,28,30,31,36,37,38,39,44,45,46,47,48,49,50,51,53,54,55,56,57,58,59,60,61,64,69,70,71,72,73,74,75,95,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,120,121,122,123,124,127,128,130,131,132,],[25,25,-19,-20,-23,-24,-27,-32,-79,-40,-41,-42,-43,25,-44,-45,-46,-47,-48,-49,-51,-55,-59,-62,-67,-70,-72,-74,-37,-33,-78,-19,-29,-20,-52,-53,-51,-77,-35,25,25,-56,-57,-58,-60,-61,-63,-64,-65,-66,-68,-69,-71,-73,-75,-76,-38,-39,-50,-19,-28,-22,-26,25,-34,-21,-26,-36,]),'FOR':([16,22,23,24,26,27,28,30,31,36,37,38,39,44,45,46,47,48,49,50,51,53,54,55,56,57,58,59,60,61,64,69,70,71,72,73,74,75,95,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,120,121,122,123,124,127,128,130,131,132,],[30,30,-19,-20,-23,-24,-27,-32,-79,-40,-41,-42,-43,30,-44,-45,-46,-47,-48,-49,-51,-55,-59,-62,-67,-70,-72,-74,-37,-33,-78,-19,-29,-20,-52,-53,-51,-77,-35,30,30,-56,-57,-58,-60,-61,-63,-64,-65,-66,-68,-69,-71,-73,-75,-76,-38,-39,-50,-19,-28,-22,-26,30,-34,-21,-26,-36,]),'RETURN':([16,22,23,24,26,27,28,30,31,36,37,38,39,44,45,46,47,48,49,50,51,53,54,55,56,57,58,59,60,61,64,69,70,71,72,73,74,75,95,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,120,121,122,123,124,127,128,130,131,132,],[31,31,-19,-20,-23,-24,-27,-32,-79,-40,-41,-42,-43,31,-44,-45,-46,-47,-48,-49,-51,-55,-59,-62,-67,-70,-72,-74,-37,-33,-78,-19,-29,-20,-52,-53,-51,-77,-35,31,31,-56,-57,-58,-60,-61,-63,-64,-65,-66,-68,-69,-71,-73,-75,-76,-38,-39,-50,-19,-28,-22,-26,31,-34,-21,-26,-36,]),'INT':([18,19,29,32,33,],[36,36,36,36,36,]),'STRING':([18,19,25,29,30,31,32,33,43,52,62,63,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,125,129,],[37,37,47,37,47,47,37,37,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'VAR':([18,19,29,32,33,],[38,38,38,38,38,]),'BOOL':([18,19,29,32,33,],[39,39,39,39,39,]),'NUMBER':([25,30,31,43,52,62,63,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,125,129,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'TRUE':([25,30,31,43,52,62,63,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,125,129,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'FALSE':([25,30,31,43,52,62,63,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,125,129,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'NOT':([25,30,31,43,52,62,63,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,125,129,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'ELSE':([26,27,28,30,31,36,37,38,39,45,46,47,48,49,50,51,53,54,55,56,57,58,59,60,61,64,69,70,71,72,73,74,75,95,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,120,121,122,123,124,128,130,131,132,],[-23,-24,-27,-32,-79,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-51,-55,-59,-62,-67,-70,-72,-74,-37,-33,-78,100,-29,-20,-52,-53,-51,-77,-35,-56,-57,-58,-60,-61,-63,-64,-65,-66,-68,-69,-71,-73,-75,-76,-38,-39,-50,127,-28,-22,-26,-34,-21,-26,-36,]),'RANGE':([30,126,],[62,129,]),'COMMA':([36,37,38,39,40,45,46,47,48,49,50,51,53,54,55,56,57,58,59,61,72,73,74,75,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,120,],[-40,-41,-42,-43,67,-44,-45,-46,-47,-48,-49,-51,-55,-59,-62,-67,-70,-72,-74,94,-52,-53,-51,-77,-56,-57,-58,-60,-61,-63,-64,-65,-66,-68,-69,-71,-73,-75,-76,-50,]),'ASSIGN':([36,37,38,39,45,46,47,48,49,50,51,53,54,55,56,57,58,59,60,72,73,74,75,99,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,119,120,],[-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-51,-55,-59,-62,-67,-70,-72,89,91,-52,-53,-51,-77,-50,-56,-57,-58,-60,-61,-63,-64,-65,-66,-68,-69,-71,89,-75,-76,126,-50,]),'COLONEQ':([36,37,38,39,45,46,47,48,49,50,51,53,54,55,56,57,58,59,60,72,73,74,75,99,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,120,],[-40,-41,-42,-43,-77,-45,-46,-47,-48,-49,-51,-55,-59,-62,-67,-70,-72,90,92,-52,-53,-51,-77,-50,-56,-57,-58,-60,-61,-63,-64,-65,-66,-68,-69,-71,90,-75,-76,-50,]),'SEMICOLON':([45,46,47,48,49,50,51,53,54,55,56,57,58,59,61,72,73,74,75,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,118,120,],[-44,-45,-46,-47,-48,-49,-51,-55,-59,-62,-67,-70,-72,-74,93,-52,-53,-51,-77,-56,-57,-58,-60,-61,-63,-64,-65,-66,-68,-69,-71,-73,-75,-76,125,-50,]),'OR':([45,46,47,48,49,50,51,53,54,55,56,57,58,59,72,73,74,75,99,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,120,],[-77,-45,-46,-47,-48,-49,-51,-55,-59,-62,-67,-70,88,-74,-52,-53,-51,-77,-50,-56,-57,-58,-60,-61,-63,-64,-65,-66,-68,-69,88,-73,-75,-76,-50,]),'AND':([45,46,47,48,49,50,51,53,54,55,56,57,58,59,72,73,74,75,99,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,120,],[-77,-45,-46,-47,-48,-49,-51,-55,-59,-62,-67,87,-72,-74,-52,-53,-51,-77,-50,-56,-57,-58,-60,-61,-63,-64,-65,-66,87,87,-71,-73,-75,-76,-50,]),'EQUALS':([45,46,47,48,49,50,51,53,54,55,56,57,58,59,72,73,74,75,99,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,120,],[-77,-45,-46,-47,-48,-49,-51,-55,-59,-62,85,-70,-72,-74,-52,-53,-51,-77,-50,-56,-57,-58,-60,-61,85,85,85,85,-68,-69,-71,-73,-75,-76,-50,]),'DIFFERENT':([45,46,47,48,49,50,51,53,54,55,56,57,58,59,72,73,74,75,99,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,120,],[-77,-45,-46,-47,-48,-49,-51,-55,-59,-62,86,-70,-72,-74,-52,-53,-51,-77,-50,-56,-57,-58,-60,-61,86,86,86,86,-68,-69,-71,-73,-75,-76,-50,]),'LESS':([45,46,47,48,49,50,51,53,54,55,56,57,58,59,72,73,74,75,99,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,120,],[-77,-45,-46,-47,-48,-49,-51,-55,-59,81,-67,-70,-72,-74,-52,-53,-51,-77,-50,-56,-57,-58,81,81,-63,-64,-65,-66,-68,-69,-71,-73,-75,-76,-50,]),'GREATER':([45,46,47,48,49,50,51,53,54,55,56,57,58,59,72,73,74,75,99,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,120,],[-77,-45,-46,-47,-48,-49,-51,-55,-59,82,-67,-70,-72,-74,-52,-53,-51,-77,-50,-56,-57,-58,82,82,-63,-64,-65,-66,-68,-69,-71,-73,-75,-76,-50,]),'LESS_EQUAL':([45,46,47,48,49,50,51,53,54,55,56,57,58,59,72,73,74,75,99,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,120,],[-77,-45,-46,-47,-48,-49,-51,-55,-59,83,-67,-70,-72,-74,-52,-53,-51,-77,-50,-56,-57,-58,83,83,-63,-64,-65,-66,-68,-69,-71,-73,-75,-76,-50,]),'GREATER_EQUAL':([45,46,47,48,49,50,51,53,54,55,56,57,58,59,72,73,74,75,99,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,120,],[-77,-45,-46,-47,-48,-49,-51,-55,-59,84,-67,-70,-72,-74,-52,-53,-51,-77,-50,-56,-57,-58,84,84,-63,-64,-65,-66,-68,-69,-71,-73,-75,-76,-50,]),'PLUS':([45,46,47,48,49,50,51,53,54,55,56,57,58,59,72,73,74,75,99,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,120,],[-77,-45,-46,-47,-48,-49,-51,-55,79,-62,-67,-70,-72,-74,-52,-53,-51,-77,-50,79,79,79,-60,-61,-63,-64,-65,-66,-68,-69,-71,-73,-75,-76,-50,]),'MINUS':([45,46,47,48,49,50,51,53,54,55,56,57,58,59,72,73,74,75,99,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,120,],[-77,-45,-46,-47,-48,-49,-51,-55,80,-62,-67,-70,-72,-74,-52,-53,-51,-77,-50,80,80,80,-60,-61,-63,-64,-65,-66,-68,-69,-71,-73,-75,-76,-50,]),'TIMES':([45,46,47,48,49,50,51,53,54,55,56,57,58,59,72,73,74,75,99,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,120,],[-77,-45,-46,-47,-48,-49,-51,76,-59,-62,-67,-70,-72,-74,-52,-53,-51,-77,-50,-56,-57,-58,-60,-61,-63,-64,-65,-66,-68,-69,-71,-73,-75,-76,-50,]),'DIVIDE':([45,46,47,48,49,50,51,53,54,55,56,57,58,59,72,73,74,75,99,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,120,],[-77,-45,-46,-47,-48,-49,-51,77,-59,-62,-67,-70,-72,-74,-52,-53,-51,-77,-50,-56,-57,-58,-60,-61,-63,-64,-65,-66,-68,-69,-71,-73,-75,-76,-50,]),'MOD':([45,46,47,48,49,50,51,53,54,55,56,57,58,59,72,73,74,75,99,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,120,],[-77,-45,-46,-47,-48,-49,-51,78,-59,-62,-67,-70,-72,-74,-52,-53,-51,-77,-50,-56,-57,-58,-60,-61,-63,-64,-65,-66,-68,-69,-71,-73,-75,-76,-50,]),'DPLUS':([45,46,47,48,49,50,51,53,54,55,56,57,58,59,72,73,74,75,99,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,120,],[-77,-45,-46,-47,-48,-49,72,-55,-59,-62,-67,-70,-72,-74,-52,-53,72,-77,-50,-56,-57,-58,-60,-61,-63,-64,-65,-66,-68,-69,-71,-73,-75,-76,-50,]),'DMINUS':([45,46,47,48,49,50,51,53,54,55,56,57,58,59,72,73,74,75,99,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,120,],[-77,-45,-46,-47,-48,-49,73,-55,-59,-62,-67,-70,-72,-74,-52,-53,73,-77,-50,-56,-57,-58,-60,-61,-63,-64,-65,-66,-68,-69,-71,-73,-75,-76,-50,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programaGO':([0,],[1,]),'defpackage':([0,],[2,]),'defimport':([2,],[4,]),'funcdecls':([4,8,],[7,11,]),'funcdecl':([4,8,],[8,8,]),'signature':([12,],[13,]),'body':([13,],[15,]),'sigparams':([14,67,],[17,98,]),'stms':([16,22,],[20,42,]),'statement':([16,22,44,99,],[22,22,70,122,]),'statement1':([16,22,44,99,100,127,],[23,23,69,121,123,130,]),'statement2':([16,22,44,99,100,127,],[24,24,71,71,124,131,]),'declaration':([16,22,44,99,100,127,],[26,26,26,26,26,26,]),'for':([16,22,44,99,100,127,],[27,27,27,27,27,27,]),'return':([16,22,44,99,100,127,],[28,28,28,28,28,28,]),'funcreturn':([18,32,],[34,65,]),'type':([18,19,29,32,33,],[35,40,60,35,66,]),'exp':([25,30,31,43,62,63,91,92,93,94,125,129,],[44,61,64,68,95,96,116,117,118,119,128,132,]),'exp1':([25,30,31,43,52,62,63,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,125,129,],[45,45,45,45,75,45,45,75,75,75,75,75,75,75,75,75,75,75,75,75,114,115,45,45,45,45,45,45,]),'exp2':([25,30,31,43,52,62,63,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,125,129,],[51,51,51,51,74,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'exp3':([25,30,31,43,52,62,63,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,125,129,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'exp4':([25,30,31,43,52,62,63,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,125,129,],[54,54,54,54,54,54,54,101,102,103,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'exp5':([25,30,31,43,52,62,63,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,125,129,],[55,55,55,55,55,55,55,55,55,55,104,105,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'exp6':([25,30,31,43,52,62,63,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,125,129,],[56,56,56,56,56,56,56,56,56,56,56,56,106,107,108,109,56,56,56,56,56,56,56,56,56,56,56,56,]),'exp7':([25,30,31,43,52,62,63,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,125,129,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,110,111,57,57,57,57,57,57,57,57,57,57,]),'exp8':([25,30,31,43,52,62,63,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,125,129,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,112,58,58,58,58,58,58,58,58,58,]),'exp9':([25,30,31,43,52,62,63,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,125,129,],[59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,113,59,59,59,59,59,59,59,59,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programaGO","S'",1,None,None,None),
  ('programaGO -> defpackage defimport funcdecls','programaGO',3,'p_programaGO','parser.py',9),
  ('defpackage -> PACKAGE ID','defpackage',2,'p_defpackage','parser.py',13),
  ('defimport -> IMPORT ID','defimport',2,'p_defimport','parser.py',17),
  ('funcdecl -> FUNC ID signature body','funcdecl',4,'p_funcdecl','parser.py',21),
  ('funcdecls -> funcdecl','funcdecls',1,'p_funcdecls','parser.py',25),
  ('funcdecls -> funcdecl funcdecls','funcdecls',2,'p_funcdecls','parser.py',26),
  ('signature -> LPAREN sigparams RPAREN','signature',3,'p_signature','parser.py',30),
  ('signature -> LPAREN sigparams RPAREN funcreturn','signature',4,'p_signature','parser.py',31),
  ('signature -> LPAREN RPAREN','signature',2,'p_signature','parser.py',32),
  ('signature -> LPAREN RPAREN funcreturn','signature',3,'p_signature','parser.py',33),
  ('sigparams -> ID type','sigparams',2,'p_sigparams','parser.py',37),
  ('sigparams -> ID type COMMA sigparams','sigparams',4,'p_sigparams','parser.py',38),
  ('funcreturn -> type','funcreturn',1,'p_funcreturn','parser.py',42),
  ('funcreturn -> LPAREN type RPAREN','funcreturn',3,'p_funcreturn','parser.py',43),
  ('body -> LCHAVES stms RCHAVES','body',3,'p_body','parser.py',47),
  ('body -> LCHAVES RCHAVES','body',2,'p_body','parser.py',48),
  ('stms -> statement','stms',1,'p_stms','parser.py',52),
  ('stms -> statement stms','stms',2,'p_stms','parser.py',53),
  ('statement -> statement1','statement',1,'p_statement','parser.py',57),
  ('statement -> statement2','statement',1,'p_statement','parser.py',58),
  ('statement1 -> IF LPAREN exp RPAREN statement1 ELSE statement1','statement1',7,'p_statement1','parser.py',62),
  ('statement1 -> IF exp statement1 ELSE statement1','statement1',5,'p_statement1','parser.py',63),
  ('statement1 -> declaration','statement1',1,'p_statement1','parser.py',64),
  ('statement1 -> for','statement1',1,'p_statement1','parser.py',65),
  ('statement1 -> statement1','statement1',1,'p_statement1','parser.py',66),
  ('statement1 -> statement2','statement1',1,'p_statement1','parser.py',67),
  ('statement1 -> return','statement1',1,'p_statement1','parser.py',68),
  ('statement2 -> IF LPAREN exp RPAREN statement','statement2',5,'p_statement2','parser.py',72),
  ('statement2 -> IF exp statement','statement2',3,'p_statement2','parser.py',73),
  ('statement2 -> IF exp statement1 ELSE statement2','statement2',5,'p_statement2','parser.py',74),
  ('statement2 -> IF LPAREN exp RPAREN statement1 ELSE statement2','statement2',7,'p_statement2','parser.py',75),
  ('for -> FOR','for',1,'p_for','parser.py',83),
  ('for -> FOR exp','for',2,'p_for','parser.py',84),
  ('for -> FOR exp SEMICOLON exp SEMICOLON exp','for',6,'p_for','parser.py',85),
  ('for -> FOR RANGE exp','for',3,'p_for','parser.py',86),
  ('for -> FOR exp COMMA exp ASSIGN RANGE exp','for',7,'p_for','parser.py',87),
  ('declaration -> ID type','declaration',2,'p_declaration','parser.py',93),
  ('declaration -> ID type ASSIGN exp','declaration',4,'p_declaration','parser.py',94),
  ('declaration -> ID type COLONEQ exp','declaration',4,'p_declaration','parser.py',95),
  ('type -> INT','type',1,'p_type','parser.py',99),
  ('type -> STRING','type',1,'p_type','parser.py',100),
  ('type -> VAR','type',1,'p_type','parser.py',101),
  ('type -> BOOL','type',1,'p_type','parser.py',102),
  ('exp -> exp1','exp',1,'p_exp_exp1','parser.py',106),
  ('exp1 -> NUMBER','exp1',1,'p_exp1','parser.py',110),
  ('exp1 -> STRING','exp1',1,'p_exp1','parser.py',111),
  ('exp1 -> ID','exp1',1,'p_exp1','parser.py',112),
  ('exp1 -> TRUE','exp1',1,'p_exp1','parser.py',113),
  ('exp1 -> FALSE','exp1',1,'p_exp1','parser.py',114),
  ('exp1 -> LPAREN exp RPAREN','exp1',3,'p_exp1','parser.py',115),
  ('exp1 -> exp2','exp1',1,'p_exp1','parser.py',116),
  ('exp2 -> exp2 DPLUS','exp2',2,'p_exp2','parser.py',134),
  ('exp2 -> exp2 DMINUS','exp2',2,'p_exp2','parser.py',135),
  ('exp2 -> NOT exp2','exp2',2,'p_exp2','parser.py',136),
  ('exp2 -> exp3','exp2',1,'p_exp2','parser.py',137),
  ('exp3 -> exp3 TIMES exp4','exp3',3,'p_exp3','parser.py',141),
  ('exp3 -> exp3 DIVIDE exp4','exp3',3,'p_exp3','parser.py',142),
  ('exp3 -> exp3 MOD exp4','exp3',3,'p_exp3','parser.py',143),
  ('exp3 -> exp4','exp3',1,'p_exp3','parser.py',144),
  ('exp4 -> exp4 PLUS exp5','exp4',3,'p_exp4','parser.py',148),
  ('exp4 -> exp4 MINUS exp5','exp4',3,'p_exp4','parser.py',149),
  ('exp4 -> exp5','exp4',1,'p_exp4','parser.py',150),
  ('exp5 -> exp5 LESS exp6','exp5',3,'p_exp5','parser.py',154),
  ('exp5 -> exp5 GREATER exp6','exp5',3,'p_exp5','parser.py',155),
  ('exp5 -> exp5 LESS_EQUAL exp6','exp5',3,'p_exp5','parser.py',156),
  ('exp5 -> exp5 GREATER_EQUAL exp6','exp5',3,'p_exp5','parser.py',157),
  ('exp5 -> exp6','exp5',1,'p_exp5','parser.py',158),
  ('exp6 -> exp6 EQUALS exp7','exp6',3,'p_exp6','parser.py',162),
  ('exp6 -> exp6 DIFFERENT exp7','exp6',3,'p_exp6','parser.py',163),
  ('exp6 -> exp7','exp6',1,'p_exp6','parser.py',164),
  ('exp7 -> exp7 AND exp8','exp7',3,'p_exp7','parser.py',168),
  ('exp7 -> exp8','exp7',1,'p_exp7','parser.py',169),
  ('exp8 -> exp8 OR exp9','exp8',3,'p_exp8','parser.py',173),
  ('exp8 -> exp9','exp8',1,'p_exp8','parser.py',174),
  ('exp9 -> exp9 ASSIGN exp1','exp9',3,'p_exp9','parser.py',178),
  ('exp9 -> exp9 COLONEQ exp1','exp9',3,'p_exp9','parser.py',179),
  ('exp9 -> exp1','exp9',1,'p_exp9','parser.py',180),
  ('return -> RETURN exp','return',2,'p_return','parser.py',184),
  ('return -> RETURN','return',1,'p_return','parser.py',185),
]
