Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    ASSIGN
    BOOL
    COLON
    COLONEQ
    COMMA
    DIFFERENT
    DMINUS
    DPLUS
    ELSE
    EQUALS
    FALSE
    FOR
    FUNC
    GREATER
    GREATER_EQUAL
    ID
    IF
    IMPORT
    INT
    LCHAVES
    LESS
    LESS_EQUAL
    LPAREN
    MOD
    OR
    PACKAGE
    RANGE
    RCHAVES
    RETURN
    RPAREN
    SEMICOLON
    STRING
    STRUCT
    TRUE
    TYPE
    VAR

Grammar

Rule 0     S' -> exp
Rule 1     exp -> exp1
Rule 2     exp1 -> exp2
Rule 3     exp2 -> NUMBER
Rule 4     exp -> exp PLUS exp1
Rule 5     exp -> exp MINUS exp1
Rule 6     exp1 -> exp1 TIMES exp2
Rule 7     exp1 -> exp1 DIVIDE exp2

Terminals, with rules where they appear

AND                  : 
ASSIGN               : 
BOOL                 : 
COLON                : 
COLONEQ              : 
COMMA                : 
DIFFERENT            : 
DIVIDE               : 7
DMINUS               : 
DPLUS                : 
ELSE                 : 
EQUALS               : 
FALSE                : 
FOR                  : 
FUNC                 : 
GREATER              : 
GREATER_EQUAL        : 
ID                   : 
IF                   : 
IMPORT               : 
INT                  : 
LCHAVES              : 
LESS                 : 
LESS_EQUAL           : 
LPAREN               : 
MINUS                : 5
MOD                  : 
NUMBER               : 3
OR                   : 
PACKAGE              : 
PLUS                 : 4
RANGE                : 
RCHAVES              : 
RETURN               : 
RPAREN               : 
SEMICOLON            : 
STRING               : 
STRUCT               : 
TIMES                : 6
TRUE                 : 
TYPE                 : 
VAR                  : 
error                : 

Nonterminals, with rules where they appear

exp                  : 4 5 0
exp1                 : 1 4 5 6 7
exp2                 : 2 6 7

Parsing method: LALR

state 0

    (0) S' -> . exp
    (1) exp -> . exp1
    (4) exp -> . exp PLUS exp1
    (5) exp -> . exp MINUS exp1
    (2) exp1 -> . exp2
    (6) exp1 -> . exp1 TIMES exp2
    (7) exp1 -> . exp1 DIVIDE exp2
    (3) exp2 -> . NUMBER

    NUMBER          shift and go to state 4

    exp                            shift and go to state 1
    exp1                           shift and go to state 2
    exp2                           shift and go to state 3

state 1

    (0) S' -> exp .
    (4) exp -> exp . PLUS exp1
    (5) exp -> exp . MINUS exp1

    PLUS            shift and go to state 5
    MINUS           shift and go to state 6


state 2

    (1) exp -> exp1 .
    (6) exp1 -> exp1 . TIMES exp2
    (7) exp1 -> exp1 . DIVIDE exp2

    PLUS            reduce using rule 1 (exp -> exp1 .)
    MINUS           reduce using rule 1 (exp -> exp1 .)
    $end            reduce using rule 1 (exp -> exp1 .)
    TIMES           shift and go to state 7
    DIVIDE          shift and go to state 8


state 3

    (2) exp1 -> exp2 .

    TIMES           reduce using rule 2 (exp1 -> exp2 .)
    DIVIDE          reduce using rule 2 (exp1 -> exp2 .)
    PLUS            reduce using rule 2 (exp1 -> exp2 .)
    MINUS           reduce using rule 2 (exp1 -> exp2 .)
    $end            reduce using rule 2 (exp1 -> exp2 .)


state 4

    (3) exp2 -> NUMBER .

    TIMES           reduce using rule 3 (exp2 -> NUMBER .)
    DIVIDE          reduce using rule 3 (exp2 -> NUMBER .)
    PLUS            reduce using rule 3 (exp2 -> NUMBER .)
    MINUS           reduce using rule 3 (exp2 -> NUMBER .)
    $end            reduce using rule 3 (exp2 -> NUMBER .)


state 5

    (4) exp -> exp PLUS . exp1
    (2) exp1 -> . exp2
    (6) exp1 -> . exp1 TIMES exp2
    (7) exp1 -> . exp1 DIVIDE exp2
    (3) exp2 -> . NUMBER

    NUMBER          shift and go to state 4

    exp1                           shift and go to state 9
    exp2                           shift and go to state 3

state 6

    (5) exp -> exp MINUS . exp1
    (2) exp1 -> . exp2
    (6) exp1 -> . exp1 TIMES exp2
    (7) exp1 -> . exp1 DIVIDE exp2
    (3) exp2 -> . NUMBER

    NUMBER          shift and go to state 4

    exp1                           shift and go to state 10
    exp2                           shift and go to state 3

state 7

    (6) exp1 -> exp1 TIMES . exp2
    (3) exp2 -> . NUMBER

    NUMBER          shift and go to state 4

    exp2                           shift and go to state 11

state 8

    (7) exp1 -> exp1 DIVIDE . exp2
    (3) exp2 -> . NUMBER

    NUMBER          shift and go to state 4

    exp2                           shift and go to state 12

state 9

    (4) exp -> exp PLUS exp1 .
    (6) exp1 -> exp1 . TIMES exp2
    (7) exp1 -> exp1 . DIVIDE exp2

    PLUS            reduce using rule 4 (exp -> exp PLUS exp1 .)
    MINUS           reduce using rule 4 (exp -> exp PLUS exp1 .)
    $end            reduce using rule 4 (exp -> exp PLUS exp1 .)
    TIMES           shift and go to state 7
    DIVIDE          shift and go to state 8


state 10

    (5) exp -> exp MINUS exp1 .
    (6) exp1 -> exp1 . TIMES exp2
    (7) exp1 -> exp1 . DIVIDE exp2

    PLUS            reduce using rule 5 (exp -> exp MINUS exp1 .)
    MINUS           reduce using rule 5 (exp -> exp MINUS exp1 .)
    $end            reduce using rule 5 (exp -> exp MINUS exp1 .)
    TIMES           shift and go to state 7
    DIVIDE          shift and go to state 8


state 11

    (6) exp1 -> exp1 TIMES exp2 .

    TIMES           reduce using rule 6 (exp1 -> exp1 TIMES exp2 .)
    DIVIDE          reduce using rule 6 (exp1 -> exp1 TIMES exp2 .)
    PLUS            reduce using rule 6 (exp1 -> exp1 TIMES exp2 .)
    MINUS           reduce using rule 6 (exp1 -> exp1 TIMES exp2 .)
    $end            reduce using rule 6 (exp1 -> exp1 TIMES exp2 .)


state 12

    (7) exp1 -> exp1 DIVIDE exp2 .

    TIMES           reduce using rule 7 (exp1 -> exp1 DIVIDE exp2 .)
    DIVIDE          reduce using rule 7 (exp1 -> exp1 DIVIDE exp2 .)
    PLUS            reduce using rule 7 (exp1 -> exp1 DIVIDE exp2 .)
    MINUS           reduce using rule 7 (exp1 -> exp1 DIVIDE exp2 .)
    $end            reduce using rule 7 (exp1 -> exp1 DIVIDE exp2 .)

