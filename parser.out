Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    TYPE

Grammar

Rule 0     S' -> programaGO
Rule 1     programaGO -> defpackage defimport funcdecls
Rule 2     defpackage -> PACKAGE ID
Rule 3     defimport -> IMPORT ID
Rule 4     funcdecl -> FUNC ID signature body
Rule 5     funcdecls -> funcdecl
Rule 6     funcdecls -> funcdecl funcdecls
Rule 7     signature -> LPAREN sigparams RPAREN
Rule 8     signature -> LPAREN sigparams RPAREN funcreturn
Rule 9     signature -> LPAREN RPAREN
Rule 10    signature -> LPAREN RPAREN funcreturn
Rule 11    sigparams -> ID type
Rule 12    sigparams -> ID type COMMA sigparams
Rule 13    funcreturn -> type
Rule 14    funcreturn -> LPAREN type RPAREN
Rule 15    body -> LCHAVES stms RCHAVES
Rule 16    body -> LCHAVES RCHAVES
Rule 17    stms -> statement
Rule 18    stms -> statement stms
Rule 19    statement -> statement1
Rule 20    statement -> statement2
Rule 21    statement1 -> IF LPAREN exp RPAREN statement1 ELSE statement1
Rule 22    statement1 -> IF exp statement1 ELSE statement1
Rule 23    statement1 -> declaration
Rule 24    statement1 -> for
Rule 25    statement1 -> statement1
Rule 26    statement1 -> statement2
Rule 27    statement1 -> return
Rule 28    statement2 -> IF LPAREN exp RPAREN statement
Rule 29    statement2 -> IF exp statement
Rule 30    statement2 -> IF exp statement1 ELSE statement2
Rule 31    statement2 -> IF LPAREN exp RPAREN statement1 ELSE statement2
Rule 32    for -> FOR
Rule 33    for -> FOR exp
Rule 34    for -> FOR exp SEMICOLON exp SEMICOLON exp
Rule 35    for -> FOR RANGE exp
Rule 36    for -> FOR exp COMMA exp ASSIGN RANGE exp
Rule 37    declaration -> VAR ID type
Rule 38    declaration -> VAR ID type ASSIGN exp
Rule 39    declaration -> VAR ID type COLONEQ exp
Rule 40    type -> INT
Rule 41    type -> STRING
Rule 42    type -> BOOL
Rule 43    exp -> exp1
Rule 44    exp1 -> NUMBER
Rule 45    exp1 -> STRING
Rule 46    exp1 -> ID
Rule 47    exp1 -> TRUE
Rule 48    exp1 -> FALSE
Rule 49    exp1 -> LPAREN exp RPAREN
Rule 50    exp1 -> exp2
Rule 51    exp2 -> exp2 DPLUS
Rule 52    exp2 -> exp2 DMINUS
Rule 53    exp2 -> NOT exp2
Rule 54    exp2 -> exp3
Rule 55    exp3 -> exp3 TIMES exp4
Rule 56    exp3 -> exp3 DIVIDE exp4
Rule 57    exp3 -> exp3 MOD exp4
Rule 58    exp3 -> exp4
Rule 59    exp4 -> exp4 PLUS exp5
Rule 60    exp4 -> exp4 MINUS exp5
Rule 61    exp4 -> exp5
Rule 62    exp5 -> exp5 LESS exp6
Rule 63    exp5 -> exp5 GREATER exp6
Rule 64    exp5 -> exp5 LESS_EQUAL exp6
Rule 65    exp5 -> exp5 GREATER_EQUAL exp6
Rule 66    exp5 -> exp6
Rule 67    exp6 -> exp6 EQUALS exp7
Rule 68    exp6 -> exp6 DIFFERENT exp7
Rule 69    exp6 -> exp7
Rule 70    exp7 -> exp7 AND exp8
Rule 71    exp7 -> exp8
Rule 72    exp8 -> exp8 OR exp9
Rule 73    exp8 -> exp9
Rule 74    exp9 -> exp9 ASSIGN exp1
Rule 75    exp9 -> exp9 COLONEQ exp1
Rule 76    exp9 -> exp1
Rule 77    return -> RETURN exp
Rule 78    return -> RETURN
Rule 79    break -> BREAK

Terminals, with rules where they appear

AND                  : 70
ASSIGN               : 36 38 74
BOOL                 : 42
BREAK                : 79
COLONEQ              : 39 75
COMMA                : 12 36
DIFFERENT            : 68
DIVIDE               : 56
DMINUS               : 52
DPLUS                : 51
ELSE                 : 21 22 30 31
EQUALS               : 67
FALSE                : 48
FOR                  : 32 33 34 35 36
FUNC                 : 4
GREATER              : 63
GREATER_EQUAL        : 65
ID                   : 2 3 4 11 12 37 38 39 46
IF                   : 21 22 28 29 30 31
IMPORT               : 3
INT                  : 40
LCHAVES              : 15 16
LESS                 : 62
LESS_EQUAL           : 64
LPAREN               : 7 8 9 10 14 21 28 31 49
MINUS                : 60
MOD                  : 57
NOT                  : 53
NUMBER               : 44
OR                   : 72
PACKAGE              : 2
PLUS                 : 59
RANGE                : 35 36
RCHAVES              : 15 16
RETURN               : 77 78
RPAREN               : 7 8 9 10 14 21 28 31 49
SEMICOLON            : 34 34
STRING               : 41 45
TIMES                : 55
TRUE                 : 47
TYPE                 : 
VAR                  : 37 38 39
error                : 

Nonterminals, with rules where they appear

body                 : 4
break                : 
declaration          : 23
defimport            : 1
defpackage           : 1
exp                  : 21 22 28 29 30 31 33 34 34 34 35 36 36 36 38 39 49 77
exp1                 : 43 74 75 76
exp2                 : 50 51 52 53
exp3                 : 54 55 56 57
exp4                 : 55 56 57 58 59 60
exp5                 : 59 60 61 62 63 64 65
exp6                 : 62 63 64 65 66 67 68
exp7                 : 67 68 69 70
exp8                 : 70 71 72
exp9                 : 72 73 74 75
for                  : 24
funcdecl             : 5 6
funcdecls            : 1 6
funcreturn           : 8 10
programaGO           : 0
return               : 27
signature            : 4
sigparams            : 7 8 12
statement            : 17 18 28 29
statement1           : 19 21 21 22 22 25 30 31
statement2           : 20 26 30 31
stms                 : 15 18
type                 : 11 12 13 14 37 38 39

Parsing method: LALR

state 0

    (0) S' -> . programaGO
    (1) programaGO -> . defpackage defimport funcdecls
    (2) defpackage -> . PACKAGE ID

    PACKAGE         shift and go to state 3

    programaGO                     shift and go to state 1
    defpackage                     shift and go to state 2

state 1

    (0) S' -> programaGO .



state 2

    (1) programaGO -> defpackage . defimport funcdecls
    (3) defimport -> . IMPORT ID

    IMPORT          shift and go to state 5

    defimport                      shift and go to state 4

state 3

    (2) defpackage -> PACKAGE . ID

    ID              shift and go to state 6


state 4

    (1) programaGO -> defpackage defimport . funcdecls
    (5) funcdecls -> . funcdecl
    (6) funcdecls -> . funcdecl funcdecls
    (4) funcdecl -> . FUNC ID signature body

    FUNC            shift and go to state 9

    funcdecls                      shift and go to state 7
    funcdecl                       shift and go to state 8

state 5

    (3) defimport -> IMPORT . ID

    ID              shift and go to state 10


state 6

    (2) defpackage -> PACKAGE ID .

    IMPORT          reduce using rule 2 (defpackage -> PACKAGE ID .)


state 7

    (1) programaGO -> defpackage defimport funcdecls .

    $end            reduce using rule 1 (programaGO -> defpackage defimport funcdecls .)


state 8

    (5) funcdecls -> funcdecl .
    (6) funcdecls -> funcdecl . funcdecls
    (5) funcdecls -> . funcdecl
    (6) funcdecls -> . funcdecl funcdecls
    (4) funcdecl -> . FUNC ID signature body

    $end            reduce using rule 5 (funcdecls -> funcdecl .)
    FUNC            shift and go to state 9

    funcdecl                       shift and go to state 8
    funcdecls                      shift and go to state 11

state 9

    (4) funcdecl -> FUNC . ID signature body

    ID              shift and go to state 12


state 10

    (3) defimport -> IMPORT ID .

    FUNC            reduce using rule 3 (defimport -> IMPORT ID .)


state 11

    (6) funcdecls -> funcdecl funcdecls .

    $end            reduce using rule 6 (funcdecls -> funcdecl funcdecls .)


state 12

    (4) funcdecl -> FUNC ID . signature body
    (7) signature -> . LPAREN sigparams RPAREN
    (8) signature -> . LPAREN sigparams RPAREN funcreturn
    (9) signature -> . LPAREN RPAREN
    (10) signature -> . LPAREN RPAREN funcreturn

    LPAREN          shift and go to state 14

    signature                      shift and go to state 13

state 13

    (4) funcdecl -> FUNC ID signature . body
    (15) body -> . LCHAVES stms RCHAVES
    (16) body -> . LCHAVES RCHAVES

    LCHAVES         shift and go to state 16

    body                           shift and go to state 15

state 14

    (7) signature -> LPAREN . sigparams RPAREN
    (8) signature -> LPAREN . sigparams RPAREN funcreturn
    (9) signature -> LPAREN . RPAREN
    (10) signature -> LPAREN . RPAREN funcreturn
    (11) sigparams -> . ID type
    (12) sigparams -> . ID type COMMA sigparams

    RPAREN          shift and go to state 18
    ID              shift and go to state 19

    sigparams                      shift and go to state 17

state 15

    (4) funcdecl -> FUNC ID signature body .

    FUNC            reduce using rule 4 (funcdecl -> FUNC ID signature body .)
    $end            reduce using rule 4 (funcdecl -> FUNC ID signature body .)


state 16

    (15) body -> LCHAVES . stms RCHAVES
    (16) body -> LCHAVES . RCHAVES
    (17) stms -> . statement
    (18) stms -> . statement stms
    (19) statement -> . statement1
    (20) statement -> . statement2
    (21) statement1 -> . IF LPAREN exp RPAREN statement1 ELSE statement1
    (22) statement1 -> . IF exp statement1 ELSE statement1
    (23) statement1 -> . declaration
    (24) statement1 -> . for
    (25) statement1 -> . statement1
    (26) statement1 -> . statement2
    (27) statement1 -> . return
    (28) statement2 -> . IF LPAREN exp RPAREN statement
    (29) statement2 -> . IF exp statement
    (30) statement2 -> . IF exp statement1 ELSE statement2
    (31) statement2 -> . IF LPAREN exp RPAREN statement1 ELSE statement2
    (37) declaration -> . VAR ID type
    (38) declaration -> . VAR ID type ASSIGN exp
    (39) declaration -> . VAR ID type COLONEQ exp
    (32) for -> . FOR
    (33) for -> . FOR exp
    (34) for -> . FOR exp SEMICOLON exp SEMICOLON exp
    (35) for -> . FOR RANGE exp
    (36) for -> . FOR exp COMMA exp ASSIGN RANGE exp
    (77) return -> . RETURN exp
    (78) return -> . RETURN

    RCHAVES         shift and go to state 21
    IF              shift and go to state 25
    VAR             shift and go to state 29
    FOR             shift and go to state 30
    RETURN          shift and go to state 31

    stms                           shift and go to state 20
    statement                      shift and go to state 22
    statement1                     shift and go to state 23
    statement2                     shift and go to state 24
    declaration                    shift and go to state 26
    for                            shift and go to state 27
    return                         shift and go to state 28

state 17

    (7) signature -> LPAREN sigparams . RPAREN
    (8) signature -> LPAREN sigparams . RPAREN funcreturn

    RPAREN          shift and go to state 32


state 18

    (9) signature -> LPAREN RPAREN .
    (10) signature -> LPAREN RPAREN . funcreturn
    (13) funcreturn -> . type
    (14) funcreturn -> . LPAREN type RPAREN
    (40) type -> . INT
    (41) type -> . STRING
    (42) type -> . BOOL

    LCHAVES         reduce using rule 9 (signature -> LPAREN RPAREN .)
    LPAREN          shift and go to state 33
    INT             shift and go to state 36
    STRING          shift and go to state 37
    BOOL            shift and go to state 38

    funcreturn                     shift and go to state 34
    type                           shift and go to state 35

state 19

    (11) sigparams -> ID . type
    (12) sigparams -> ID . type COMMA sigparams
    (40) type -> . INT
    (41) type -> . STRING
    (42) type -> . BOOL

    INT             shift and go to state 36
    STRING          shift and go to state 37
    BOOL            shift and go to state 38

    type                           shift and go to state 39

state 20

    (15) body -> LCHAVES stms . RCHAVES

    RCHAVES         shift and go to state 40


state 21

    (16) body -> LCHAVES RCHAVES .

    FUNC            reduce using rule 16 (body -> LCHAVES RCHAVES .)
    $end            reduce using rule 16 (body -> LCHAVES RCHAVES .)


state 22

    (17) stms -> statement .
    (18) stms -> statement . stms
    (17) stms -> . statement
    (18) stms -> . statement stms
    (19) statement -> . statement1
    (20) statement -> . statement2
    (21) statement1 -> . IF LPAREN exp RPAREN statement1 ELSE statement1
    (22) statement1 -> . IF exp statement1 ELSE statement1
    (23) statement1 -> . declaration
    (24) statement1 -> . for
    (25) statement1 -> . statement1
    (26) statement1 -> . statement2
    (27) statement1 -> . return
    (28) statement2 -> . IF LPAREN exp RPAREN statement
    (29) statement2 -> . IF exp statement
    (30) statement2 -> . IF exp statement1 ELSE statement2
    (31) statement2 -> . IF LPAREN exp RPAREN statement1 ELSE statement2
    (37) declaration -> . VAR ID type
    (38) declaration -> . VAR ID type ASSIGN exp
    (39) declaration -> . VAR ID type COLONEQ exp
    (32) for -> . FOR
    (33) for -> . FOR exp
    (34) for -> . FOR exp SEMICOLON exp SEMICOLON exp
    (35) for -> . FOR RANGE exp
    (36) for -> . FOR exp COMMA exp ASSIGN RANGE exp
    (77) return -> . RETURN exp
    (78) return -> . RETURN

    RCHAVES         reduce using rule 17 (stms -> statement .)
    IF              shift and go to state 25
    VAR             shift and go to state 29
    FOR             shift and go to state 30
    RETURN          shift and go to state 31

    statement                      shift and go to state 22
    stms                           shift and go to state 41
    statement1                     shift and go to state 23
    statement2                     shift and go to state 24
    declaration                    shift and go to state 26
    for                            shift and go to state 27
    return                         shift and go to state 28

state 23

    (19) statement -> statement1 .
    (25) statement1 -> statement1 .

  ! reduce/reduce conflict for IF resolved using rule 19 (statement -> statement1 .)
  ! reduce/reduce conflict for VAR resolved using rule 19 (statement -> statement1 .)
  ! reduce/reduce conflict for FOR resolved using rule 19 (statement -> statement1 .)
  ! reduce/reduce conflict for RETURN resolved using rule 19 (statement -> statement1 .)
  ! reduce/reduce conflict for RCHAVES resolved using rule 19 (statement -> statement1 .)
    IF              reduce using rule 19 (statement -> statement1 .)
    VAR             reduce using rule 19 (statement -> statement1 .)
    FOR             reduce using rule 19 (statement -> statement1 .)
    RETURN          reduce using rule 19 (statement -> statement1 .)
    RCHAVES         reduce using rule 19 (statement -> statement1 .)

  ! IF              [ reduce using rule 25 (statement1 -> statement1 .) ]
  ! VAR             [ reduce using rule 25 (statement1 -> statement1 .) ]
  ! FOR             [ reduce using rule 25 (statement1 -> statement1 .) ]
  ! RETURN          [ reduce using rule 25 (statement1 -> statement1 .) ]
  ! RCHAVES         [ reduce using rule 25 (statement1 -> statement1 .) ]


state 24

    (20) statement -> statement2 .
    (26) statement1 -> statement2 .

  ! reduce/reduce conflict for IF resolved using rule 20 (statement -> statement2 .)
  ! reduce/reduce conflict for VAR resolved using rule 20 (statement -> statement2 .)
  ! reduce/reduce conflict for FOR resolved using rule 20 (statement -> statement2 .)
  ! reduce/reduce conflict for RETURN resolved using rule 20 (statement -> statement2 .)
  ! reduce/reduce conflict for RCHAVES resolved using rule 20 (statement -> statement2 .)
    IF              reduce using rule 20 (statement -> statement2 .)
    VAR             reduce using rule 20 (statement -> statement2 .)
    FOR             reduce using rule 20 (statement -> statement2 .)
    RETURN          reduce using rule 20 (statement -> statement2 .)
    RCHAVES         reduce using rule 20 (statement -> statement2 .)

  ! IF              [ reduce using rule 26 (statement1 -> statement2 .) ]
  ! VAR             [ reduce using rule 26 (statement1 -> statement2 .) ]
  ! FOR             [ reduce using rule 26 (statement1 -> statement2 .) ]
  ! RETURN          [ reduce using rule 26 (statement1 -> statement2 .) ]
  ! RCHAVES         [ reduce using rule 26 (statement1 -> statement2 .) ]


state 25

    (21) statement1 -> IF . LPAREN exp RPAREN statement1 ELSE statement1
    (22) statement1 -> IF . exp statement1 ELSE statement1
    (28) statement2 -> IF . LPAREN exp RPAREN statement
    (29) statement2 -> IF . exp statement
    (30) statement2 -> IF . exp statement1 ELSE statement2
    (31) statement2 -> IF . LPAREN exp RPAREN statement1 ELSE statement2
    (43) exp -> . exp1
    (44) exp1 -> . NUMBER
    (45) exp1 -> . STRING
    (46) exp1 -> . ID
    (47) exp1 -> . TRUE
    (48) exp1 -> . FALSE
    (49) exp1 -> . LPAREN exp RPAREN
    (50) exp1 -> . exp2
    (51) exp2 -> . exp2 DPLUS
    (52) exp2 -> . exp2 DMINUS
    (53) exp2 -> . NOT exp2
    (54) exp2 -> . exp3
    (55) exp3 -> . exp3 TIMES exp4
    (56) exp3 -> . exp3 DIVIDE exp4
    (57) exp3 -> . exp3 MOD exp4
    (58) exp3 -> . exp4
    (59) exp4 -> . exp4 PLUS exp5
    (60) exp4 -> . exp4 MINUS exp5
    (61) exp4 -> . exp5
    (62) exp5 -> . exp5 LESS exp6
    (63) exp5 -> . exp5 GREATER exp6
    (64) exp5 -> . exp5 LESS_EQUAL exp6
    (65) exp5 -> . exp5 GREATER_EQUAL exp6
    (66) exp5 -> . exp6
    (67) exp6 -> . exp6 EQUALS exp7
    (68) exp6 -> . exp6 DIFFERENT exp7
    (69) exp6 -> . exp7
    (70) exp7 -> . exp7 AND exp8
    (71) exp7 -> . exp8
    (72) exp8 -> . exp8 OR exp9
    (73) exp8 -> . exp9
    (74) exp9 -> . exp9 ASSIGN exp1
    (75) exp9 -> . exp9 COLONEQ exp1
    (76) exp9 -> . exp1

    LPAREN          shift and go to state 42
    NUMBER          shift and go to state 45
    STRING          shift and go to state 46
    ID              shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    NOT             shift and go to state 51

    exp                            shift and go to state 43
    exp1                           shift and go to state 44
    exp2                           shift and go to state 50
    exp3                           shift and go to state 52
    exp4                           shift and go to state 53
    exp5                           shift and go to state 54
    exp6                           shift and go to state 55
    exp7                           shift and go to state 56
    exp8                           shift and go to state 57
    exp9                           shift and go to state 58

state 26

    (23) statement1 -> declaration .

    IF              reduce using rule 23 (statement1 -> declaration .)
    VAR             reduce using rule 23 (statement1 -> declaration .)
    FOR             reduce using rule 23 (statement1 -> declaration .)
    RETURN          reduce using rule 23 (statement1 -> declaration .)
    RCHAVES         reduce using rule 23 (statement1 -> declaration .)
    ELSE            reduce using rule 23 (statement1 -> declaration .)


state 27

    (24) statement1 -> for .

    IF              reduce using rule 24 (statement1 -> for .)
    VAR             reduce using rule 24 (statement1 -> for .)
    FOR             reduce using rule 24 (statement1 -> for .)
    RETURN          reduce using rule 24 (statement1 -> for .)
    RCHAVES         reduce using rule 24 (statement1 -> for .)
    ELSE            reduce using rule 24 (statement1 -> for .)


state 28

    (27) statement1 -> return .

    IF              reduce using rule 27 (statement1 -> return .)
    VAR             reduce using rule 27 (statement1 -> return .)
    FOR             reduce using rule 27 (statement1 -> return .)
    RETURN          reduce using rule 27 (statement1 -> return .)
    RCHAVES         reduce using rule 27 (statement1 -> return .)
    ELSE            reduce using rule 27 (statement1 -> return .)


state 29

    (37) declaration -> VAR . ID type
    (38) declaration -> VAR . ID type ASSIGN exp
    (39) declaration -> VAR . ID type COLONEQ exp

    ID              shift and go to state 59


state 30

    (32) for -> FOR .
    (33) for -> FOR . exp
    (34) for -> FOR . exp SEMICOLON exp SEMICOLON exp
    (35) for -> FOR . RANGE exp
    (36) for -> FOR . exp COMMA exp ASSIGN RANGE exp
    (43) exp -> . exp1
    (44) exp1 -> . NUMBER
    (45) exp1 -> . STRING
    (46) exp1 -> . ID
    (47) exp1 -> . TRUE
    (48) exp1 -> . FALSE
    (49) exp1 -> . LPAREN exp RPAREN
    (50) exp1 -> . exp2
    (51) exp2 -> . exp2 DPLUS
    (52) exp2 -> . exp2 DMINUS
    (53) exp2 -> . NOT exp2
    (54) exp2 -> . exp3
    (55) exp3 -> . exp3 TIMES exp4
    (56) exp3 -> . exp3 DIVIDE exp4
    (57) exp3 -> . exp3 MOD exp4
    (58) exp3 -> . exp4
    (59) exp4 -> . exp4 PLUS exp5
    (60) exp4 -> . exp4 MINUS exp5
    (61) exp4 -> . exp5
    (62) exp5 -> . exp5 LESS exp6
    (63) exp5 -> . exp5 GREATER exp6
    (64) exp5 -> . exp5 LESS_EQUAL exp6
    (65) exp5 -> . exp5 GREATER_EQUAL exp6
    (66) exp5 -> . exp6
    (67) exp6 -> . exp6 EQUALS exp7
    (68) exp6 -> . exp6 DIFFERENT exp7
    (69) exp6 -> . exp7
    (70) exp7 -> . exp7 AND exp8
    (71) exp7 -> . exp8
    (72) exp8 -> . exp8 OR exp9
    (73) exp8 -> . exp9
    (74) exp9 -> . exp9 ASSIGN exp1
    (75) exp9 -> . exp9 COLONEQ exp1
    (76) exp9 -> . exp1

    IF              reduce using rule 32 (for -> FOR .)
    VAR             reduce using rule 32 (for -> FOR .)
    FOR             reduce using rule 32 (for -> FOR .)
    RETURN          reduce using rule 32 (for -> FOR .)
    RCHAVES         reduce using rule 32 (for -> FOR .)
    ELSE            reduce using rule 32 (for -> FOR .)
    RANGE           shift and go to state 61
    NUMBER          shift and go to state 45
    STRING          shift and go to state 46
    ID              shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 62
    NOT             shift and go to state 51

    exp                            shift and go to state 60
    exp1                           shift and go to state 44
    exp2                           shift and go to state 50
    exp3                           shift and go to state 52
    exp4                           shift and go to state 53
    exp5                           shift and go to state 54
    exp6                           shift and go to state 55
    exp7                           shift and go to state 56
    exp8                           shift and go to state 57
    exp9                           shift and go to state 58

state 31

    (77) return -> RETURN . exp
    (78) return -> RETURN .
    (43) exp -> . exp1
    (44) exp1 -> . NUMBER
    (45) exp1 -> . STRING
    (46) exp1 -> . ID
    (47) exp1 -> . TRUE
    (48) exp1 -> . FALSE
    (49) exp1 -> . LPAREN exp RPAREN
    (50) exp1 -> . exp2
    (51) exp2 -> . exp2 DPLUS
    (52) exp2 -> . exp2 DMINUS
    (53) exp2 -> . NOT exp2
    (54) exp2 -> . exp3
    (55) exp3 -> . exp3 TIMES exp4
    (56) exp3 -> . exp3 DIVIDE exp4
    (57) exp3 -> . exp3 MOD exp4
    (58) exp3 -> . exp4
    (59) exp4 -> . exp4 PLUS exp5
    (60) exp4 -> . exp4 MINUS exp5
    (61) exp4 -> . exp5
    (62) exp5 -> . exp5 LESS exp6
    (63) exp5 -> . exp5 GREATER exp6
    (64) exp5 -> . exp5 LESS_EQUAL exp6
    (65) exp5 -> . exp5 GREATER_EQUAL exp6
    (66) exp5 -> . exp6
    (67) exp6 -> . exp6 EQUALS exp7
    (68) exp6 -> . exp6 DIFFERENT exp7
    (69) exp6 -> . exp7
    (70) exp7 -> . exp7 AND exp8
    (71) exp7 -> . exp8
    (72) exp8 -> . exp8 OR exp9
    (73) exp8 -> . exp9
    (74) exp9 -> . exp9 ASSIGN exp1
    (75) exp9 -> . exp9 COLONEQ exp1
    (76) exp9 -> . exp1

    IF              reduce using rule 78 (return -> RETURN .)
    VAR             reduce using rule 78 (return -> RETURN .)
    FOR             reduce using rule 78 (return -> RETURN .)
    RETURN          reduce using rule 78 (return -> RETURN .)
    RCHAVES         reduce using rule 78 (return -> RETURN .)
    ELSE            reduce using rule 78 (return -> RETURN .)
    NUMBER          shift and go to state 45
    STRING          shift and go to state 46
    ID              shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 62
    NOT             shift and go to state 51

    exp                            shift and go to state 63
    exp1                           shift and go to state 44
    exp2                           shift and go to state 50
    exp3                           shift and go to state 52
    exp4                           shift and go to state 53
    exp5                           shift and go to state 54
    exp6                           shift and go to state 55
    exp7                           shift and go to state 56
    exp8                           shift and go to state 57
    exp9                           shift and go to state 58

state 32

    (7) signature -> LPAREN sigparams RPAREN .
    (8) signature -> LPAREN sigparams RPAREN . funcreturn
    (13) funcreturn -> . type
    (14) funcreturn -> . LPAREN type RPAREN
    (40) type -> . INT
    (41) type -> . STRING
    (42) type -> . BOOL

    LCHAVES         reduce using rule 7 (signature -> LPAREN sigparams RPAREN .)
    LPAREN          shift and go to state 33
    INT             shift and go to state 36
    STRING          shift and go to state 37
    BOOL            shift and go to state 38

    funcreturn                     shift and go to state 64
    type                           shift and go to state 35

state 33

    (14) funcreturn -> LPAREN . type RPAREN
    (40) type -> . INT
    (41) type -> . STRING
    (42) type -> . BOOL

    INT             shift and go to state 36
    STRING          shift and go to state 37
    BOOL            shift and go to state 38

    type                           shift and go to state 65

state 34

    (10) signature -> LPAREN RPAREN funcreturn .

    LCHAVES         reduce using rule 10 (signature -> LPAREN RPAREN funcreturn .)


state 35

    (13) funcreturn -> type .

    LCHAVES         reduce using rule 13 (funcreturn -> type .)


state 36

    (40) type -> INT .

    LCHAVES         reduce using rule 40 (type -> INT .)
    COMMA           reduce using rule 40 (type -> INT .)
    RPAREN          reduce using rule 40 (type -> INT .)
    ASSIGN          reduce using rule 40 (type -> INT .)
    COLONEQ         reduce using rule 40 (type -> INT .)
    IF              reduce using rule 40 (type -> INT .)
    VAR             reduce using rule 40 (type -> INT .)
    FOR             reduce using rule 40 (type -> INT .)
    RETURN          reduce using rule 40 (type -> INT .)
    RCHAVES         reduce using rule 40 (type -> INT .)
    ELSE            reduce using rule 40 (type -> INT .)


state 37

    (41) type -> STRING .

    LCHAVES         reduce using rule 41 (type -> STRING .)
    COMMA           reduce using rule 41 (type -> STRING .)
    RPAREN          reduce using rule 41 (type -> STRING .)
    ASSIGN          reduce using rule 41 (type -> STRING .)
    COLONEQ         reduce using rule 41 (type -> STRING .)
    IF              reduce using rule 41 (type -> STRING .)
    VAR             reduce using rule 41 (type -> STRING .)
    FOR             reduce using rule 41 (type -> STRING .)
    RETURN          reduce using rule 41 (type -> STRING .)
    RCHAVES         reduce using rule 41 (type -> STRING .)
    ELSE            reduce using rule 41 (type -> STRING .)


state 38

    (42) type -> BOOL .

    LCHAVES         reduce using rule 42 (type -> BOOL .)
    COMMA           reduce using rule 42 (type -> BOOL .)
    RPAREN          reduce using rule 42 (type -> BOOL .)
    ASSIGN          reduce using rule 42 (type -> BOOL .)
    COLONEQ         reduce using rule 42 (type -> BOOL .)
    IF              reduce using rule 42 (type -> BOOL .)
    VAR             reduce using rule 42 (type -> BOOL .)
    FOR             reduce using rule 42 (type -> BOOL .)
    RETURN          reduce using rule 42 (type -> BOOL .)
    RCHAVES         reduce using rule 42 (type -> BOOL .)
    ELSE            reduce using rule 42 (type -> BOOL .)


state 39

    (11) sigparams -> ID type .
    (12) sigparams -> ID type . COMMA sigparams

    RPAREN          reduce using rule 11 (sigparams -> ID type .)
    COMMA           shift and go to state 66


state 40

    (15) body -> LCHAVES stms RCHAVES .

    FUNC            reduce using rule 15 (body -> LCHAVES stms RCHAVES .)
    $end            reduce using rule 15 (body -> LCHAVES stms RCHAVES .)


state 41

    (18) stms -> statement stms .

    RCHAVES         reduce using rule 18 (stms -> statement stms .)


state 42

    (21) statement1 -> IF LPAREN . exp RPAREN statement1 ELSE statement1
    (28) statement2 -> IF LPAREN . exp RPAREN statement
    (31) statement2 -> IF LPAREN . exp RPAREN statement1 ELSE statement2
    (49) exp1 -> LPAREN . exp RPAREN
    (43) exp -> . exp1
    (44) exp1 -> . NUMBER
    (45) exp1 -> . STRING
    (46) exp1 -> . ID
    (47) exp1 -> . TRUE
    (48) exp1 -> . FALSE
    (49) exp1 -> . LPAREN exp RPAREN
    (50) exp1 -> . exp2
    (51) exp2 -> . exp2 DPLUS
    (52) exp2 -> . exp2 DMINUS
    (53) exp2 -> . NOT exp2
    (54) exp2 -> . exp3
    (55) exp3 -> . exp3 TIMES exp4
    (56) exp3 -> . exp3 DIVIDE exp4
    (57) exp3 -> . exp3 MOD exp4
    (58) exp3 -> . exp4
    (59) exp4 -> . exp4 PLUS exp5
    (60) exp4 -> . exp4 MINUS exp5
    (61) exp4 -> . exp5
    (62) exp5 -> . exp5 LESS exp6
    (63) exp5 -> . exp5 GREATER exp6
    (64) exp5 -> . exp5 LESS_EQUAL exp6
    (65) exp5 -> . exp5 GREATER_EQUAL exp6
    (66) exp5 -> . exp6
    (67) exp6 -> . exp6 EQUALS exp7
    (68) exp6 -> . exp6 DIFFERENT exp7
    (69) exp6 -> . exp7
    (70) exp7 -> . exp7 AND exp8
    (71) exp7 -> . exp8
    (72) exp8 -> . exp8 OR exp9
    (73) exp8 -> . exp9
    (74) exp9 -> . exp9 ASSIGN exp1
    (75) exp9 -> . exp9 COLONEQ exp1
    (76) exp9 -> . exp1

    NUMBER          shift and go to state 45
    STRING          shift and go to state 46
    ID              shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 62
    NOT             shift and go to state 51

    exp                            shift and go to state 67
    exp1                           shift and go to state 44
    exp2                           shift and go to state 50
    exp3                           shift and go to state 52
    exp4                           shift and go to state 53
    exp5                           shift and go to state 54
    exp6                           shift and go to state 55
    exp7                           shift and go to state 56
    exp8                           shift and go to state 57
    exp9                           shift and go to state 58

state 43

    (22) statement1 -> IF exp . statement1 ELSE statement1
    (29) statement2 -> IF exp . statement
    (30) statement2 -> IF exp . statement1 ELSE statement2
    (21) statement1 -> . IF LPAREN exp RPAREN statement1 ELSE statement1
    (22) statement1 -> . IF exp statement1 ELSE statement1
    (23) statement1 -> . declaration
    (24) statement1 -> . for
    (25) statement1 -> . statement1
    (26) statement1 -> . statement2
    (27) statement1 -> . return
    (19) statement -> . statement1
    (20) statement -> . statement2
    (37) declaration -> . VAR ID type
    (38) declaration -> . VAR ID type ASSIGN exp
    (39) declaration -> . VAR ID type COLONEQ exp
    (32) for -> . FOR
    (33) for -> . FOR exp
    (34) for -> . FOR exp SEMICOLON exp SEMICOLON exp
    (35) for -> . FOR RANGE exp
    (36) for -> . FOR exp COMMA exp ASSIGN RANGE exp
    (28) statement2 -> . IF LPAREN exp RPAREN statement
    (29) statement2 -> . IF exp statement
    (30) statement2 -> . IF exp statement1 ELSE statement2
    (31) statement2 -> . IF LPAREN exp RPAREN statement1 ELSE statement2
    (77) return -> . RETURN exp
    (78) return -> . RETURN

    IF              shift and go to state 25
    VAR             shift and go to state 29
    FOR             shift and go to state 30
    RETURN          shift and go to state 31

    statement1                     shift and go to state 68
    statement                      shift and go to state 69
    statement2                     shift and go to state 70
    declaration                    shift and go to state 26
    for                            shift and go to state 27
    return                         shift and go to state 28

state 44

    (43) exp -> exp1 .
    (76) exp9 -> exp1 .

  ! reduce/reduce conflict for IF resolved using rule 43 (exp -> exp1 .)
  ! reduce/reduce conflict for VAR resolved using rule 43 (exp -> exp1 .)
  ! reduce/reduce conflict for FOR resolved using rule 43 (exp -> exp1 .)
  ! reduce/reduce conflict for RETURN resolved using rule 43 (exp -> exp1 .)
  ! reduce/reduce conflict for ASSIGN resolved using rule 43 (exp -> exp1 .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 43 (exp -> exp1 .)
  ! reduce/reduce conflict for COMMA resolved using rule 43 (exp -> exp1 .)
  ! reduce/reduce conflict for RCHAVES resolved using rule 43 (exp -> exp1 .)
  ! reduce/reduce conflict for ELSE resolved using rule 43 (exp -> exp1 .)
  ! reduce/reduce conflict for RPAREN resolved using rule 43 (exp -> exp1 .)
    IF              reduce using rule 43 (exp -> exp1 .)
    VAR             reduce using rule 43 (exp -> exp1 .)
    FOR             reduce using rule 43 (exp -> exp1 .)
    RETURN          reduce using rule 43 (exp -> exp1 .)
    SEMICOLON       reduce using rule 43 (exp -> exp1 .)
    COMMA           reduce using rule 43 (exp -> exp1 .)
    RCHAVES         reduce using rule 43 (exp -> exp1 .)
    ELSE            reduce using rule 43 (exp -> exp1 .)
    RPAREN          reduce using rule 43 (exp -> exp1 .)
    ASSIGN          reduce using rule 43 (exp -> exp1 .)
    COLONEQ         reduce using rule 76 (exp9 -> exp1 .)
    OR              reduce using rule 76 (exp9 -> exp1 .)
    AND             reduce using rule 76 (exp9 -> exp1 .)
    EQUALS          reduce using rule 76 (exp9 -> exp1 .)
    DIFFERENT       reduce using rule 76 (exp9 -> exp1 .)
    LESS            reduce using rule 76 (exp9 -> exp1 .)
    GREATER         reduce using rule 76 (exp9 -> exp1 .)
    LESS_EQUAL      reduce using rule 76 (exp9 -> exp1 .)
    GREATER_EQUAL   reduce using rule 76 (exp9 -> exp1 .)
    PLUS            reduce using rule 76 (exp9 -> exp1 .)
    MINUS           reduce using rule 76 (exp9 -> exp1 .)
    TIMES           reduce using rule 76 (exp9 -> exp1 .)
    DIVIDE          reduce using rule 76 (exp9 -> exp1 .)
    MOD             reduce using rule 76 (exp9 -> exp1 .)
    DPLUS           reduce using rule 76 (exp9 -> exp1 .)
    DMINUS          reduce using rule 76 (exp9 -> exp1 .)

  ! IF              [ reduce using rule 76 (exp9 -> exp1 .) ]
  ! VAR             [ reduce using rule 76 (exp9 -> exp1 .) ]
  ! FOR             [ reduce using rule 76 (exp9 -> exp1 .) ]
  ! RETURN          [ reduce using rule 76 (exp9 -> exp1 .) ]
  ! ASSIGN          [ reduce using rule 76 (exp9 -> exp1 .) ]
  ! SEMICOLON       [ reduce using rule 76 (exp9 -> exp1 .) ]
  ! COMMA           [ reduce using rule 76 (exp9 -> exp1 .) ]
  ! RCHAVES         [ reduce using rule 76 (exp9 -> exp1 .) ]
  ! ELSE            [ reduce using rule 76 (exp9 -> exp1 .) ]
  ! RPAREN          [ reduce using rule 76 (exp9 -> exp1 .) ]


state 45

    (44) exp1 -> NUMBER .

    IF              reduce using rule 44 (exp1 -> NUMBER .)
    VAR             reduce using rule 44 (exp1 -> NUMBER .)
    FOR             reduce using rule 44 (exp1 -> NUMBER .)
    RETURN          reduce using rule 44 (exp1 -> NUMBER .)
    ASSIGN          reduce using rule 44 (exp1 -> NUMBER .)
    COLONEQ         reduce using rule 44 (exp1 -> NUMBER .)
    OR              reduce using rule 44 (exp1 -> NUMBER .)
    AND             reduce using rule 44 (exp1 -> NUMBER .)
    EQUALS          reduce using rule 44 (exp1 -> NUMBER .)
    DIFFERENT       reduce using rule 44 (exp1 -> NUMBER .)
    LESS            reduce using rule 44 (exp1 -> NUMBER .)
    GREATER         reduce using rule 44 (exp1 -> NUMBER .)
    LESS_EQUAL      reduce using rule 44 (exp1 -> NUMBER .)
    GREATER_EQUAL   reduce using rule 44 (exp1 -> NUMBER .)
    PLUS            reduce using rule 44 (exp1 -> NUMBER .)
    MINUS           reduce using rule 44 (exp1 -> NUMBER .)
    TIMES           reduce using rule 44 (exp1 -> NUMBER .)
    DIVIDE          reduce using rule 44 (exp1 -> NUMBER .)
    MOD             reduce using rule 44 (exp1 -> NUMBER .)
    DPLUS           reduce using rule 44 (exp1 -> NUMBER .)
    DMINUS          reduce using rule 44 (exp1 -> NUMBER .)
    SEMICOLON       reduce using rule 44 (exp1 -> NUMBER .)
    COMMA           reduce using rule 44 (exp1 -> NUMBER .)
    RCHAVES         reduce using rule 44 (exp1 -> NUMBER .)
    ELSE            reduce using rule 44 (exp1 -> NUMBER .)
    RPAREN          reduce using rule 44 (exp1 -> NUMBER .)


state 46

    (45) exp1 -> STRING .

    IF              reduce using rule 45 (exp1 -> STRING .)
    VAR             reduce using rule 45 (exp1 -> STRING .)
    FOR             reduce using rule 45 (exp1 -> STRING .)
    RETURN          reduce using rule 45 (exp1 -> STRING .)
    ASSIGN          reduce using rule 45 (exp1 -> STRING .)
    COLONEQ         reduce using rule 45 (exp1 -> STRING .)
    OR              reduce using rule 45 (exp1 -> STRING .)
    AND             reduce using rule 45 (exp1 -> STRING .)
    EQUALS          reduce using rule 45 (exp1 -> STRING .)
    DIFFERENT       reduce using rule 45 (exp1 -> STRING .)
    LESS            reduce using rule 45 (exp1 -> STRING .)
    GREATER         reduce using rule 45 (exp1 -> STRING .)
    LESS_EQUAL      reduce using rule 45 (exp1 -> STRING .)
    GREATER_EQUAL   reduce using rule 45 (exp1 -> STRING .)
    PLUS            reduce using rule 45 (exp1 -> STRING .)
    MINUS           reduce using rule 45 (exp1 -> STRING .)
    TIMES           reduce using rule 45 (exp1 -> STRING .)
    DIVIDE          reduce using rule 45 (exp1 -> STRING .)
    MOD             reduce using rule 45 (exp1 -> STRING .)
    DPLUS           reduce using rule 45 (exp1 -> STRING .)
    DMINUS          reduce using rule 45 (exp1 -> STRING .)
    SEMICOLON       reduce using rule 45 (exp1 -> STRING .)
    COMMA           reduce using rule 45 (exp1 -> STRING .)
    RCHAVES         reduce using rule 45 (exp1 -> STRING .)
    ELSE            reduce using rule 45 (exp1 -> STRING .)
    RPAREN          reduce using rule 45 (exp1 -> STRING .)


state 47

    (46) exp1 -> ID .

    IF              reduce using rule 46 (exp1 -> ID .)
    VAR             reduce using rule 46 (exp1 -> ID .)
    FOR             reduce using rule 46 (exp1 -> ID .)
    RETURN          reduce using rule 46 (exp1 -> ID .)
    ASSIGN          reduce using rule 46 (exp1 -> ID .)
    COLONEQ         reduce using rule 46 (exp1 -> ID .)
    OR              reduce using rule 46 (exp1 -> ID .)
    AND             reduce using rule 46 (exp1 -> ID .)
    EQUALS          reduce using rule 46 (exp1 -> ID .)
    DIFFERENT       reduce using rule 46 (exp1 -> ID .)
    LESS            reduce using rule 46 (exp1 -> ID .)
    GREATER         reduce using rule 46 (exp1 -> ID .)
    LESS_EQUAL      reduce using rule 46 (exp1 -> ID .)
    GREATER_EQUAL   reduce using rule 46 (exp1 -> ID .)
    PLUS            reduce using rule 46 (exp1 -> ID .)
    MINUS           reduce using rule 46 (exp1 -> ID .)
    TIMES           reduce using rule 46 (exp1 -> ID .)
    DIVIDE          reduce using rule 46 (exp1 -> ID .)
    MOD             reduce using rule 46 (exp1 -> ID .)
    DPLUS           reduce using rule 46 (exp1 -> ID .)
    DMINUS          reduce using rule 46 (exp1 -> ID .)
    SEMICOLON       reduce using rule 46 (exp1 -> ID .)
    COMMA           reduce using rule 46 (exp1 -> ID .)
    RCHAVES         reduce using rule 46 (exp1 -> ID .)
    ELSE            reduce using rule 46 (exp1 -> ID .)
    RPAREN          reduce using rule 46 (exp1 -> ID .)


state 48

    (47) exp1 -> TRUE .

    IF              reduce using rule 47 (exp1 -> TRUE .)
    VAR             reduce using rule 47 (exp1 -> TRUE .)
    FOR             reduce using rule 47 (exp1 -> TRUE .)
    RETURN          reduce using rule 47 (exp1 -> TRUE .)
    ASSIGN          reduce using rule 47 (exp1 -> TRUE .)
    COLONEQ         reduce using rule 47 (exp1 -> TRUE .)
    OR              reduce using rule 47 (exp1 -> TRUE .)
    AND             reduce using rule 47 (exp1 -> TRUE .)
    EQUALS          reduce using rule 47 (exp1 -> TRUE .)
    DIFFERENT       reduce using rule 47 (exp1 -> TRUE .)
    LESS            reduce using rule 47 (exp1 -> TRUE .)
    GREATER         reduce using rule 47 (exp1 -> TRUE .)
    LESS_EQUAL      reduce using rule 47 (exp1 -> TRUE .)
    GREATER_EQUAL   reduce using rule 47 (exp1 -> TRUE .)
    PLUS            reduce using rule 47 (exp1 -> TRUE .)
    MINUS           reduce using rule 47 (exp1 -> TRUE .)
    TIMES           reduce using rule 47 (exp1 -> TRUE .)
    DIVIDE          reduce using rule 47 (exp1 -> TRUE .)
    MOD             reduce using rule 47 (exp1 -> TRUE .)
    DPLUS           reduce using rule 47 (exp1 -> TRUE .)
    DMINUS          reduce using rule 47 (exp1 -> TRUE .)
    SEMICOLON       reduce using rule 47 (exp1 -> TRUE .)
    COMMA           reduce using rule 47 (exp1 -> TRUE .)
    RCHAVES         reduce using rule 47 (exp1 -> TRUE .)
    ELSE            reduce using rule 47 (exp1 -> TRUE .)
    RPAREN          reduce using rule 47 (exp1 -> TRUE .)


state 49

    (48) exp1 -> FALSE .

    IF              reduce using rule 48 (exp1 -> FALSE .)
    VAR             reduce using rule 48 (exp1 -> FALSE .)
    FOR             reduce using rule 48 (exp1 -> FALSE .)
    RETURN          reduce using rule 48 (exp1 -> FALSE .)
    ASSIGN          reduce using rule 48 (exp1 -> FALSE .)
    COLONEQ         reduce using rule 48 (exp1 -> FALSE .)
    OR              reduce using rule 48 (exp1 -> FALSE .)
    AND             reduce using rule 48 (exp1 -> FALSE .)
    EQUALS          reduce using rule 48 (exp1 -> FALSE .)
    DIFFERENT       reduce using rule 48 (exp1 -> FALSE .)
    LESS            reduce using rule 48 (exp1 -> FALSE .)
    GREATER         reduce using rule 48 (exp1 -> FALSE .)
    LESS_EQUAL      reduce using rule 48 (exp1 -> FALSE .)
    GREATER_EQUAL   reduce using rule 48 (exp1 -> FALSE .)
    PLUS            reduce using rule 48 (exp1 -> FALSE .)
    MINUS           reduce using rule 48 (exp1 -> FALSE .)
    TIMES           reduce using rule 48 (exp1 -> FALSE .)
    DIVIDE          reduce using rule 48 (exp1 -> FALSE .)
    MOD             reduce using rule 48 (exp1 -> FALSE .)
    DPLUS           reduce using rule 48 (exp1 -> FALSE .)
    DMINUS          reduce using rule 48 (exp1 -> FALSE .)
    SEMICOLON       reduce using rule 48 (exp1 -> FALSE .)
    COMMA           reduce using rule 48 (exp1 -> FALSE .)
    RCHAVES         reduce using rule 48 (exp1 -> FALSE .)
    ELSE            reduce using rule 48 (exp1 -> FALSE .)
    RPAREN          reduce using rule 48 (exp1 -> FALSE .)


state 50

    (50) exp1 -> exp2 .
    (51) exp2 -> exp2 . DPLUS
    (52) exp2 -> exp2 . DMINUS

  ! shift/reduce conflict for DPLUS resolved as shift
  ! shift/reduce conflict for DMINUS resolved as shift
    IF              reduce using rule 50 (exp1 -> exp2 .)
    VAR             reduce using rule 50 (exp1 -> exp2 .)
    FOR             reduce using rule 50 (exp1 -> exp2 .)
    RETURN          reduce using rule 50 (exp1 -> exp2 .)
    ASSIGN          reduce using rule 50 (exp1 -> exp2 .)
    COLONEQ         reduce using rule 50 (exp1 -> exp2 .)
    OR              reduce using rule 50 (exp1 -> exp2 .)
    AND             reduce using rule 50 (exp1 -> exp2 .)
    EQUALS          reduce using rule 50 (exp1 -> exp2 .)
    DIFFERENT       reduce using rule 50 (exp1 -> exp2 .)
    LESS            reduce using rule 50 (exp1 -> exp2 .)
    GREATER         reduce using rule 50 (exp1 -> exp2 .)
    LESS_EQUAL      reduce using rule 50 (exp1 -> exp2 .)
    GREATER_EQUAL   reduce using rule 50 (exp1 -> exp2 .)
    PLUS            reduce using rule 50 (exp1 -> exp2 .)
    MINUS           reduce using rule 50 (exp1 -> exp2 .)
    TIMES           reduce using rule 50 (exp1 -> exp2 .)
    DIVIDE          reduce using rule 50 (exp1 -> exp2 .)
    MOD             reduce using rule 50 (exp1 -> exp2 .)
    SEMICOLON       reduce using rule 50 (exp1 -> exp2 .)
    COMMA           reduce using rule 50 (exp1 -> exp2 .)
    RCHAVES         reduce using rule 50 (exp1 -> exp2 .)
    ELSE            reduce using rule 50 (exp1 -> exp2 .)
    RPAREN          reduce using rule 50 (exp1 -> exp2 .)
    DPLUS           shift and go to state 71
    DMINUS          shift and go to state 72

  ! DPLUS           [ reduce using rule 50 (exp1 -> exp2 .) ]
  ! DMINUS          [ reduce using rule 50 (exp1 -> exp2 .) ]


state 51

    (53) exp2 -> NOT . exp2
    (51) exp2 -> . exp2 DPLUS
    (52) exp2 -> . exp2 DMINUS
    (53) exp2 -> . NOT exp2
    (54) exp2 -> . exp3
    (55) exp3 -> . exp3 TIMES exp4
    (56) exp3 -> . exp3 DIVIDE exp4
    (57) exp3 -> . exp3 MOD exp4
    (58) exp3 -> . exp4
    (59) exp4 -> . exp4 PLUS exp5
    (60) exp4 -> . exp4 MINUS exp5
    (61) exp4 -> . exp5
    (62) exp5 -> . exp5 LESS exp6
    (63) exp5 -> . exp5 GREATER exp6
    (64) exp5 -> . exp5 LESS_EQUAL exp6
    (65) exp5 -> . exp5 GREATER_EQUAL exp6
    (66) exp5 -> . exp6
    (67) exp6 -> . exp6 EQUALS exp7
    (68) exp6 -> . exp6 DIFFERENT exp7
    (69) exp6 -> . exp7
    (70) exp7 -> . exp7 AND exp8
    (71) exp7 -> . exp8
    (72) exp8 -> . exp8 OR exp9
    (73) exp8 -> . exp9
    (74) exp9 -> . exp9 ASSIGN exp1
    (75) exp9 -> . exp9 COLONEQ exp1
    (76) exp9 -> . exp1
    (44) exp1 -> . NUMBER
    (45) exp1 -> . STRING
    (46) exp1 -> . ID
    (47) exp1 -> . TRUE
    (48) exp1 -> . FALSE
    (49) exp1 -> . LPAREN exp RPAREN
    (50) exp1 -> . exp2

    NOT             shift and go to state 51
    NUMBER          shift and go to state 45
    STRING          shift and go to state 46
    ID              shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 62

    exp2                           shift and go to state 73
    exp3                           shift and go to state 52
    exp4                           shift and go to state 53
    exp5                           shift and go to state 54
    exp6                           shift and go to state 55
    exp7                           shift and go to state 56
    exp8                           shift and go to state 57
    exp9                           shift and go to state 58
    exp1                           shift and go to state 74

state 52

    (54) exp2 -> exp3 .
    (55) exp3 -> exp3 . TIMES exp4
    (56) exp3 -> exp3 . DIVIDE exp4
    (57) exp3 -> exp3 . MOD exp4

  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    IF              reduce using rule 54 (exp2 -> exp3 .)
    VAR             reduce using rule 54 (exp2 -> exp3 .)
    FOR             reduce using rule 54 (exp2 -> exp3 .)
    RETURN          reduce using rule 54 (exp2 -> exp3 .)
    ASSIGN          reduce using rule 54 (exp2 -> exp3 .)
    COLONEQ         reduce using rule 54 (exp2 -> exp3 .)
    OR              reduce using rule 54 (exp2 -> exp3 .)
    AND             reduce using rule 54 (exp2 -> exp3 .)
    EQUALS          reduce using rule 54 (exp2 -> exp3 .)
    DIFFERENT       reduce using rule 54 (exp2 -> exp3 .)
    LESS            reduce using rule 54 (exp2 -> exp3 .)
    GREATER         reduce using rule 54 (exp2 -> exp3 .)
    LESS_EQUAL      reduce using rule 54 (exp2 -> exp3 .)
    GREATER_EQUAL   reduce using rule 54 (exp2 -> exp3 .)
    PLUS            reduce using rule 54 (exp2 -> exp3 .)
    MINUS           reduce using rule 54 (exp2 -> exp3 .)
    DPLUS           reduce using rule 54 (exp2 -> exp3 .)
    DMINUS          reduce using rule 54 (exp2 -> exp3 .)
    SEMICOLON       reduce using rule 54 (exp2 -> exp3 .)
    COMMA           reduce using rule 54 (exp2 -> exp3 .)
    RCHAVES         reduce using rule 54 (exp2 -> exp3 .)
    ELSE            reduce using rule 54 (exp2 -> exp3 .)
    RPAREN          reduce using rule 54 (exp2 -> exp3 .)
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 76
    MOD             shift and go to state 77

  ! TIMES           [ reduce using rule 54 (exp2 -> exp3 .) ]
  ! DIVIDE          [ reduce using rule 54 (exp2 -> exp3 .) ]
  ! MOD             [ reduce using rule 54 (exp2 -> exp3 .) ]


state 53

    (58) exp3 -> exp4 .
    (59) exp4 -> exp4 . PLUS exp5
    (60) exp4 -> exp4 . MINUS exp5

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    IF              reduce using rule 58 (exp3 -> exp4 .)
    VAR             reduce using rule 58 (exp3 -> exp4 .)
    FOR             reduce using rule 58 (exp3 -> exp4 .)
    RETURN          reduce using rule 58 (exp3 -> exp4 .)
    ASSIGN          reduce using rule 58 (exp3 -> exp4 .)
    COLONEQ         reduce using rule 58 (exp3 -> exp4 .)
    OR              reduce using rule 58 (exp3 -> exp4 .)
    AND             reduce using rule 58 (exp3 -> exp4 .)
    EQUALS          reduce using rule 58 (exp3 -> exp4 .)
    DIFFERENT       reduce using rule 58 (exp3 -> exp4 .)
    LESS            reduce using rule 58 (exp3 -> exp4 .)
    GREATER         reduce using rule 58 (exp3 -> exp4 .)
    LESS_EQUAL      reduce using rule 58 (exp3 -> exp4 .)
    GREATER_EQUAL   reduce using rule 58 (exp3 -> exp4 .)
    TIMES           reduce using rule 58 (exp3 -> exp4 .)
    DIVIDE          reduce using rule 58 (exp3 -> exp4 .)
    MOD             reduce using rule 58 (exp3 -> exp4 .)
    DPLUS           reduce using rule 58 (exp3 -> exp4 .)
    DMINUS          reduce using rule 58 (exp3 -> exp4 .)
    SEMICOLON       reduce using rule 58 (exp3 -> exp4 .)
    COMMA           reduce using rule 58 (exp3 -> exp4 .)
    RCHAVES         reduce using rule 58 (exp3 -> exp4 .)
    ELSE            reduce using rule 58 (exp3 -> exp4 .)
    RPAREN          reduce using rule 58 (exp3 -> exp4 .)
    PLUS            shift and go to state 78
    MINUS           shift and go to state 79

  ! PLUS            [ reduce using rule 58 (exp3 -> exp4 .) ]
  ! MINUS           [ reduce using rule 58 (exp3 -> exp4 .) ]


state 54

    (61) exp4 -> exp5 .
    (62) exp5 -> exp5 . LESS exp6
    (63) exp5 -> exp5 . GREATER exp6
    (64) exp5 -> exp5 . LESS_EQUAL exp6
    (65) exp5 -> exp5 . GREATER_EQUAL exp6

  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
    IF              reduce using rule 61 (exp4 -> exp5 .)
    VAR             reduce using rule 61 (exp4 -> exp5 .)
    FOR             reduce using rule 61 (exp4 -> exp5 .)
    RETURN          reduce using rule 61 (exp4 -> exp5 .)
    ASSIGN          reduce using rule 61 (exp4 -> exp5 .)
    COLONEQ         reduce using rule 61 (exp4 -> exp5 .)
    OR              reduce using rule 61 (exp4 -> exp5 .)
    AND             reduce using rule 61 (exp4 -> exp5 .)
    EQUALS          reduce using rule 61 (exp4 -> exp5 .)
    DIFFERENT       reduce using rule 61 (exp4 -> exp5 .)
    PLUS            reduce using rule 61 (exp4 -> exp5 .)
    MINUS           reduce using rule 61 (exp4 -> exp5 .)
    TIMES           reduce using rule 61 (exp4 -> exp5 .)
    DIVIDE          reduce using rule 61 (exp4 -> exp5 .)
    MOD             reduce using rule 61 (exp4 -> exp5 .)
    DPLUS           reduce using rule 61 (exp4 -> exp5 .)
    DMINUS          reduce using rule 61 (exp4 -> exp5 .)
    SEMICOLON       reduce using rule 61 (exp4 -> exp5 .)
    COMMA           reduce using rule 61 (exp4 -> exp5 .)
    RCHAVES         reduce using rule 61 (exp4 -> exp5 .)
    ELSE            reduce using rule 61 (exp4 -> exp5 .)
    RPAREN          reduce using rule 61 (exp4 -> exp5 .)
    LESS            shift and go to state 80
    GREATER         shift and go to state 81
    LESS_EQUAL      shift and go to state 82
    GREATER_EQUAL   shift and go to state 83

  ! LESS            [ reduce using rule 61 (exp4 -> exp5 .) ]
  ! GREATER         [ reduce using rule 61 (exp4 -> exp5 .) ]
  ! LESS_EQUAL      [ reduce using rule 61 (exp4 -> exp5 .) ]
  ! GREATER_EQUAL   [ reduce using rule 61 (exp4 -> exp5 .) ]


state 55

    (66) exp5 -> exp6 .
    (67) exp6 -> exp6 . EQUALS exp7
    (68) exp6 -> exp6 . DIFFERENT exp7

  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for DIFFERENT resolved as shift
    IF              reduce using rule 66 (exp5 -> exp6 .)
    VAR             reduce using rule 66 (exp5 -> exp6 .)
    FOR             reduce using rule 66 (exp5 -> exp6 .)
    RETURN          reduce using rule 66 (exp5 -> exp6 .)
    ASSIGN          reduce using rule 66 (exp5 -> exp6 .)
    COLONEQ         reduce using rule 66 (exp5 -> exp6 .)
    OR              reduce using rule 66 (exp5 -> exp6 .)
    AND             reduce using rule 66 (exp5 -> exp6 .)
    LESS            reduce using rule 66 (exp5 -> exp6 .)
    GREATER         reduce using rule 66 (exp5 -> exp6 .)
    LESS_EQUAL      reduce using rule 66 (exp5 -> exp6 .)
    GREATER_EQUAL   reduce using rule 66 (exp5 -> exp6 .)
    PLUS            reduce using rule 66 (exp5 -> exp6 .)
    MINUS           reduce using rule 66 (exp5 -> exp6 .)
    TIMES           reduce using rule 66 (exp5 -> exp6 .)
    DIVIDE          reduce using rule 66 (exp5 -> exp6 .)
    MOD             reduce using rule 66 (exp5 -> exp6 .)
    DPLUS           reduce using rule 66 (exp5 -> exp6 .)
    DMINUS          reduce using rule 66 (exp5 -> exp6 .)
    SEMICOLON       reduce using rule 66 (exp5 -> exp6 .)
    COMMA           reduce using rule 66 (exp5 -> exp6 .)
    RCHAVES         reduce using rule 66 (exp5 -> exp6 .)
    ELSE            reduce using rule 66 (exp5 -> exp6 .)
    RPAREN          reduce using rule 66 (exp5 -> exp6 .)
    EQUALS          shift and go to state 84
    DIFFERENT       shift and go to state 85

  ! EQUALS          [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! DIFFERENT       [ reduce using rule 66 (exp5 -> exp6 .) ]


state 56

    (69) exp6 -> exp7 .
    (70) exp7 -> exp7 . AND exp8

  ! shift/reduce conflict for AND resolved as shift
    IF              reduce using rule 69 (exp6 -> exp7 .)
    VAR             reduce using rule 69 (exp6 -> exp7 .)
    FOR             reduce using rule 69 (exp6 -> exp7 .)
    RETURN          reduce using rule 69 (exp6 -> exp7 .)
    ASSIGN          reduce using rule 69 (exp6 -> exp7 .)
    COLONEQ         reduce using rule 69 (exp6 -> exp7 .)
    OR              reduce using rule 69 (exp6 -> exp7 .)
    EQUALS          reduce using rule 69 (exp6 -> exp7 .)
    DIFFERENT       reduce using rule 69 (exp6 -> exp7 .)
    LESS            reduce using rule 69 (exp6 -> exp7 .)
    GREATER         reduce using rule 69 (exp6 -> exp7 .)
    LESS_EQUAL      reduce using rule 69 (exp6 -> exp7 .)
    GREATER_EQUAL   reduce using rule 69 (exp6 -> exp7 .)
    PLUS            reduce using rule 69 (exp6 -> exp7 .)
    MINUS           reduce using rule 69 (exp6 -> exp7 .)
    TIMES           reduce using rule 69 (exp6 -> exp7 .)
    DIVIDE          reduce using rule 69 (exp6 -> exp7 .)
    MOD             reduce using rule 69 (exp6 -> exp7 .)
    DPLUS           reduce using rule 69 (exp6 -> exp7 .)
    DMINUS          reduce using rule 69 (exp6 -> exp7 .)
    SEMICOLON       reduce using rule 69 (exp6 -> exp7 .)
    COMMA           reduce using rule 69 (exp6 -> exp7 .)
    RCHAVES         reduce using rule 69 (exp6 -> exp7 .)
    ELSE            reduce using rule 69 (exp6 -> exp7 .)
    RPAREN          reduce using rule 69 (exp6 -> exp7 .)
    AND             shift and go to state 86

  ! AND             [ reduce using rule 69 (exp6 -> exp7 .) ]


state 57

    (71) exp7 -> exp8 .
    (72) exp8 -> exp8 . OR exp9

  ! shift/reduce conflict for OR resolved as shift
    IF              reduce using rule 71 (exp7 -> exp8 .)
    VAR             reduce using rule 71 (exp7 -> exp8 .)
    FOR             reduce using rule 71 (exp7 -> exp8 .)
    RETURN          reduce using rule 71 (exp7 -> exp8 .)
    ASSIGN          reduce using rule 71 (exp7 -> exp8 .)
    COLONEQ         reduce using rule 71 (exp7 -> exp8 .)
    AND             reduce using rule 71 (exp7 -> exp8 .)
    EQUALS          reduce using rule 71 (exp7 -> exp8 .)
    DIFFERENT       reduce using rule 71 (exp7 -> exp8 .)
    LESS            reduce using rule 71 (exp7 -> exp8 .)
    GREATER         reduce using rule 71 (exp7 -> exp8 .)
    LESS_EQUAL      reduce using rule 71 (exp7 -> exp8 .)
    GREATER_EQUAL   reduce using rule 71 (exp7 -> exp8 .)
    PLUS            reduce using rule 71 (exp7 -> exp8 .)
    MINUS           reduce using rule 71 (exp7 -> exp8 .)
    TIMES           reduce using rule 71 (exp7 -> exp8 .)
    DIVIDE          reduce using rule 71 (exp7 -> exp8 .)
    MOD             reduce using rule 71 (exp7 -> exp8 .)
    DPLUS           reduce using rule 71 (exp7 -> exp8 .)
    DMINUS          reduce using rule 71 (exp7 -> exp8 .)
    SEMICOLON       reduce using rule 71 (exp7 -> exp8 .)
    COMMA           reduce using rule 71 (exp7 -> exp8 .)
    RCHAVES         reduce using rule 71 (exp7 -> exp8 .)
    ELSE            reduce using rule 71 (exp7 -> exp8 .)
    RPAREN          reduce using rule 71 (exp7 -> exp8 .)
    OR              shift and go to state 87

  ! OR              [ reduce using rule 71 (exp7 -> exp8 .) ]


state 58

    (73) exp8 -> exp9 .
    (74) exp9 -> exp9 . ASSIGN exp1
    (75) exp9 -> exp9 . COLONEQ exp1

  ! shift/reduce conflict for ASSIGN resolved as shift
  ! shift/reduce conflict for COLONEQ resolved as shift
    IF              reduce using rule 73 (exp8 -> exp9 .)
    VAR             reduce using rule 73 (exp8 -> exp9 .)
    FOR             reduce using rule 73 (exp8 -> exp9 .)
    RETURN          reduce using rule 73 (exp8 -> exp9 .)
    OR              reduce using rule 73 (exp8 -> exp9 .)
    AND             reduce using rule 73 (exp8 -> exp9 .)
    EQUALS          reduce using rule 73 (exp8 -> exp9 .)
    DIFFERENT       reduce using rule 73 (exp8 -> exp9 .)
    LESS            reduce using rule 73 (exp8 -> exp9 .)
    GREATER         reduce using rule 73 (exp8 -> exp9 .)
    LESS_EQUAL      reduce using rule 73 (exp8 -> exp9 .)
    GREATER_EQUAL   reduce using rule 73 (exp8 -> exp9 .)
    PLUS            reduce using rule 73 (exp8 -> exp9 .)
    MINUS           reduce using rule 73 (exp8 -> exp9 .)
    TIMES           reduce using rule 73 (exp8 -> exp9 .)
    DIVIDE          reduce using rule 73 (exp8 -> exp9 .)
    MOD             reduce using rule 73 (exp8 -> exp9 .)
    DPLUS           reduce using rule 73 (exp8 -> exp9 .)
    DMINUS          reduce using rule 73 (exp8 -> exp9 .)
    SEMICOLON       reduce using rule 73 (exp8 -> exp9 .)
    COMMA           reduce using rule 73 (exp8 -> exp9 .)
    RCHAVES         reduce using rule 73 (exp8 -> exp9 .)
    ELSE            reduce using rule 73 (exp8 -> exp9 .)
    RPAREN          reduce using rule 73 (exp8 -> exp9 .)
    ASSIGN          shift and go to state 88
    COLONEQ         shift and go to state 89

  ! ASSIGN          [ reduce using rule 73 (exp8 -> exp9 .) ]
  ! COLONEQ         [ reduce using rule 73 (exp8 -> exp9 .) ]


state 59

    (37) declaration -> VAR ID . type
    (38) declaration -> VAR ID . type ASSIGN exp
    (39) declaration -> VAR ID . type COLONEQ exp
    (40) type -> . INT
    (41) type -> . STRING
    (42) type -> . BOOL

    INT             shift and go to state 36
    STRING          shift and go to state 37
    BOOL            shift and go to state 38

    type                           shift and go to state 90

state 60

    (33) for -> FOR exp .
    (34) for -> FOR exp . SEMICOLON exp SEMICOLON exp
    (36) for -> FOR exp . COMMA exp ASSIGN RANGE exp

    IF              reduce using rule 33 (for -> FOR exp .)
    VAR             reduce using rule 33 (for -> FOR exp .)
    FOR             reduce using rule 33 (for -> FOR exp .)
    RETURN          reduce using rule 33 (for -> FOR exp .)
    RCHAVES         reduce using rule 33 (for -> FOR exp .)
    ELSE            reduce using rule 33 (for -> FOR exp .)
    SEMICOLON       shift and go to state 91
    COMMA           shift and go to state 92


state 61

    (35) for -> FOR RANGE . exp
    (43) exp -> . exp1
    (44) exp1 -> . NUMBER
    (45) exp1 -> . STRING
    (46) exp1 -> . ID
    (47) exp1 -> . TRUE
    (48) exp1 -> . FALSE
    (49) exp1 -> . LPAREN exp RPAREN
    (50) exp1 -> . exp2
    (51) exp2 -> . exp2 DPLUS
    (52) exp2 -> . exp2 DMINUS
    (53) exp2 -> . NOT exp2
    (54) exp2 -> . exp3
    (55) exp3 -> . exp3 TIMES exp4
    (56) exp3 -> . exp3 DIVIDE exp4
    (57) exp3 -> . exp3 MOD exp4
    (58) exp3 -> . exp4
    (59) exp4 -> . exp4 PLUS exp5
    (60) exp4 -> . exp4 MINUS exp5
    (61) exp4 -> . exp5
    (62) exp5 -> . exp5 LESS exp6
    (63) exp5 -> . exp5 GREATER exp6
    (64) exp5 -> . exp5 LESS_EQUAL exp6
    (65) exp5 -> . exp5 GREATER_EQUAL exp6
    (66) exp5 -> . exp6
    (67) exp6 -> . exp6 EQUALS exp7
    (68) exp6 -> . exp6 DIFFERENT exp7
    (69) exp6 -> . exp7
    (70) exp7 -> . exp7 AND exp8
    (71) exp7 -> . exp8
    (72) exp8 -> . exp8 OR exp9
    (73) exp8 -> . exp9
    (74) exp9 -> . exp9 ASSIGN exp1
    (75) exp9 -> . exp9 COLONEQ exp1
    (76) exp9 -> . exp1

    NUMBER          shift and go to state 45
    STRING          shift and go to state 46
    ID              shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 62
    NOT             shift and go to state 51

    exp                            shift and go to state 93
    exp1                           shift and go to state 44
    exp2                           shift and go to state 50
    exp3                           shift and go to state 52
    exp4                           shift and go to state 53
    exp5                           shift and go to state 54
    exp6                           shift and go to state 55
    exp7                           shift and go to state 56
    exp8                           shift and go to state 57
    exp9                           shift and go to state 58

state 62

    (49) exp1 -> LPAREN . exp RPAREN
    (43) exp -> . exp1
    (44) exp1 -> . NUMBER
    (45) exp1 -> . STRING
    (46) exp1 -> . ID
    (47) exp1 -> . TRUE
    (48) exp1 -> . FALSE
    (49) exp1 -> . LPAREN exp RPAREN
    (50) exp1 -> . exp2
    (51) exp2 -> . exp2 DPLUS
    (52) exp2 -> . exp2 DMINUS
    (53) exp2 -> . NOT exp2
    (54) exp2 -> . exp3
    (55) exp3 -> . exp3 TIMES exp4
    (56) exp3 -> . exp3 DIVIDE exp4
    (57) exp3 -> . exp3 MOD exp4
    (58) exp3 -> . exp4
    (59) exp4 -> . exp4 PLUS exp5
    (60) exp4 -> . exp4 MINUS exp5
    (61) exp4 -> . exp5
    (62) exp5 -> . exp5 LESS exp6
    (63) exp5 -> . exp5 GREATER exp6
    (64) exp5 -> . exp5 LESS_EQUAL exp6
    (65) exp5 -> . exp5 GREATER_EQUAL exp6
    (66) exp5 -> . exp6
    (67) exp6 -> . exp6 EQUALS exp7
    (68) exp6 -> . exp6 DIFFERENT exp7
    (69) exp6 -> . exp7
    (70) exp7 -> . exp7 AND exp8
    (71) exp7 -> . exp8
    (72) exp8 -> . exp8 OR exp9
    (73) exp8 -> . exp9
    (74) exp9 -> . exp9 ASSIGN exp1
    (75) exp9 -> . exp9 COLONEQ exp1
    (76) exp9 -> . exp1

    NUMBER          shift and go to state 45
    STRING          shift and go to state 46
    ID              shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 62
    NOT             shift and go to state 51

    exp                            shift and go to state 94
    exp1                           shift and go to state 44
    exp2                           shift and go to state 50
    exp3                           shift and go to state 52
    exp4                           shift and go to state 53
    exp5                           shift and go to state 54
    exp6                           shift and go to state 55
    exp7                           shift and go to state 56
    exp8                           shift and go to state 57
    exp9                           shift and go to state 58

state 63

    (77) return -> RETURN exp .

    IF              reduce using rule 77 (return -> RETURN exp .)
    VAR             reduce using rule 77 (return -> RETURN exp .)
    FOR             reduce using rule 77 (return -> RETURN exp .)
    RETURN          reduce using rule 77 (return -> RETURN exp .)
    RCHAVES         reduce using rule 77 (return -> RETURN exp .)
    ELSE            reduce using rule 77 (return -> RETURN exp .)


state 64

    (8) signature -> LPAREN sigparams RPAREN funcreturn .

    LCHAVES         reduce using rule 8 (signature -> LPAREN sigparams RPAREN funcreturn .)


state 65

    (14) funcreturn -> LPAREN type . RPAREN

    RPAREN          shift and go to state 95


state 66

    (12) sigparams -> ID type COMMA . sigparams
    (11) sigparams -> . ID type
    (12) sigparams -> . ID type COMMA sigparams

    ID              shift and go to state 19

    sigparams                      shift and go to state 96

state 67

    (21) statement1 -> IF LPAREN exp . RPAREN statement1 ELSE statement1
    (28) statement2 -> IF LPAREN exp . RPAREN statement
    (31) statement2 -> IF LPAREN exp . RPAREN statement1 ELSE statement2
    (49) exp1 -> LPAREN exp . RPAREN

    RPAREN          shift and go to state 97


state 68

    (22) statement1 -> IF exp statement1 . ELSE statement1
    (30) statement2 -> IF exp statement1 . ELSE statement2
    (25) statement1 -> statement1 .
    (19) statement -> statement1 .

  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! reduce/reduce conflict for IF resolved using rule 19 (statement -> statement1 .)
  ! reduce/reduce conflict for VAR resolved using rule 19 (statement -> statement1 .)
  ! reduce/reduce conflict for FOR resolved using rule 19 (statement -> statement1 .)
  ! reduce/reduce conflict for RETURN resolved using rule 19 (statement -> statement1 .)
  ! reduce/reduce conflict for RCHAVES resolved using rule 19 (statement -> statement1 .)
    ELSE            shift and go to state 98
    IF              reduce using rule 19 (statement -> statement1 .)
    VAR             reduce using rule 19 (statement -> statement1 .)
    FOR             reduce using rule 19 (statement -> statement1 .)
    RETURN          reduce using rule 19 (statement -> statement1 .)
    RCHAVES         reduce using rule 19 (statement -> statement1 .)

  ! ELSE            [ reduce using rule 25 (statement1 -> statement1 .) ]
  ! IF              [ reduce using rule 25 (statement1 -> statement1 .) ]
  ! VAR             [ reduce using rule 25 (statement1 -> statement1 .) ]
  ! FOR             [ reduce using rule 25 (statement1 -> statement1 .) ]
  ! RETURN          [ reduce using rule 25 (statement1 -> statement1 .) ]
  ! RCHAVES         [ reduce using rule 25 (statement1 -> statement1 .) ]
  ! ELSE            [ reduce using rule 19 (statement -> statement1 .) ]


state 69

    (29) statement2 -> IF exp statement .

    IF              reduce using rule 29 (statement2 -> IF exp statement .)
    VAR             reduce using rule 29 (statement2 -> IF exp statement .)
    FOR             reduce using rule 29 (statement2 -> IF exp statement .)
    RETURN          reduce using rule 29 (statement2 -> IF exp statement .)
    RCHAVES         reduce using rule 29 (statement2 -> IF exp statement .)
    ELSE            reduce using rule 29 (statement2 -> IF exp statement .)


state 70

    (26) statement1 -> statement2 .
    (20) statement -> statement2 .

  ! reduce/reduce conflict for ELSE resolved using rule 20 (statement -> statement2 .)
  ! reduce/reduce conflict for IF resolved using rule 20 (statement -> statement2 .)
  ! reduce/reduce conflict for VAR resolved using rule 20 (statement -> statement2 .)
  ! reduce/reduce conflict for FOR resolved using rule 20 (statement -> statement2 .)
  ! reduce/reduce conflict for RETURN resolved using rule 20 (statement -> statement2 .)
  ! reduce/reduce conflict for RCHAVES resolved using rule 20 (statement -> statement2 .)
    ELSE            reduce using rule 20 (statement -> statement2 .)
    IF              reduce using rule 20 (statement -> statement2 .)
    VAR             reduce using rule 20 (statement -> statement2 .)
    FOR             reduce using rule 20 (statement -> statement2 .)
    RETURN          reduce using rule 20 (statement -> statement2 .)
    RCHAVES         reduce using rule 20 (statement -> statement2 .)

  ! ELSE            [ reduce using rule 26 (statement1 -> statement2 .) ]
  ! IF              [ reduce using rule 26 (statement1 -> statement2 .) ]
  ! VAR             [ reduce using rule 26 (statement1 -> statement2 .) ]
  ! FOR             [ reduce using rule 26 (statement1 -> statement2 .) ]
  ! RETURN          [ reduce using rule 26 (statement1 -> statement2 .) ]
  ! RCHAVES         [ reduce using rule 26 (statement1 -> statement2 .) ]


state 71

    (51) exp2 -> exp2 DPLUS .

    IF              reduce using rule 51 (exp2 -> exp2 DPLUS .)
    VAR             reduce using rule 51 (exp2 -> exp2 DPLUS .)
    FOR             reduce using rule 51 (exp2 -> exp2 DPLUS .)
    RETURN          reduce using rule 51 (exp2 -> exp2 DPLUS .)
    ASSIGN          reduce using rule 51 (exp2 -> exp2 DPLUS .)
    COLONEQ         reduce using rule 51 (exp2 -> exp2 DPLUS .)
    OR              reduce using rule 51 (exp2 -> exp2 DPLUS .)
    AND             reduce using rule 51 (exp2 -> exp2 DPLUS .)
    EQUALS          reduce using rule 51 (exp2 -> exp2 DPLUS .)
    DIFFERENT       reduce using rule 51 (exp2 -> exp2 DPLUS .)
    LESS            reduce using rule 51 (exp2 -> exp2 DPLUS .)
    GREATER         reduce using rule 51 (exp2 -> exp2 DPLUS .)
    LESS_EQUAL      reduce using rule 51 (exp2 -> exp2 DPLUS .)
    GREATER_EQUAL   reduce using rule 51 (exp2 -> exp2 DPLUS .)
    PLUS            reduce using rule 51 (exp2 -> exp2 DPLUS .)
    MINUS           reduce using rule 51 (exp2 -> exp2 DPLUS .)
    TIMES           reduce using rule 51 (exp2 -> exp2 DPLUS .)
    DIVIDE          reduce using rule 51 (exp2 -> exp2 DPLUS .)
    MOD             reduce using rule 51 (exp2 -> exp2 DPLUS .)
    DPLUS           reduce using rule 51 (exp2 -> exp2 DPLUS .)
    DMINUS          reduce using rule 51 (exp2 -> exp2 DPLUS .)
    SEMICOLON       reduce using rule 51 (exp2 -> exp2 DPLUS .)
    COMMA           reduce using rule 51 (exp2 -> exp2 DPLUS .)
    RCHAVES         reduce using rule 51 (exp2 -> exp2 DPLUS .)
    ELSE            reduce using rule 51 (exp2 -> exp2 DPLUS .)
    RPAREN          reduce using rule 51 (exp2 -> exp2 DPLUS .)


state 72

    (52) exp2 -> exp2 DMINUS .

    IF              reduce using rule 52 (exp2 -> exp2 DMINUS .)
    VAR             reduce using rule 52 (exp2 -> exp2 DMINUS .)
    FOR             reduce using rule 52 (exp2 -> exp2 DMINUS .)
    RETURN          reduce using rule 52 (exp2 -> exp2 DMINUS .)
    ASSIGN          reduce using rule 52 (exp2 -> exp2 DMINUS .)
    COLONEQ         reduce using rule 52 (exp2 -> exp2 DMINUS .)
    OR              reduce using rule 52 (exp2 -> exp2 DMINUS .)
    AND             reduce using rule 52 (exp2 -> exp2 DMINUS .)
    EQUALS          reduce using rule 52 (exp2 -> exp2 DMINUS .)
    DIFFERENT       reduce using rule 52 (exp2 -> exp2 DMINUS .)
    LESS            reduce using rule 52 (exp2 -> exp2 DMINUS .)
    GREATER         reduce using rule 52 (exp2 -> exp2 DMINUS .)
    LESS_EQUAL      reduce using rule 52 (exp2 -> exp2 DMINUS .)
    GREATER_EQUAL   reduce using rule 52 (exp2 -> exp2 DMINUS .)
    PLUS            reduce using rule 52 (exp2 -> exp2 DMINUS .)
    MINUS           reduce using rule 52 (exp2 -> exp2 DMINUS .)
    TIMES           reduce using rule 52 (exp2 -> exp2 DMINUS .)
    DIVIDE          reduce using rule 52 (exp2 -> exp2 DMINUS .)
    MOD             reduce using rule 52 (exp2 -> exp2 DMINUS .)
    DPLUS           reduce using rule 52 (exp2 -> exp2 DMINUS .)
    DMINUS          reduce using rule 52 (exp2 -> exp2 DMINUS .)
    SEMICOLON       reduce using rule 52 (exp2 -> exp2 DMINUS .)
    COMMA           reduce using rule 52 (exp2 -> exp2 DMINUS .)
    RCHAVES         reduce using rule 52 (exp2 -> exp2 DMINUS .)
    ELSE            reduce using rule 52 (exp2 -> exp2 DMINUS .)
    RPAREN          reduce using rule 52 (exp2 -> exp2 DMINUS .)


state 73

    (53) exp2 -> NOT exp2 .
    (51) exp2 -> exp2 . DPLUS
    (52) exp2 -> exp2 . DMINUS
    (50) exp1 -> exp2 .

  ! shift/reduce conflict for DPLUS resolved as shift
  ! shift/reduce conflict for DMINUS resolved as shift
  ! shift/reduce conflict for DPLUS resolved as shift
  ! shift/reduce conflict for DMINUS resolved as shift
  ! reduce/reduce conflict for IF resolved using rule 50 (exp1 -> exp2 .)
  ! reduce/reduce conflict for VAR resolved using rule 50 (exp1 -> exp2 .)
  ! reduce/reduce conflict for FOR resolved using rule 50 (exp1 -> exp2 .)
  ! reduce/reduce conflict for RETURN resolved using rule 50 (exp1 -> exp2 .)
  ! reduce/reduce conflict for ASSIGN resolved using rule 50 (exp1 -> exp2 .)
  ! reduce/reduce conflict for COLONEQ resolved using rule 50 (exp1 -> exp2 .)
  ! reduce/reduce conflict for OR resolved using rule 50 (exp1 -> exp2 .)
  ! reduce/reduce conflict for AND resolved using rule 50 (exp1 -> exp2 .)
  ! reduce/reduce conflict for EQUALS resolved using rule 50 (exp1 -> exp2 .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 50 (exp1 -> exp2 .)
  ! reduce/reduce conflict for LESS resolved using rule 50 (exp1 -> exp2 .)
  ! reduce/reduce conflict for GREATER resolved using rule 50 (exp1 -> exp2 .)
  ! reduce/reduce conflict for LESS_EQUAL resolved using rule 50 (exp1 -> exp2 .)
  ! reduce/reduce conflict for GREATER_EQUAL resolved using rule 50 (exp1 -> exp2 .)
  ! reduce/reduce conflict for PLUS resolved using rule 50 (exp1 -> exp2 .)
  ! reduce/reduce conflict for MINUS resolved using rule 50 (exp1 -> exp2 .)
  ! reduce/reduce conflict for TIMES resolved using rule 50 (exp1 -> exp2 .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 50 (exp1 -> exp2 .)
  ! reduce/reduce conflict for MOD resolved using rule 50 (exp1 -> exp2 .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 50 (exp1 -> exp2 .)
  ! reduce/reduce conflict for COMMA resolved using rule 50 (exp1 -> exp2 .)
  ! reduce/reduce conflict for RCHAVES resolved using rule 50 (exp1 -> exp2 .)
  ! reduce/reduce conflict for ELSE resolved using rule 50 (exp1 -> exp2 .)
  ! reduce/reduce conflict for RPAREN resolved using rule 50 (exp1 -> exp2 .)
    DPLUS           shift and go to state 71
    DMINUS          shift and go to state 72
    IF              reduce using rule 50 (exp1 -> exp2 .)
    VAR             reduce using rule 50 (exp1 -> exp2 .)
    FOR             reduce using rule 50 (exp1 -> exp2 .)
    RETURN          reduce using rule 50 (exp1 -> exp2 .)
    ASSIGN          reduce using rule 50 (exp1 -> exp2 .)
    COLONEQ         reduce using rule 50 (exp1 -> exp2 .)
    OR              reduce using rule 50 (exp1 -> exp2 .)
    AND             reduce using rule 50 (exp1 -> exp2 .)
    EQUALS          reduce using rule 50 (exp1 -> exp2 .)
    DIFFERENT       reduce using rule 50 (exp1 -> exp2 .)
    LESS            reduce using rule 50 (exp1 -> exp2 .)
    GREATER         reduce using rule 50 (exp1 -> exp2 .)
    LESS_EQUAL      reduce using rule 50 (exp1 -> exp2 .)
    GREATER_EQUAL   reduce using rule 50 (exp1 -> exp2 .)
    PLUS            reduce using rule 50 (exp1 -> exp2 .)
    MINUS           reduce using rule 50 (exp1 -> exp2 .)
    TIMES           reduce using rule 50 (exp1 -> exp2 .)
    DIVIDE          reduce using rule 50 (exp1 -> exp2 .)
    MOD             reduce using rule 50 (exp1 -> exp2 .)
    SEMICOLON       reduce using rule 50 (exp1 -> exp2 .)
    COMMA           reduce using rule 50 (exp1 -> exp2 .)
    RCHAVES         reduce using rule 50 (exp1 -> exp2 .)
    ELSE            reduce using rule 50 (exp1 -> exp2 .)
    RPAREN          reduce using rule 50 (exp1 -> exp2 .)

  ! IF              [ reduce using rule 53 (exp2 -> NOT exp2 .) ]
  ! VAR             [ reduce using rule 53 (exp2 -> NOT exp2 .) ]
  ! FOR             [ reduce using rule 53 (exp2 -> NOT exp2 .) ]
  ! RETURN          [ reduce using rule 53 (exp2 -> NOT exp2 .) ]
  ! ASSIGN          [ reduce using rule 53 (exp2 -> NOT exp2 .) ]
  ! COLONEQ         [ reduce using rule 53 (exp2 -> NOT exp2 .) ]
  ! OR              [ reduce using rule 53 (exp2 -> NOT exp2 .) ]
  ! AND             [ reduce using rule 53 (exp2 -> NOT exp2 .) ]
  ! EQUALS          [ reduce using rule 53 (exp2 -> NOT exp2 .) ]
  ! DIFFERENT       [ reduce using rule 53 (exp2 -> NOT exp2 .) ]
  ! LESS            [ reduce using rule 53 (exp2 -> NOT exp2 .) ]
  ! GREATER         [ reduce using rule 53 (exp2 -> NOT exp2 .) ]
  ! LESS_EQUAL      [ reduce using rule 53 (exp2 -> NOT exp2 .) ]
  ! GREATER_EQUAL   [ reduce using rule 53 (exp2 -> NOT exp2 .) ]
  ! PLUS            [ reduce using rule 53 (exp2 -> NOT exp2 .) ]
  ! MINUS           [ reduce using rule 53 (exp2 -> NOT exp2 .) ]
  ! TIMES           [ reduce using rule 53 (exp2 -> NOT exp2 .) ]
  ! DIVIDE          [ reduce using rule 53 (exp2 -> NOT exp2 .) ]
  ! MOD             [ reduce using rule 53 (exp2 -> NOT exp2 .) ]
  ! DPLUS           [ reduce using rule 53 (exp2 -> NOT exp2 .) ]
  ! DMINUS          [ reduce using rule 53 (exp2 -> NOT exp2 .) ]
  ! SEMICOLON       [ reduce using rule 53 (exp2 -> NOT exp2 .) ]
  ! COMMA           [ reduce using rule 53 (exp2 -> NOT exp2 .) ]
  ! RCHAVES         [ reduce using rule 53 (exp2 -> NOT exp2 .) ]
  ! ELSE            [ reduce using rule 53 (exp2 -> NOT exp2 .) ]
  ! RPAREN          [ reduce using rule 53 (exp2 -> NOT exp2 .) ]
  ! DPLUS           [ reduce using rule 50 (exp1 -> exp2 .) ]
  ! DMINUS          [ reduce using rule 50 (exp1 -> exp2 .) ]


state 74

    (76) exp9 -> exp1 .

    DPLUS           reduce using rule 76 (exp9 -> exp1 .)
    DMINUS          reduce using rule 76 (exp9 -> exp1 .)
    IF              reduce using rule 76 (exp9 -> exp1 .)
    VAR             reduce using rule 76 (exp9 -> exp1 .)
    FOR             reduce using rule 76 (exp9 -> exp1 .)
    RETURN          reduce using rule 76 (exp9 -> exp1 .)
    ASSIGN          reduce using rule 76 (exp9 -> exp1 .)
    COLONEQ         reduce using rule 76 (exp9 -> exp1 .)
    OR              reduce using rule 76 (exp9 -> exp1 .)
    AND             reduce using rule 76 (exp9 -> exp1 .)
    EQUALS          reduce using rule 76 (exp9 -> exp1 .)
    DIFFERENT       reduce using rule 76 (exp9 -> exp1 .)
    LESS            reduce using rule 76 (exp9 -> exp1 .)
    GREATER         reduce using rule 76 (exp9 -> exp1 .)
    LESS_EQUAL      reduce using rule 76 (exp9 -> exp1 .)
    GREATER_EQUAL   reduce using rule 76 (exp9 -> exp1 .)
    PLUS            reduce using rule 76 (exp9 -> exp1 .)
    MINUS           reduce using rule 76 (exp9 -> exp1 .)
    TIMES           reduce using rule 76 (exp9 -> exp1 .)
    DIVIDE          reduce using rule 76 (exp9 -> exp1 .)
    MOD             reduce using rule 76 (exp9 -> exp1 .)
    SEMICOLON       reduce using rule 76 (exp9 -> exp1 .)
    COMMA           reduce using rule 76 (exp9 -> exp1 .)
    RCHAVES         reduce using rule 76 (exp9 -> exp1 .)
    ELSE            reduce using rule 76 (exp9 -> exp1 .)
    RPAREN          reduce using rule 76 (exp9 -> exp1 .)


state 75

    (55) exp3 -> exp3 TIMES . exp4
    (59) exp4 -> . exp4 PLUS exp5
    (60) exp4 -> . exp4 MINUS exp5
    (61) exp4 -> . exp5
    (62) exp5 -> . exp5 LESS exp6
    (63) exp5 -> . exp5 GREATER exp6
    (64) exp5 -> . exp5 LESS_EQUAL exp6
    (65) exp5 -> . exp5 GREATER_EQUAL exp6
    (66) exp5 -> . exp6
    (67) exp6 -> . exp6 EQUALS exp7
    (68) exp6 -> . exp6 DIFFERENT exp7
    (69) exp6 -> . exp7
    (70) exp7 -> . exp7 AND exp8
    (71) exp7 -> . exp8
    (72) exp8 -> . exp8 OR exp9
    (73) exp8 -> . exp9
    (74) exp9 -> . exp9 ASSIGN exp1
    (75) exp9 -> . exp9 COLONEQ exp1
    (76) exp9 -> . exp1
    (44) exp1 -> . NUMBER
    (45) exp1 -> . STRING
    (46) exp1 -> . ID
    (47) exp1 -> . TRUE
    (48) exp1 -> . FALSE
    (49) exp1 -> . LPAREN exp RPAREN
    (50) exp1 -> . exp2
    (51) exp2 -> . exp2 DPLUS
    (52) exp2 -> . exp2 DMINUS
    (53) exp2 -> . NOT exp2
    (54) exp2 -> . exp3
    (55) exp3 -> . exp3 TIMES exp4
    (56) exp3 -> . exp3 DIVIDE exp4
    (57) exp3 -> . exp3 MOD exp4
    (58) exp3 -> . exp4

    NUMBER          shift and go to state 45
    STRING          shift and go to state 46
    ID              shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 62
    NOT             shift and go to state 51

    exp3                           shift and go to state 52
    exp4                           shift and go to state 99
    exp5                           shift and go to state 54
    exp6                           shift and go to state 55
    exp7                           shift and go to state 56
    exp8                           shift and go to state 57
    exp9                           shift and go to state 58
    exp1                           shift and go to state 74
    exp2                           shift and go to state 50

state 76

    (56) exp3 -> exp3 DIVIDE . exp4
    (59) exp4 -> . exp4 PLUS exp5
    (60) exp4 -> . exp4 MINUS exp5
    (61) exp4 -> . exp5
    (62) exp5 -> . exp5 LESS exp6
    (63) exp5 -> . exp5 GREATER exp6
    (64) exp5 -> . exp5 LESS_EQUAL exp6
    (65) exp5 -> . exp5 GREATER_EQUAL exp6
    (66) exp5 -> . exp6
    (67) exp6 -> . exp6 EQUALS exp7
    (68) exp6 -> . exp6 DIFFERENT exp7
    (69) exp6 -> . exp7
    (70) exp7 -> . exp7 AND exp8
    (71) exp7 -> . exp8
    (72) exp8 -> . exp8 OR exp9
    (73) exp8 -> . exp9
    (74) exp9 -> . exp9 ASSIGN exp1
    (75) exp9 -> . exp9 COLONEQ exp1
    (76) exp9 -> . exp1
    (44) exp1 -> . NUMBER
    (45) exp1 -> . STRING
    (46) exp1 -> . ID
    (47) exp1 -> . TRUE
    (48) exp1 -> . FALSE
    (49) exp1 -> . LPAREN exp RPAREN
    (50) exp1 -> . exp2
    (51) exp2 -> . exp2 DPLUS
    (52) exp2 -> . exp2 DMINUS
    (53) exp2 -> . NOT exp2
    (54) exp2 -> . exp3
    (55) exp3 -> . exp3 TIMES exp4
    (56) exp3 -> . exp3 DIVIDE exp4
    (57) exp3 -> . exp3 MOD exp4
    (58) exp3 -> . exp4

    NUMBER          shift and go to state 45
    STRING          shift and go to state 46
    ID              shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 62
    NOT             shift and go to state 51

    exp3                           shift and go to state 52
    exp4                           shift and go to state 100
    exp5                           shift and go to state 54
    exp6                           shift and go to state 55
    exp7                           shift and go to state 56
    exp8                           shift and go to state 57
    exp9                           shift and go to state 58
    exp1                           shift and go to state 74
    exp2                           shift and go to state 50

state 77

    (57) exp3 -> exp3 MOD . exp4
    (59) exp4 -> . exp4 PLUS exp5
    (60) exp4 -> . exp4 MINUS exp5
    (61) exp4 -> . exp5
    (62) exp5 -> . exp5 LESS exp6
    (63) exp5 -> . exp5 GREATER exp6
    (64) exp5 -> . exp5 LESS_EQUAL exp6
    (65) exp5 -> . exp5 GREATER_EQUAL exp6
    (66) exp5 -> . exp6
    (67) exp6 -> . exp6 EQUALS exp7
    (68) exp6 -> . exp6 DIFFERENT exp7
    (69) exp6 -> . exp7
    (70) exp7 -> . exp7 AND exp8
    (71) exp7 -> . exp8
    (72) exp8 -> . exp8 OR exp9
    (73) exp8 -> . exp9
    (74) exp9 -> . exp9 ASSIGN exp1
    (75) exp9 -> . exp9 COLONEQ exp1
    (76) exp9 -> . exp1
    (44) exp1 -> . NUMBER
    (45) exp1 -> . STRING
    (46) exp1 -> . ID
    (47) exp1 -> . TRUE
    (48) exp1 -> . FALSE
    (49) exp1 -> . LPAREN exp RPAREN
    (50) exp1 -> . exp2
    (51) exp2 -> . exp2 DPLUS
    (52) exp2 -> . exp2 DMINUS
    (53) exp2 -> . NOT exp2
    (54) exp2 -> . exp3
    (55) exp3 -> . exp3 TIMES exp4
    (56) exp3 -> . exp3 DIVIDE exp4
    (57) exp3 -> . exp3 MOD exp4
    (58) exp3 -> . exp4

    NUMBER          shift and go to state 45
    STRING          shift and go to state 46
    ID              shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 62
    NOT             shift and go to state 51

    exp3                           shift and go to state 52
    exp4                           shift and go to state 101
    exp5                           shift and go to state 54
    exp6                           shift and go to state 55
    exp7                           shift and go to state 56
    exp8                           shift and go to state 57
    exp9                           shift and go to state 58
    exp1                           shift and go to state 74
    exp2                           shift and go to state 50

state 78

    (59) exp4 -> exp4 PLUS . exp5
    (62) exp5 -> . exp5 LESS exp6
    (63) exp5 -> . exp5 GREATER exp6
    (64) exp5 -> . exp5 LESS_EQUAL exp6
    (65) exp5 -> . exp5 GREATER_EQUAL exp6
    (66) exp5 -> . exp6
    (67) exp6 -> . exp6 EQUALS exp7
    (68) exp6 -> . exp6 DIFFERENT exp7
    (69) exp6 -> . exp7
    (70) exp7 -> . exp7 AND exp8
    (71) exp7 -> . exp8
    (72) exp8 -> . exp8 OR exp9
    (73) exp8 -> . exp9
    (74) exp9 -> . exp9 ASSIGN exp1
    (75) exp9 -> . exp9 COLONEQ exp1
    (76) exp9 -> . exp1
    (44) exp1 -> . NUMBER
    (45) exp1 -> . STRING
    (46) exp1 -> . ID
    (47) exp1 -> . TRUE
    (48) exp1 -> . FALSE
    (49) exp1 -> . LPAREN exp RPAREN
    (50) exp1 -> . exp2
    (51) exp2 -> . exp2 DPLUS
    (52) exp2 -> . exp2 DMINUS
    (53) exp2 -> . NOT exp2
    (54) exp2 -> . exp3
    (55) exp3 -> . exp3 TIMES exp4
    (56) exp3 -> . exp3 DIVIDE exp4
    (57) exp3 -> . exp3 MOD exp4
    (58) exp3 -> . exp4
    (59) exp4 -> . exp4 PLUS exp5
    (60) exp4 -> . exp4 MINUS exp5
    (61) exp4 -> . exp5

    NUMBER          shift and go to state 45
    STRING          shift and go to state 46
    ID              shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 62
    NOT             shift and go to state 51

    exp4                           shift and go to state 53
    exp5                           shift and go to state 102
    exp6                           shift and go to state 55
    exp7                           shift and go to state 56
    exp8                           shift and go to state 57
    exp9                           shift and go to state 58
    exp1                           shift and go to state 74
    exp2                           shift and go to state 50
    exp3                           shift and go to state 52

state 79

    (60) exp4 -> exp4 MINUS . exp5
    (62) exp5 -> . exp5 LESS exp6
    (63) exp5 -> . exp5 GREATER exp6
    (64) exp5 -> . exp5 LESS_EQUAL exp6
    (65) exp5 -> . exp5 GREATER_EQUAL exp6
    (66) exp5 -> . exp6
    (67) exp6 -> . exp6 EQUALS exp7
    (68) exp6 -> . exp6 DIFFERENT exp7
    (69) exp6 -> . exp7
    (70) exp7 -> . exp7 AND exp8
    (71) exp7 -> . exp8
    (72) exp8 -> . exp8 OR exp9
    (73) exp8 -> . exp9
    (74) exp9 -> . exp9 ASSIGN exp1
    (75) exp9 -> . exp9 COLONEQ exp1
    (76) exp9 -> . exp1
    (44) exp1 -> . NUMBER
    (45) exp1 -> . STRING
    (46) exp1 -> . ID
    (47) exp1 -> . TRUE
    (48) exp1 -> . FALSE
    (49) exp1 -> . LPAREN exp RPAREN
    (50) exp1 -> . exp2
    (51) exp2 -> . exp2 DPLUS
    (52) exp2 -> . exp2 DMINUS
    (53) exp2 -> . NOT exp2
    (54) exp2 -> . exp3
    (55) exp3 -> . exp3 TIMES exp4
    (56) exp3 -> . exp3 DIVIDE exp4
    (57) exp3 -> . exp3 MOD exp4
    (58) exp3 -> . exp4
    (59) exp4 -> . exp4 PLUS exp5
    (60) exp4 -> . exp4 MINUS exp5
    (61) exp4 -> . exp5

    NUMBER          shift and go to state 45
    STRING          shift and go to state 46
    ID              shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 62
    NOT             shift and go to state 51

    exp4                           shift and go to state 53
    exp5                           shift and go to state 103
    exp6                           shift and go to state 55
    exp7                           shift and go to state 56
    exp8                           shift and go to state 57
    exp9                           shift and go to state 58
    exp1                           shift and go to state 74
    exp2                           shift and go to state 50
    exp3                           shift and go to state 52

state 80

    (62) exp5 -> exp5 LESS . exp6
    (67) exp6 -> . exp6 EQUALS exp7
    (68) exp6 -> . exp6 DIFFERENT exp7
    (69) exp6 -> . exp7
    (70) exp7 -> . exp7 AND exp8
    (71) exp7 -> . exp8
    (72) exp8 -> . exp8 OR exp9
    (73) exp8 -> . exp9
    (74) exp9 -> . exp9 ASSIGN exp1
    (75) exp9 -> . exp9 COLONEQ exp1
    (76) exp9 -> . exp1
    (44) exp1 -> . NUMBER
    (45) exp1 -> . STRING
    (46) exp1 -> . ID
    (47) exp1 -> . TRUE
    (48) exp1 -> . FALSE
    (49) exp1 -> . LPAREN exp RPAREN
    (50) exp1 -> . exp2
    (51) exp2 -> . exp2 DPLUS
    (52) exp2 -> . exp2 DMINUS
    (53) exp2 -> . NOT exp2
    (54) exp2 -> . exp3
    (55) exp3 -> . exp3 TIMES exp4
    (56) exp3 -> . exp3 DIVIDE exp4
    (57) exp3 -> . exp3 MOD exp4
    (58) exp3 -> . exp4
    (59) exp4 -> . exp4 PLUS exp5
    (60) exp4 -> . exp4 MINUS exp5
    (61) exp4 -> . exp5
    (62) exp5 -> . exp5 LESS exp6
    (63) exp5 -> . exp5 GREATER exp6
    (64) exp5 -> . exp5 LESS_EQUAL exp6
    (65) exp5 -> . exp5 GREATER_EQUAL exp6
    (66) exp5 -> . exp6

    NUMBER          shift and go to state 45
    STRING          shift and go to state 46
    ID              shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 62
    NOT             shift and go to state 51

    exp5                           shift and go to state 54
    exp6                           shift and go to state 104
    exp7                           shift and go to state 56
    exp8                           shift and go to state 57
    exp9                           shift and go to state 58
    exp1                           shift and go to state 74
    exp2                           shift and go to state 50
    exp3                           shift and go to state 52
    exp4                           shift and go to state 53

state 81

    (63) exp5 -> exp5 GREATER . exp6
    (67) exp6 -> . exp6 EQUALS exp7
    (68) exp6 -> . exp6 DIFFERENT exp7
    (69) exp6 -> . exp7
    (70) exp7 -> . exp7 AND exp8
    (71) exp7 -> . exp8
    (72) exp8 -> . exp8 OR exp9
    (73) exp8 -> . exp9
    (74) exp9 -> . exp9 ASSIGN exp1
    (75) exp9 -> . exp9 COLONEQ exp1
    (76) exp9 -> . exp1
    (44) exp1 -> . NUMBER
    (45) exp1 -> . STRING
    (46) exp1 -> . ID
    (47) exp1 -> . TRUE
    (48) exp1 -> . FALSE
    (49) exp1 -> . LPAREN exp RPAREN
    (50) exp1 -> . exp2
    (51) exp2 -> . exp2 DPLUS
    (52) exp2 -> . exp2 DMINUS
    (53) exp2 -> . NOT exp2
    (54) exp2 -> . exp3
    (55) exp3 -> . exp3 TIMES exp4
    (56) exp3 -> . exp3 DIVIDE exp4
    (57) exp3 -> . exp3 MOD exp4
    (58) exp3 -> . exp4
    (59) exp4 -> . exp4 PLUS exp5
    (60) exp4 -> . exp4 MINUS exp5
    (61) exp4 -> . exp5
    (62) exp5 -> . exp5 LESS exp6
    (63) exp5 -> . exp5 GREATER exp6
    (64) exp5 -> . exp5 LESS_EQUAL exp6
    (65) exp5 -> . exp5 GREATER_EQUAL exp6
    (66) exp5 -> . exp6

    NUMBER          shift and go to state 45
    STRING          shift and go to state 46
    ID              shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 62
    NOT             shift and go to state 51

    exp5                           shift and go to state 54
    exp6                           shift and go to state 105
    exp7                           shift and go to state 56
    exp8                           shift and go to state 57
    exp9                           shift and go to state 58
    exp1                           shift and go to state 74
    exp2                           shift and go to state 50
    exp3                           shift and go to state 52
    exp4                           shift and go to state 53

state 82

    (64) exp5 -> exp5 LESS_EQUAL . exp6
    (67) exp6 -> . exp6 EQUALS exp7
    (68) exp6 -> . exp6 DIFFERENT exp7
    (69) exp6 -> . exp7
    (70) exp7 -> . exp7 AND exp8
    (71) exp7 -> . exp8
    (72) exp8 -> . exp8 OR exp9
    (73) exp8 -> . exp9
    (74) exp9 -> . exp9 ASSIGN exp1
    (75) exp9 -> . exp9 COLONEQ exp1
    (76) exp9 -> . exp1
    (44) exp1 -> . NUMBER
    (45) exp1 -> . STRING
    (46) exp1 -> . ID
    (47) exp1 -> . TRUE
    (48) exp1 -> . FALSE
    (49) exp1 -> . LPAREN exp RPAREN
    (50) exp1 -> . exp2
    (51) exp2 -> . exp2 DPLUS
    (52) exp2 -> . exp2 DMINUS
    (53) exp2 -> . NOT exp2
    (54) exp2 -> . exp3
    (55) exp3 -> . exp3 TIMES exp4
    (56) exp3 -> . exp3 DIVIDE exp4
    (57) exp3 -> . exp3 MOD exp4
    (58) exp3 -> . exp4
    (59) exp4 -> . exp4 PLUS exp5
    (60) exp4 -> . exp4 MINUS exp5
    (61) exp4 -> . exp5
    (62) exp5 -> . exp5 LESS exp6
    (63) exp5 -> . exp5 GREATER exp6
    (64) exp5 -> . exp5 LESS_EQUAL exp6
    (65) exp5 -> . exp5 GREATER_EQUAL exp6
    (66) exp5 -> . exp6

    NUMBER          shift and go to state 45
    STRING          shift and go to state 46
    ID              shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 62
    NOT             shift and go to state 51

    exp5                           shift and go to state 54
    exp6                           shift and go to state 106
    exp7                           shift and go to state 56
    exp8                           shift and go to state 57
    exp9                           shift and go to state 58
    exp1                           shift and go to state 74
    exp2                           shift and go to state 50
    exp3                           shift and go to state 52
    exp4                           shift and go to state 53

state 83

    (65) exp5 -> exp5 GREATER_EQUAL . exp6
    (67) exp6 -> . exp6 EQUALS exp7
    (68) exp6 -> . exp6 DIFFERENT exp7
    (69) exp6 -> . exp7
    (70) exp7 -> . exp7 AND exp8
    (71) exp7 -> . exp8
    (72) exp8 -> . exp8 OR exp9
    (73) exp8 -> . exp9
    (74) exp9 -> . exp9 ASSIGN exp1
    (75) exp9 -> . exp9 COLONEQ exp1
    (76) exp9 -> . exp1
    (44) exp1 -> . NUMBER
    (45) exp1 -> . STRING
    (46) exp1 -> . ID
    (47) exp1 -> . TRUE
    (48) exp1 -> . FALSE
    (49) exp1 -> . LPAREN exp RPAREN
    (50) exp1 -> . exp2
    (51) exp2 -> . exp2 DPLUS
    (52) exp2 -> . exp2 DMINUS
    (53) exp2 -> . NOT exp2
    (54) exp2 -> . exp3
    (55) exp3 -> . exp3 TIMES exp4
    (56) exp3 -> . exp3 DIVIDE exp4
    (57) exp3 -> . exp3 MOD exp4
    (58) exp3 -> . exp4
    (59) exp4 -> . exp4 PLUS exp5
    (60) exp4 -> . exp4 MINUS exp5
    (61) exp4 -> . exp5
    (62) exp5 -> . exp5 LESS exp6
    (63) exp5 -> . exp5 GREATER exp6
    (64) exp5 -> . exp5 LESS_EQUAL exp6
    (65) exp5 -> . exp5 GREATER_EQUAL exp6
    (66) exp5 -> . exp6

    NUMBER          shift and go to state 45
    STRING          shift and go to state 46
    ID              shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 62
    NOT             shift and go to state 51

    exp5                           shift and go to state 54
    exp6                           shift and go to state 107
    exp7                           shift and go to state 56
    exp8                           shift and go to state 57
    exp9                           shift and go to state 58
    exp1                           shift and go to state 74
    exp2                           shift and go to state 50
    exp3                           shift and go to state 52
    exp4                           shift and go to state 53

state 84

    (67) exp6 -> exp6 EQUALS . exp7
    (70) exp7 -> . exp7 AND exp8
    (71) exp7 -> . exp8
    (72) exp8 -> . exp8 OR exp9
    (73) exp8 -> . exp9
    (74) exp9 -> . exp9 ASSIGN exp1
    (75) exp9 -> . exp9 COLONEQ exp1
    (76) exp9 -> . exp1
    (44) exp1 -> . NUMBER
    (45) exp1 -> . STRING
    (46) exp1 -> . ID
    (47) exp1 -> . TRUE
    (48) exp1 -> . FALSE
    (49) exp1 -> . LPAREN exp RPAREN
    (50) exp1 -> . exp2
    (51) exp2 -> . exp2 DPLUS
    (52) exp2 -> . exp2 DMINUS
    (53) exp2 -> . NOT exp2
    (54) exp2 -> . exp3
    (55) exp3 -> . exp3 TIMES exp4
    (56) exp3 -> . exp3 DIVIDE exp4
    (57) exp3 -> . exp3 MOD exp4
    (58) exp3 -> . exp4
    (59) exp4 -> . exp4 PLUS exp5
    (60) exp4 -> . exp4 MINUS exp5
    (61) exp4 -> . exp5
    (62) exp5 -> . exp5 LESS exp6
    (63) exp5 -> . exp5 GREATER exp6
    (64) exp5 -> . exp5 LESS_EQUAL exp6
    (65) exp5 -> . exp5 GREATER_EQUAL exp6
    (66) exp5 -> . exp6
    (67) exp6 -> . exp6 EQUALS exp7
    (68) exp6 -> . exp6 DIFFERENT exp7
    (69) exp6 -> . exp7

    NUMBER          shift and go to state 45
    STRING          shift and go to state 46
    ID              shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 62
    NOT             shift and go to state 51

    exp6                           shift and go to state 55
    exp7                           shift and go to state 108
    exp8                           shift and go to state 57
    exp9                           shift and go to state 58
    exp1                           shift and go to state 74
    exp2                           shift and go to state 50
    exp3                           shift and go to state 52
    exp4                           shift and go to state 53
    exp5                           shift and go to state 54

state 85

    (68) exp6 -> exp6 DIFFERENT . exp7
    (70) exp7 -> . exp7 AND exp8
    (71) exp7 -> . exp8
    (72) exp8 -> . exp8 OR exp9
    (73) exp8 -> . exp9
    (74) exp9 -> . exp9 ASSIGN exp1
    (75) exp9 -> . exp9 COLONEQ exp1
    (76) exp9 -> . exp1
    (44) exp1 -> . NUMBER
    (45) exp1 -> . STRING
    (46) exp1 -> . ID
    (47) exp1 -> . TRUE
    (48) exp1 -> . FALSE
    (49) exp1 -> . LPAREN exp RPAREN
    (50) exp1 -> . exp2
    (51) exp2 -> . exp2 DPLUS
    (52) exp2 -> . exp2 DMINUS
    (53) exp2 -> . NOT exp2
    (54) exp2 -> . exp3
    (55) exp3 -> . exp3 TIMES exp4
    (56) exp3 -> . exp3 DIVIDE exp4
    (57) exp3 -> . exp3 MOD exp4
    (58) exp3 -> . exp4
    (59) exp4 -> . exp4 PLUS exp5
    (60) exp4 -> . exp4 MINUS exp5
    (61) exp4 -> . exp5
    (62) exp5 -> . exp5 LESS exp6
    (63) exp5 -> . exp5 GREATER exp6
    (64) exp5 -> . exp5 LESS_EQUAL exp6
    (65) exp5 -> . exp5 GREATER_EQUAL exp6
    (66) exp5 -> . exp6
    (67) exp6 -> . exp6 EQUALS exp7
    (68) exp6 -> . exp6 DIFFERENT exp7
    (69) exp6 -> . exp7

    NUMBER          shift and go to state 45
    STRING          shift and go to state 46
    ID              shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 62
    NOT             shift and go to state 51

    exp6                           shift and go to state 55
    exp7                           shift and go to state 109
    exp8                           shift and go to state 57
    exp9                           shift and go to state 58
    exp1                           shift and go to state 74
    exp2                           shift and go to state 50
    exp3                           shift and go to state 52
    exp4                           shift and go to state 53
    exp5                           shift and go to state 54

state 86

    (70) exp7 -> exp7 AND . exp8
    (72) exp8 -> . exp8 OR exp9
    (73) exp8 -> . exp9
    (74) exp9 -> . exp9 ASSIGN exp1
    (75) exp9 -> . exp9 COLONEQ exp1
    (76) exp9 -> . exp1
    (44) exp1 -> . NUMBER
    (45) exp1 -> . STRING
    (46) exp1 -> . ID
    (47) exp1 -> . TRUE
    (48) exp1 -> . FALSE
    (49) exp1 -> . LPAREN exp RPAREN
    (50) exp1 -> . exp2
    (51) exp2 -> . exp2 DPLUS
    (52) exp2 -> . exp2 DMINUS
    (53) exp2 -> . NOT exp2
    (54) exp2 -> . exp3
    (55) exp3 -> . exp3 TIMES exp4
    (56) exp3 -> . exp3 DIVIDE exp4
    (57) exp3 -> . exp3 MOD exp4
    (58) exp3 -> . exp4
    (59) exp4 -> . exp4 PLUS exp5
    (60) exp4 -> . exp4 MINUS exp5
    (61) exp4 -> . exp5
    (62) exp5 -> . exp5 LESS exp6
    (63) exp5 -> . exp5 GREATER exp6
    (64) exp5 -> . exp5 LESS_EQUAL exp6
    (65) exp5 -> . exp5 GREATER_EQUAL exp6
    (66) exp5 -> . exp6
    (67) exp6 -> . exp6 EQUALS exp7
    (68) exp6 -> . exp6 DIFFERENT exp7
    (69) exp6 -> . exp7
    (70) exp7 -> . exp7 AND exp8
    (71) exp7 -> . exp8

    NUMBER          shift and go to state 45
    STRING          shift and go to state 46
    ID              shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 62
    NOT             shift and go to state 51

    exp7                           shift and go to state 56
    exp8                           shift and go to state 110
    exp9                           shift and go to state 58
    exp1                           shift and go to state 74
    exp2                           shift and go to state 50
    exp3                           shift and go to state 52
    exp4                           shift and go to state 53
    exp5                           shift and go to state 54
    exp6                           shift and go to state 55

state 87

    (72) exp8 -> exp8 OR . exp9
    (74) exp9 -> . exp9 ASSIGN exp1
    (75) exp9 -> . exp9 COLONEQ exp1
    (76) exp9 -> . exp1
    (44) exp1 -> . NUMBER
    (45) exp1 -> . STRING
    (46) exp1 -> . ID
    (47) exp1 -> . TRUE
    (48) exp1 -> . FALSE
    (49) exp1 -> . LPAREN exp RPAREN
    (50) exp1 -> . exp2
    (51) exp2 -> . exp2 DPLUS
    (52) exp2 -> . exp2 DMINUS
    (53) exp2 -> . NOT exp2
    (54) exp2 -> . exp3
    (55) exp3 -> . exp3 TIMES exp4
    (56) exp3 -> . exp3 DIVIDE exp4
    (57) exp3 -> . exp3 MOD exp4
    (58) exp3 -> . exp4
    (59) exp4 -> . exp4 PLUS exp5
    (60) exp4 -> . exp4 MINUS exp5
    (61) exp4 -> . exp5
    (62) exp5 -> . exp5 LESS exp6
    (63) exp5 -> . exp5 GREATER exp6
    (64) exp5 -> . exp5 LESS_EQUAL exp6
    (65) exp5 -> . exp5 GREATER_EQUAL exp6
    (66) exp5 -> . exp6
    (67) exp6 -> . exp6 EQUALS exp7
    (68) exp6 -> . exp6 DIFFERENT exp7
    (69) exp6 -> . exp7
    (70) exp7 -> . exp7 AND exp8
    (71) exp7 -> . exp8
    (72) exp8 -> . exp8 OR exp9
    (73) exp8 -> . exp9

    NUMBER          shift and go to state 45
    STRING          shift and go to state 46
    ID              shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 62
    NOT             shift and go to state 51

    exp8                           shift and go to state 57
    exp9                           shift and go to state 111
    exp1                           shift and go to state 74
    exp2                           shift and go to state 50
    exp3                           shift and go to state 52
    exp4                           shift and go to state 53
    exp5                           shift and go to state 54
    exp6                           shift and go to state 55
    exp7                           shift and go to state 56

state 88

    (74) exp9 -> exp9 ASSIGN . exp1
    (44) exp1 -> . NUMBER
    (45) exp1 -> . STRING
    (46) exp1 -> . ID
    (47) exp1 -> . TRUE
    (48) exp1 -> . FALSE
    (49) exp1 -> . LPAREN exp RPAREN
    (50) exp1 -> . exp2
    (51) exp2 -> . exp2 DPLUS
    (52) exp2 -> . exp2 DMINUS
    (53) exp2 -> . NOT exp2
    (54) exp2 -> . exp3
    (55) exp3 -> . exp3 TIMES exp4
    (56) exp3 -> . exp3 DIVIDE exp4
    (57) exp3 -> . exp3 MOD exp4
    (58) exp3 -> . exp4
    (59) exp4 -> . exp4 PLUS exp5
    (60) exp4 -> . exp4 MINUS exp5
    (61) exp4 -> . exp5
    (62) exp5 -> . exp5 LESS exp6
    (63) exp5 -> . exp5 GREATER exp6
    (64) exp5 -> . exp5 LESS_EQUAL exp6
    (65) exp5 -> . exp5 GREATER_EQUAL exp6
    (66) exp5 -> . exp6
    (67) exp6 -> . exp6 EQUALS exp7
    (68) exp6 -> . exp6 DIFFERENT exp7
    (69) exp6 -> . exp7
    (70) exp7 -> . exp7 AND exp8
    (71) exp7 -> . exp8
    (72) exp8 -> . exp8 OR exp9
    (73) exp8 -> . exp9
    (74) exp9 -> . exp9 ASSIGN exp1
    (75) exp9 -> . exp9 COLONEQ exp1
    (76) exp9 -> . exp1

    NUMBER          shift and go to state 45
    STRING          shift and go to state 46
    ID              shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 62
    NOT             shift and go to state 51

    exp9                           shift and go to state 58
    exp1                           shift and go to state 112
    exp2                           shift and go to state 50
    exp3                           shift and go to state 52
    exp4                           shift and go to state 53
    exp5                           shift and go to state 54
    exp6                           shift and go to state 55
    exp7                           shift and go to state 56
    exp8                           shift and go to state 57

state 89

    (75) exp9 -> exp9 COLONEQ . exp1
    (44) exp1 -> . NUMBER
    (45) exp1 -> . STRING
    (46) exp1 -> . ID
    (47) exp1 -> . TRUE
    (48) exp1 -> . FALSE
    (49) exp1 -> . LPAREN exp RPAREN
    (50) exp1 -> . exp2
    (51) exp2 -> . exp2 DPLUS
    (52) exp2 -> . exp2 DMINUS
    (53) exp2 -> . NOT exp2
    (54) exp2 -> . exp3
    (55) exp3 -> . exp3 TIMES exp4
    (56) exp3 -> . exp3 DIVIDE exp4
    (57) exp3 -> . exp3 MOD exp4
    (58) exp3 -> . exp4
    (59) exp4 -> . exp4 PLUS exp5
    (60) exp4 -> . exp4 MINUS exp5
    (61) exp4 -> . exp5
    (62) exp5 -> . exp5 LESS exp6
    (63) exp5 -> . exp5 GREATER exp6
    (64) exp5 -> . exp5 LESS_EQUAL exp6
    (65) exp5 -> . exp5 GREATER_EQUAL exp6
    (66) exp5 -> . exp6
    (67) exp6 -> . exp6 EQUALS exp7
    (68) exp6 -> . exp6 DIFFERENT exp7
    (69) exp6 -> . exp7
    (70) exp7 -> . exp7 AND exp8
    (71) exp7 -> . exp8
    (72) exp8 -> . exp8 OR exp9
    (73) exp8 -> . exp9
    (74) exp9 -> . exp9 ASSIGN exp1
    (75) exp9 -> . exp9 COLONEQ exp1
    (76) exp9 -> . exp1

    NUMBER          shift and go to state 45
    STRING          shift and go to state 46
    ID              shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 62
    NOT             shift and go to state 51

    exp9                           shift and go to state 58
    exp1                           shift and go to state 113
    exp2                           shift and go to state 50
    exp3                           shift and go to state 52
    exp4                           shift and go to state 53
    exp5                           shift and go to state 54
    exp6                           shift and go to state 55
    exp7                           shift and go to state 56
    exp8                           shift and go to state 57

state 90

    (37) declaration -> VAR ID type .
    (38) declaration -> VAR ID type . ASSIGN exp
    (39) declaration -> VAR ID type . COLONEQ exp

    IF              reduce using rule 37 (declaration -> VAR ID type .)
    VAR             reduce using rule 37 (declaration -> VAR ID type .)
    FOR             reduce using rule 37 (declaration -> VAR ID type .)
    RETURN          reduce using rule 37 (declaration -> VAR ID type .)
    RCHAVES         reduce using rule 37 (declaration -> VAR ID type .)
    ELSE            reduce using rule 37 (declaration -> VAR ID type .)
    ASSIGN          shift and go to state 114
    COLONEQ         shift and go to state 115


state 91

    (34) for -> FOR exp SEMICOLON . exp SEMICOLON exp
    (43) exp -> . exp1
    (44) exp1 -> . NUMBER
    (45) exp1 -> . STRING
    (46) exp1 -> . ID
    (47) exp1 -> . TRUE
    (48) exp1 -> . FALSE
    (49) exp1 -> . LPAREN exp RPAREN
    (50) exp1 -> . exp2
    (51) exp2 -> . exp2 DPLUS
    (52) exp2 -> . exp2 DMINUS
    (53) exp2 -> . NOT exp2
    (54) exp2 -> . exp3
    (55) exp3 -> . exp3 TIMES exp4
    (56) exp3 -> . exp3 DIVIDE exp4
    (57) exp3 -> . exp3 MOD exp4
    (58) exp3 -> . exp4
    (59) exp4 -> . exp4 PLUS exp5
    (60) exp4 -> . exp4 MINUS exp5
    (61) exp4 -> . exp5
    (62) exp5 -> . exp5 LESS exp6
    (63) exp5 -> . exp5 GREATER exp6
    (64) exp5 -> . exp5 LESS_EQUAL exp6
    (65) exp5 -> . exp5 GREATER_EQUAL exp6
    (66) exp5 -> . exp6
    (67) exp6 -> . exp6 EQUALS exp7
    (68) exp6 -> . exp6 DIFFERENT exp7
    (69) exp6 -> . exp7
    (70) exp7 -> . exp7 AND exp8
    (71) exp7 -> . exp8
    (72) exp8 -> . exp8 OR exp9
    (73) exp8 -> . exp9
    (74) exp9 -> . exp9 ASSIGN exp1
    (75) exp9 -> . exp9 COLONEQ exp1
    (76) exp9 -> . exp1

    NUMBER          shift and go to state 45
    STRING          shift and go to state 46
    ID              shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 62
    NOT             shift and go to state 51

    exp                            shift and go to state 116
    exp1                           shift and go to state 44
    exp2                           shift and go to state 50
    exp3                           shift and go to state 52
    exp4                           shift and go to state 53
    exp5                           shift and go to state 54
    exp6                           shift and go to state 55
    exp7                           shift and go to state 56
    exp8                           shift and go to state 57
    exp9                           shift and go to state 58

state 92

    (36) for -> FOR exp COMMA . exp ASSIGN RANGE exp
    (43) exp -> . exp1
    (44) exp1 -> . NUMBER
    (45) exp1 -> . STRING
    (46) exp1 -> . ID
    (47) exp1 -> . TRUE
    (48) exp1 -> . FALSE
    (49) exp1 -> . LPAREN exp RPAREN
    (50) exp1 -> . exp2
    (51) exp2 -> . exp2 DPLUS
    (52) exp2 -> . exp2 DMINUS
    (53) exp2 -> . NOT exp2
    (54) exp2 -> . exp3
    (55) exp3 -> . exp3 TIMES exp4
    (56) exp3 -> . exp3 DIVIDE exp4
    (57) exp3 -> . exp3 MOD exp4
    (58) exp3 -> . exp4
    (59) exp4 -> . exp4 PLUS exp5
    (60) exp4 -> . exp4 MINUS exp5
    (61) exp4 -> . exp5
    (62) exp5 -> . exp5 LESS exp6
    (63) exp5 -> . exp5 GREATER exp6
    (64) exp5 -> . exp5 LESS_EQUAL exp6
    (65) exp5 -> . exp5 GREATER_EQUAL exp6
    (66) exp5 -> . exp6
    (67) exp6 -> . exp6 EQUALS exp7
    (68) exp6 -> . exp6 DIFFERENT exp7
    (69) exp6 -> . exp7
    (70) exp7 -> . exp7 AND exp8
    (71) exp7 -> . exp8
    (72) exp8 -> . exp8 OR exp9
    (73) exp8 -> . exp9
    (74) exp9 -> . exp9 ASSIGN exp1
    (75) exp9 -> . exp9 COLONEQ exp1
    (76) exp9 -> . exp1

    NUMBER          shift and go to state 45
    STRING          shift and go to state 46
    ID              shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 62
    NOT             shift and go to state 51

    exp                            shift and go to state 117
    exp1                           shift and go to state 44
    exp2                           shift and go to state 50
    exp3                           shift and go to state 52
    exp4                           shift and go to state 53
    exp5                           shift and go to state 54
    exp6                           shift and go to state 55
    exp7                           shift and go to state 56
    exp8                           shift and go to state 57
    exp9                           shift and go to state 58

state 93

    (35) for -> FOR RANGE exp .

    IF              reduce using rule 35 (for -> FOR RANGE exp .)
    VAR             reduce using rule 35 (for -> FOR RANGE exp .)
    FOR             reduce using rule 35 (for -> FOR RANGE exp .)
    RETURN          reduce using rule 35 (for -> FOR RANGE exp .)
    RCHAVES         reduce using rule 35 (for -> FOR RANGE exp .)
    ELSE            reduce using rule 35 (for -> FOR RANGE exp .)


state 94

    (49) exp1 -> LPAREN exp . RPAREN

    RPAREN          shift and go to state 118


state 95

    (14) funcreturn -> LPAREN type RPAREN .

    LCHAVES         reduce using rule 14 (funcreturn -> LPAREN type RPAREN .)


state 96

    (12) sigparams -> ID type COMMA sigparams .

    RPAREN          reduce using rule 12 (sigparams -> ID type COMMA sigparams .)


state 97

    (21) statement1 -> IF LPAREN exp RPAREN . statement1 ELSE statement1
    (28) statement2 -> IF LPAREN exp RPAREN . statement
    (31) statement2 -> IF LPAREN exp RPAREN . statement1 ELSE statement2
    (49) exp1 -> LPAREN exp RPAREN .
    (21) statement1 -> . IF LPAREN exp RPAREN statement1 ELSE statement1
    (22) statement1 -> . IF exp statement1 ELSE statement1
    (23) statement1 -> . declaration
    (24) statement1 -> . for
    (25) statement1 -> . statement1
    (26) statement1 -> . statement2
    (27) statement1 -> . return
    (19) statement -> . statement1
    (20) statement -> . statement2
    (37) declaration -> . VAR ID type
    (38) declaration -> . VAR ID type ASSIGN exp
    (39) declaration -> . VAR ID type COLONEQ exp
    (32) for -> . FOR
    (33) for -> . FOR exp
    (34) for -> . FOR exp SEMICOLON exp SEMICOLON exp
    (35) for -> . FOR RANGE exp
    (36) for -> . FOR exp COMMA exp ASSIGN RANGE exp
    (28) statement2 -> . IF LPAREN exp RPAREN statement
    (29) statement2 -> . IF exp statement
    (30) statement2 -> . IF exp statement1 ELSE statement2
    (31) statement2 -> . IF LPAREN exp RPAREN statement1 ELSE statement2
    (77) return -> . RETURN exp
    (78) return -> . RETURN

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    ASSIGN          reduce using rule 49 (exp1 -> LPAREN exp RPAREN .)
    COLONEQ         reduce using rule 49 (exp1 -> LPAREN exp RPAREN .)
    OR              reduce using rule 49 (exp1 -> LPAREN exp RPAREN .)
    AND             reduce using rule 49 (exp1 -> LPAREN exp RPAREN .)
    EQUALS          reduce using rule 49 (exp1 -> LPAREN exp RPAREN .)
    DIFFERENT       reduce using rule 49 (exp1 -> LPAREN exp RPAREN .)
    LESS            reduce using rule 49 (exp1 -> LPAREN exp RPAREN .)
    GREATER         reduce using rule 49 (exp1 -> LPAREN exp RPAREN .)
    LESS_EQUAL      reduce using rule 49 (exp1 -> LPAREN exp RPAREN .)
    GREATER_EQUAL   reduce using rule 49 (exp1 -> LPAREN exp RPAREN .)
    PLUS            reduce using rule 49 (exp1 -> LPAREN exp RPAREN .)
    MINUS           reduce using rule 49 (exp1 -> LPAREN exp RPAREN .)
    TIMES           reduce using rule 49 (exp1 -> LPAREN exp RPAREN .)
    DIVIDE          reduce using rule 49 (exp1 -> LPAREN exp RPAREN .)
    MOD             reduce using rule 49 (exp1 -> LPAREN exp RPAREN .)
    DPLUS           reduce using rule 49 (exp1 -> LPAREN exp RPAREN .)
    DMINUS          reduce using rule 49 (exp1 -> LPAREN exp RPAREN .)
    IF              shift and go to state 25
    VAR             shift and go to state 29
    FOR             shift and go to state 30
    RETURN          shift and go to state 31

  ! IF              [ reduce using rule 49 (exp1 -> LPAREN exp RPAREN .) ]
  ! VAR             [ reduce using rule 49 (exp1 -> LPAREN exp RPAREN .) ]
  ! FOR             [ reduce using rule 49 (exp1 -> LPAREN exp RPAREN .) ]
  ! RETURN          [ reduce using rule 49 (exp1 -> LPAREN exp RPAREN .) ]

    statement1                     shift and go to state 119
    statement                      shift and go to state 120
    statement2                     shift and go to state 70
    declaration                    shift and go to state 26
    for                            shift and go to state 27
    return                         shift and go to state 28

state 98

    (22) statement1 -> IF exp statement1 ELSE . statement1
    (30) statement2 -> IF exp statement1 ELSE . statement2
    (21) statement1 -> . IF LPAREN exp RPAREN statement1 ELSE statement1
    (22) statement1 -> . IF exp statement1 ELSE statement1
    (23) statement1 -> . declaration
    (24) statement1 -> . for
    (25) statement1 -> . statement1
    (26) statement1 -> . statement2
    (27) statement1 -> . return
    (28) statement2 -> . IF LPAREN exp RPAREN statement
    (29) statement2 -> . IF exp statement
    (30) statement2 -> . IF exp statement1 ELSE statement2
    (31) statement2 -> . IF LPAREN exp RPAREN statement1 ELSE statement2
    (37) declaration -> . VAR ID type
    (38) declaration -> . VAR ID type ASSIGN exp
    (39) declaration -> . VAR ID type COLONEQ exp
    (32) for -> . FOR
    (33) for -> . FOR exp
    (34) for -> . FOR exp SEMICOLON exp SEMICOLON exp
    (35) for -> . FOR RANGE exp
    (36) for -> . FOR exp COMMA exp ASSIGN RANGE exp
    (77) return -> . RETURN exp
    (78) return -> . RETURN

    IF              shift and go to state 25
    VAR             shift and go to state 29
    FOR             shift and go to state 30
    RETURN          shift and go to state 31

    statement1                     shift and go to state 121
    statement2                     shift and go to state 122
    declaration                    shift and go to state 26
    for                            shift and go to state 27
    return                         shift and go to state 28

state 99

    (55) exp3 -> exp3 TIMES exp4 .
    (59) exp4 -> exp4 . PLUS exp5
    (60) exp4 -> exp4 . MINUS exp5
    (58) exp3 -> exp4 .

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! reduce/reduce conflict for DPLUS resolved using rule 55 (exp3 -> exp3 TIMES exp4 .)
  ! reduce/reduce conflict for DMINUS resolved using rule 55 (exp3 -> exp3 TIMES exp4 .)
  ! reduce/reduce conflict for IF resolved using rule 55 (exp3 -> exp3 TIMES exp4 .)
  ! reduce/reduce conflict for VAR resolved using rule 55 (exp3 -> exp3 TIMES exp4 .)
  ! reduce/reduce conflict for FOR resolved using rule 55 (exp3 -> exp3 TIMES exp4 .)
  ! reduce/reduce conflict for RETURN resolved using rule 55 (exp3 -> exp3 TIMES exp4 .)
  ! reduce/reduce conflict for ASSIGN resolved using rule 55 (exp3 -> exp3 TIMES exp4 .)
  ! reduce/reduce conflict for COLONEQ resolved using rule 55 (exp3 -> exp3 TIMES exp4 .)
  ! reduce/reduce conflict for OR resolved using rule 55 (exp3 -> exp3 TIMES exp4 .)
  ! reduce/reduce conflict for AND resolved using rule 55 (exp3 -> exp3 TIMES exp4 .)
  ! reduce/reduce conflict for EQUALS resolved using rule 55 (exp3 -> exp3 TIMES exp4 .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 55 (exp3 -> exp3 TIMES exp4 .)
  ! reduce/reduce conflict for LESS resolved using rule 55 (exp3 -> exp3 TIMES exp4 .)
  ! reduce/reduce conflict for GREATER resolved using rule 55 (exp3 -> exp3 TIMES exp4 .)
  ! reduce/reduce conflict for LESS_EQUAL resolved using rule 55 (exp3 -> exp3 TIMES exp4 .)
  ! reduce/reduce conflict for GREATER_EQUAL resolved using rule 55 (exp3 -> exp3 TIMES exp4 .)
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! reduce/reduce conflict for TIMES resolved using rule 55 (exp3 -> exp3 TIMES exp4 .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 55 (exp3 -> exp3 TIMES exp4 .)
  ! reduce/reduce conflict for MOD resolved using rule 55 (exp3 -> exp3 TIMES exp4 .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 55 (exp3 -> exp3 TIMES exp4 .)
  ! reduce/reduce conflict for COMMA resolved using rule 55 (exp3 -> exp3 TIMES exp4 .)
  ! reduce/reduce conflict for RCHAVES resolved using rule 55 (exp3 -> exp3 TIMES exp4 .)
  ! reduce/reduce conflict for ELSE resolved using rule 55 (exp3 -> exp3 TIMES exp4 .)
  ! reduce/reduce conflict for RPAREN resolved using rule 55 (exp3 -> exp3 TIMES exp4 .)
    IF              reduce using rule 55 (exp3 -> exp3 TIMES exp4 .)
    VAR             reduce using rule 55 (exp3 -> exp3 TIMES exp4 .)
    FOR             reduce using rule 55 (exp3 -> exp3 TIMES exp4 .)
    RETURN          reduce using rule 55 (exp3 -> exp3 TIMES exp4 .)
    ASSIGN          reduce using rule 55 (exp3 -> exp3 TIMES exp4 .)
    COLONEQ         reduce using rule 55 (exp3 -> exp3 TIMES exp4 .)
    OR              reduce using rule 55 (exp3 -> exp3 TIMES exp4 .)
    AND             reduce using rule 55 (exp3 -> exp3 TIMES exp4 .)
    EQUALS          reduce using rule 55 (exp3 -> exp3 TIMES exp4 .)
    DIFFERENT       reduce using rule 55 (exp3 -> exp3 TIMES exp4 .)
    LESS            reduce using rule 55 (exp3 -> exp3 TIMES exp4 .)
    GREATER         reduce using rule 55 (exp3 -> exp3 TIMES exp4 .)
    LESS_EQUAL      reduce using rule 55 (exp3 -> exp3 TIMES exp4 .)
    GREATER_EQUAL   reduce using rule 55 (exp3 -> exp3 TIMES exp4 .)
    TIMES           reduce using rule 55 (exp3 -> exp3 TIMES exp4 .)
    DIVIDE          reduce using rule 55 (exp3 -> exp3 TIMES exp4 .)
    MOD             reduce using rule 55 (exp3 -> exp3 TIMES exp4 .)
    DPLUS           reduce using rule 55 (exp3 -> exp3 TIMES exp4 .)
    DMINUS          reduce using rule 55 (exp3 -> exp3 TIMES exp4 .)
    SEMICOLON       reduce using rule 55 (exp3 -> exp3 TIMES exp4 .)
    COMMA           reduce using rule 55 (exp3 -> exp3 TIMES exp4 .)
    RCHAVES         reduce using rule 55 (exp3 -> exp3 TIMES exp4 .)
    ELSE            reduce using rule 55 (exp3 -> exp3 TIMES exp4 .)
    RPAREN          reduce using rule 55 (exp3 -> exp3 TIMES exp4 .)
    PLUS            shift and go to state 78
    MINUS           shift and go to state 79

  ! PLUS            [ reduce using rule 55 (exp3 -> exp3 TIMES exp4 .) ]
  ! MINUS           [ reduce using rule 55 (exp3 -> exp3 TIMES exp4 .) ]
  ! DPLUS           [ reduce using rule 58 (exp3 -> exp4 .) ]
  ! DMINUS          [ reduce using rule 58 (exp3 -> exp4 .) ]
  ! IF              [ reduce using rule 58 (exp3 -> exp4 .) ]
  ! VAR             [ reduce using rule 58 (exp3 -> exp4 .) ]
  ! FOR             [ reduce using rule 58 (exp3 -> exp4 .) ]
  ! RETURN          [ reduce using rule 58 (exp3 -> exp4 .) ]
  ! ASSIGN          [ reduce using rule 58 (exp3 -> exp4 .) ]
  ! COLONEQ         [ reduce using rule 58 (exp3 -> exp4 .) ]
  ! OR              [ reduce using rule 58 (exp3 -> exp4 .) ]
  ! AND             [ reduce using rule 58 (exp3 -> exp4 .) ]
  ! EQUALS          [ reduce using rule 58 (exp3 -> exp4 .) ]
  ! DIFFERENT       [ reduce using rule 58 (exp3 -> exp4 .) ]
  ! LESS            [ reduce using rule 58 (exp3 -> exp4 .) ]
  ! GREATER         [ reduce using rule 58 (exp3 -> exp4 .) ]
  ! LESS_EQUAL      [ reduce using rule 58 (exp3 -> exp4 .) ]
  ! GREATER_EQUAL   [ reduce using rule 58 (exp3 -> exp4 .) ]
  ! PLUS            [ reduce using rule 58 (exp3 -> exp4 .) ]
  ! MINUS           [ reduce using rule 58 (exp3 -> exp4 .) ]
  ! TIMES           [ reduce using rule 58 (exp3 -> exp4 .) ]
  ! DIVIDE          [ reduce using rule 58 (exp3 -> exp4 .) ]
  ! MOD             [ reduce using rule 58 (exp3 -> exp4 .) ]
  ! SEMICOLON       [ reduce using rule 58 (exp3 -> exp4 .) ]
  ! COMMA           [ reduce using rule 58 (exp3 -> exp4 .) ]
  ! RCHAVES         [ reduce using rule 58 (exp3 -> exp4 .) ]
  ! ELSE            [ reduce using rule 58 (exp3 -> exp4 .) ]
  ! RPAREN          [ reduce using rule 58 (exp3 -> exp4 .) ]


state 100

    (56) exp3 -> exp3 DIVIDE exp4 .
    (59) exp4 -> exp4 . PLUS exp5
    (60) exp4 -> exp4 . MINUS exp5
    (58) exp3 -> exp4 .

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! reduce/reduce conflict for DPLUS resolved using rule 56 (exp3 -> exp3 DIVIDE exp4 .)
  ! reduce/reduce conflict for DMINUS resolved using rule 56 (exp3 -> exp3 DIVIDE exp4 .)
  ! reduce/reduce conflict for IF resolved using rule 56 (exp3 -> exp3 DIVIDE exp4 .)
  ! reduce/reduce conflict for VAR resolved using rule 56 (exp3 -> exp3 DIVIDE exp4 .)
  ! reduce/reduce conflict for FOR resolved using rule 56 (exp3 -> exp3 DIVIDE exp4 .)
  ! reduce/reduce conflict for RETURN resolved using rule 56 (exp3 -> exp3 DIVIDE exp4 .)
  ! reduce/reduce conflict for ASSIGN resolved using rule 56 (exp3 -> exp3 DIVIDE exp4 .)
  ! reduce/reduce conflict for COLONEQ resolved using rule 56 (exp3 -> exp3 DIVIDE exp4 .)
  ! reduce/reduce conflict for OR resolved using rule 56 (exp3 -> exp3 DIVIDE exp4 .)
  ! reduce/reduce conflict for AND resolved using rule 56 (exp3 -> exp3 DIVIDE exp4 .)
  ! reduce/reduce conflict for EQUALS resolved using rule 56 (exp3 -> exp3 DIVIDE exp4 .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 56 (exp3 -> exp3 DIVIDE exp4 .)
  ! reduce/reduce conflict for LESS resolved using rule 56 (exp3 -> exp3 DIVIDE exp4 .)
  ! reduce/reduce conflict for GREATER resolved using rule 56 (exp3 -> exp3 DIVIDE exp4 .)
  ! reduce/reduce conflict for LESS_EQUAL resolved using rule 56 (exp3 -> exp3 DIVIDE exp4 .)
  ! reduce/reduce conflict for GREATER_EQUAL resolved using rule 56 (exp3 -> exp3 DIVIDE exp4 .)
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! reduce/reduce conflict for TIMES resolved using rule 56 (exp3 -> exp3 DIVIDE exp4 .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 56 (exp3 -> exp3 DIVIDE exp4 .)
  ! reduce/reduce conflict for MOD resolved using rule 56 (exp3 -> exp3 DIVIDE exp4 .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 56 (exp3 -> exp3 DIVIDE exp4 .)
  ! reduce/reduce conflict for COMMA resolved using rule 56 (exp3 -> exp3 DIVIDE exp4 .)
  ! reduce/reduce conflict for RCHAVES resolved using rule 56 (exp3 -> exp3 DIVIDE exp4 .)
  ! reduce/reduce conflict for ELSE resolved using rule 56 (exp3 -> exp3 DIVIDE exp4 .)
  ! reduce/reduce conflict for RPAREN resolved using rule 56 (exp3 -> exp3 DIVIDE exp4 .)
    IF              reduce using rule 56 (exp3 -> exp3 DIVIDE exp4 .)
    VAR             reduce using rule 56 (exp3 -> exp3 DIVIDE exp4 .)
    FOR             reduce using rule 56 (exp3 -> exp3 DIVIDE exp4 .)
    RETURN          reduce using rule 56 (exp3 -> exp3 DIVIDE exp4 .)
    ASSIGN          reduce using rule 56 (exp3 -> exp3 DIVIDE exp4 .)
    COLONEQ         reduce using rule 56 (exp3 -> exp3 DIVIDE exp4 .)
    OR              reduce using rule 56 (exp3 -> exp3 DIVIDE exp4 .)
    AND             reduce using rule 56 (exp3 -> exp3 DIVIDE exp4 .)
    EQUALS          reduce using rule 56 (exp3 -> exp3 DIVIDE exp4 .)
    DIFFERENT       reduce using rule 56 (exp3 -> exp3 DIVIDE exp4 .)
    LESS            reduce using rule 56 (exp3 -> exp3 DIVIDE exp4 .)
    GREATER         reduce using rule 56 (exp3 -> exp3 DIVIDE exp4 .)
    LESS_EQUAL      reduce using rule 56 (exp3 -> exp3 DIVIDE exp4 .)
    GREATER_EQUAL   reduce using rule 56 (exp3 -> exp3 DIVIDE exp4 .)
    TIMES           reduce using rule 56 (exp3 -> exp3 DIVIDE exp4 .)
    DIVIDE          reduce using rule 56 (exp3 -> exp3 DIVIDE exp4 .)
    MOD             reduce using rule 56 (exp3 -> exp3 DIVIDE exp4 .)
    DPLUS           reduce using rule 56 (exp3 -> exp3 DIVIDE exp4 .)
    DMINUS          reduce using rule 56 (exp3 -> exp3 DIVIDE exp4 .)
    SEMICOLON       reduce using rule 56 (exp3 -> exp3 DIVIDE exp4 .)
    COMMA           reduce using rule 56 (exp3 -> exp3 DIVIDE exp4 .)
    RCHAVES         reduce using rule 56 (exp3 -> exp3 DIVIDE exp4 .)
    ELSE            reduce using rule 56 (exp3 -> exp3 DIVIDE exp4 .)
    RPAREN          reduce using rule 56 (exp3 -> exp3 DIVIDE exp4 .)
    PLUS            shift and go to state 78
    MINUS           shift and go to state 79

  ! PLUS            [ reduce using rule 56 (exp3 -> exp3 DIVIDE exp4 .) ]
  ! MINUS           [ reduce using rule 56 (exp3 -> exp3 DIVIDE exp4 .) ]
  ! DPLUS           [ reduce using rule 58 (exp3 -> exp4 .) ]
  ! DMINUS          [ reduce using rule 58 (exp3 -> exp4 .) ]
  ! IF              [ reduce using rule 58 (exp3 -> exp4 .) ]
  ! VAR             [ reduce using rule 58 (exp3 -> exp4 .) ]
  ! FOR             [ reduce using rule 58 (exp3 -> exp4 .) ]
  ! RETURN          [ reduce using rule 58 (exp3 -> exp4 .) ]
  ! ASSIGN          [ reduce using rule 58 (exp3 -> exp4 .) ]
  ! COLONEQ         [ reduce using rule 58 (exp3 -> exp4 .) ]
  ! OR              [ reduce using rule 58 (exp3 -> exp4 .) ]
  ! AND             [ reduce using rule 58 (exp3 -> exp4 .) ]
  ! EQUALS          [ reduce using rule 58 (exp3 -> exp4 .) ]
  ! DIFFERENT       [ reduce using rule 58 (exp3 -> exp4 .) ]
  ! LESS            [ reduce using rule 58 (exp3 -> exp4 .) ]
  ! GREATER         [ reduce using rule 58 (exp3 -> exp4 .) ]
  ! LESS_EQUAL      [ reduce using rule 58 (exp3 -> exp4 .) ]
  ! GREATER_EQUAL   [ reduce using rule 58 (exp3 -> exp4 .) ]
  ! PLUS            [ reduce using rule 58 (exp3 -> exp4 .) ]
  ! MINUS           [ reduce using rule 58 (exp3 -> exp4 .) ]
  ! TIMES           [ reduce using rule 58 (exp3 -> exp4 .) ]
  ! DIVIDE          [ reduce using rule 58 (exp3 -> exp4 .) ]
  ! MOD             [ reduce using rule 58 (exp3 -> exp4 .) ]
  ! SEMICOLON       [ reduce using rule 58 (exp3 -> exp4 .) ]
  ! COMMA           [ reduce using rule 58 (exp3 -> exp4 .) ]
  ! RCHAVES         [ reduce using rule 58 (exp3 -> exp4 .) ]
  ! ELSE            [ reduce using rule 58 (exp3 -> exp4 .) ]
  ! RPAREN          [ reduce using rule 58 (exp3 -> exp4 .) ]


state 101

    (57) exp3 -> exp3 MOD exp4 .
    (59) exp4 -> exp4 . PLUS exp5
    (60) exp4 -> exp4 . MINUS exp5
    (58) exp3 -> exp4 .

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! reduce/reduce conflict for DPLUS resolved using rule 57 (exp3 -> exp3 MOD exp4 .)
  ! reduce/reduce conflict for DMINUS resolved using rule 57 (exp3 -> exp3 MOD exp4 .)
  ! reduce/reduce conflict for IF resolved using rule 57 (exp3 -> exp3 MOD exp4 .)
  ! reduce/reduce conflict for VAR resolved using rule 57 (exp3 -> exp3 MOD exp4 .)
  ! reduce/reduce conflict for FOR resolved using rule 57 (exp3 -> exp3 MOD exp4 .)
  ! reduce/reduce conflict for RETURN resolved using rule 57 (exp3 -> exp3 MOD exp4 .)
  ! reduce/reduce conflict for ASSIGN resolved using rule 57 (exp3 -> exp3 MOD exp4 .)
  ! reduce/reduce conflict for COLONEQ resolved using rule 57 (exp3 -> exp3 MOD exp4 .)
  ! reduce/reduce conflict for OR resolved using rule 57 (exp3 -> exp3 MOD exp4 .)
  ! reduce/reduce conflict for AND resolved using rule 57 (exp3 -> exp3 MOD exp4 .)
  ! reduce/reduce conflict for EQUALS resolved using rule 57 (exp3 -> exp3 MOD exp4 .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 57 (exp3 -> exp3 MOD exp4 .)
  ! reduce/reduce conflict for LESS resolved using rule 57 (exp3 -> exp3 MOD exp4 .)
  ! reduce/reduce conflict for GREATER resolved using rule 57 (exp3 -> exp3 MOD exp4 .)
  ! reduce/reduce conflict for LESS_EQUAL resolved using rule 57 (exp3 -> exp3 MOD exp4 .)
  ! reduce/reduce conflict for GREATER_EQUAL resolved using rule 57 (exp3 -> exp3 MOD exp4 .)
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! reduce/reduce conflict for TIMES resolved using rule 57 (exp3 -> exp3 MOD exp4 .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 57 (exp3 -> exp3 MOD exp4 .)
  ! reduce/reduce conflict for MOD resolved using rule 57 (exp3 -> exp3 MOD exp4 .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 57 (exp3 -> exp3 MOD exp4 .)
  ! reduce/reduce conflict for COMMA resolved using rule 57 (exp3 -> exp3 MOD exp4 .)
  ! reduce/reduce conflict for RCHAVES resolved using rule 57 (exp3 -> exp3 MOD exp4 .)
  ! reduce/reduce conflict for ELSE resolved using rule 57 (exp3 -> exp3 MOD exp4 .)
  ! reduce/reduce conflict for RPAREN resolved using rule 57 (exp3 -> exp3 MOD exp4 .)
    IF              reduce using rule 57 (exp3 -> exp3 MOD exp4 .)
    VAR             reduce using rule 57 (exp3 -> exp3 MOD exp4 .)
    FOR             reduce using rule 57 (exp3 -> exp3 MOD exp4 .)
    RETURN          reduce using rule 57 (exp3 -> exp3 MOD exp4 .)
    ASSIGN          reduce using rule 57 (exp3 -> exp3 MOD exp4 .)
    COLONEQ         reduce using rule 57 (exp3 -> exp3 MOD exp4 .)
    OR              reduce using rule 57 (exp3 -> exp3 MOD exp4 .)
    AND             reduce using rule 57 (exp3 -> exp3 MOD exp4 .)
    EQUALS          reduce using rule 57 (exp3 -> exp3 MOD exp4 .)
    DIFFERENT       reduce using rule 57 (exp3 -> exp3 MOD exp4 .)
    LESS            reduce using rule 57 (exp3 -> exp3 MOD exp4 .)
    GREATER         reduce using rule 57 (exp3 -> exp3 MOD exp4 .)
    LESS_EQUAL      reduce using rule 57 (exp3 -> exp3 MOD exp4 .)
    GREATER_EQUAL   reduce using rule 57 (exp3 -> exp3 MOD exp4 .)
    TIMES           reduce using rule 57 (exp3 -> exp3 MOD exp4 .)
    DIVIDE          reduce using rule 57 (exp3 -> exp3 MOD exp4 .)
    MOD             reduce using rule 57 (exp3 -> exp3 MOD exp4 .)
    DPLUS           reduce using rule 57 (exp3 -> exp3 MOD exp4 .)
    DMINUS          reduce using rule 57 (exp3 -> exp3 MOD exp4 .)
    SEMICOLON       reduce using rule 57 (exp3 -> exp3 MOD exp4 .)
    COMMA           reduce using rule 57 (exp3 -> exp3 MOD exp4 .)
    RCHAVES         reduce using rule 57 (exp3 -> exp3 MOD exp4 .)
    ELSE            reduce using rule 57 (exp3 -> exp3 MOD exp4 .)
    RPAREN          reduce using rule 57 (exp3 -> exp3 MOD exp4 .)
    PLUS            shift and go to state 78
    MINUS           shift and go to state 79

  ! PLUS            [ reduce using rule 57 (exp3 -> exp3 MOD exp4 .) ]
  ! MINUS           [ reduce using rule 57 (exp3 -> exp3 MOD exp4 .) ]
  ! DPLUS           [ reduce using rule 58 (exp3 -> exp4 .) ]
  ! DMINUS          [ reduce using rule 58 (exp3 -> exp4 .) ]
  ! IF              [ reduce using rule 58 (exp3 -> exp4 .) ]
  ! VAR             [ reduce using rule 58 (exp3 -> exp4 .) ]
  ! FOR             [ reduce using rule 58 (exp3 -> exp4 .) ]
  ! RETURN          [ reduce using rule 58 (exp3 -> exp4 .) ]
  ! ASSIGN          [ reduce using rule 58 (exp3 -> exp4 .) ]
  ! COLONEQ         [ reduce using rule 58 (exp3 -> exp4 .) ]
  ! OR              [ reduce using rule 58 (exp3 -> exp4 .) ]
  ! AND             [ reduce using rule 58 (exp3 -> exp4 .) ]
  ! EQUALS          [ reduce using rule 58 (exp3 -> exp4 .) ]
  ! DIFFERENT       [ reduce using rule 58 (exp3 -> exp4 .) ]
  ! LESS            [ reduce using rule 58 (exp3 -> exp4 .) ]
  ! GREATER         [ reduce using rule 58 (exp3 -> exp4 .) ]
  ! LESS_EQUAL      [ reduce using rule 58 (exp3 -> exp4 .) ]
  ! GREATER_EQUAL   [ reduce using rule 58 (exp3 -> exp4 .) ]
  ! PLUS            [ reduce using rule 58 (exp3 -> exp4 .) ]
  ! MINUS           [ reduce using rule 58 (exp3 -> exp4 .) ]
  ! TIMES           [ reduce using rule 58 (exp3 -> exp4 .) ]
  ! DIVIDE          [ reduce using rule 58 (exp3 -> exp4 .) ]
  ! MOD             [ reduce using rule 58 (exp3 -> exp4 .) ]
  ! SEMICOLON       [ reduce using rule 58 (exp3 -> exp4 .) ]
  ! COMMA           [ reduce using rule 58 (exp3 -> exp4 .) ]
  ! RCHAVES         [ reduce using rule 58 (exp3 -> exp4 .) ]
  ! ELSE            [ reduce using rule 58 (exp3 -> exp4 .) ]
  ! RPAREN          [ reduce using rule 58 (exp3 -> exp4 .) ]


state 102

    (59) exp4 -> exp4 PLUS exp5 .
    (62) exp5 -> exp5 . LESS exp6
    (63) exp5 -> exp5 . GREATER exp6
    (64) exp5 -> exp5 . LESS_EQUAL exp6
    (65) exp5 -> exp5 . GREATER_EQUAL exp6
    (61) exp4 -> exp5 .

  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! reduce/reduce conflict for DPLUS resolved using rule 59 (exp4 -> exp4 PLUS exp5 .)
  ! reduce/reduce conflict for DMINUS resolved using rule 59 (exp4 -> exp4 PLUS exp5 .)
  ! reduce/reduce conflict for IF resolved using rule 59 (exp4 -> exp4 PLUS exp5 .)
  ! reduce/reduce conflict for VAR resolved using rule 59 (exp4 -> exp4 PLUS exp5 .)
  ! reduce/reduce conflict for FOR resolved using rule 59 (exp4 -> exp4 PLUS exp5 .)
  ! reduce/reduce conflict for RETURN resolved using rule 59 (exp4 -> exp4 PLUS exp5 .)
  ! reduce/reduce conflict for ASSIGN resolved using rule 59 (exp4 -> exp4 PLUS exp5 .)
  ! reduce/reduce conflict for COLONEQ resolved using rule 59 (exp4 -> exp4 PLUS exp5 .)
  ! reduce/reduce conflict for OR resolved using rule 59 (exp4 -> exp4 PLUS exp5 .)
  ! reduce/reduce conflict for AND resolved using rule 59 (exp4 -> exp4 PLUS exp5 .)
  ! reduce/reduce conflict for EQUALS resolved using rule 59 (exp4 -> exp4 PLUS exp5 .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 59 (exp4 -> exp4 PLUS exp5 .)
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! reduce/reduce conflict for PLUS resolved using rule 59 (exp4 -> exp4 PLUS exp5 .)
  ! reduce/reduce conflict for MINUS resolved using rule 59 (exp4 -> exp4 PLUS exp5 .)
  ! reduce/reduce conflict for TIMES resolved using rule 59 (exp4 -> exp4 PLUS exp5 .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 59 (exp4 -> exp4 PLUS exp5 .)
  ! reduce/reduce conflict for MOD resolved using rule 59 (exp4 -> exp4 PLUS exp5 .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 59 (exp4 -> exp4 PLUS exp5 .)
  ! reduce/reduce conflict for COMMA resolved using rule 59 (exp4 -> exp4 PLUS exp5 .)
  ! reduce/reduce conflict for RCHAVES resolved using rule 59 (exp4 -> exp4 PLUS exp5 .)
  ! reduce/reduce conflict for ELSE resolved using rule 59 (exp4 -> exp4 PLUS exp5 .)
  ! reduce/reduce conflict for RPAREN resolved using rule 59 (exp4 -> exp4 PLUS exp5 .)
    IF              reduce using rule 59 (exp4 -> exp4 PLUS exp5 .)
    VAR             reduce using rule 59 (exp4 -> exp4 PLUS exp5 .)
    FOR             reduce using rule 59 (exp4 -> exp4 PLUS exp5 .)
    RETURN          reduce using rule 59 (exp4 -> exp4 PLUS exp5 .)
    ASSIGN          reduce using rule 59 (exp4 -> exp4 PLUS exp5 .)
    COLONEQ         reduce using rule 59 (exp4 -> exp4 PLUS exp5 .)
    OR              reduce using rule 59 (exp4 -> exp4 PLUS exp5 .)
    AND             reduce using rule 59 (exp4 -> exp4 PLUS exp5 .)
    EQUALS          reduce using rule 59 (exp4 -> exp4 PLUS exp5 .)
    DIFFERENT       reduce using rule 59 (exp4 -> exp4 PLUS exp5 .)
    PLUS            reduce using rule 59 (exp4 -> exp4 PLUS exp5 .)
    MINUS           reduce using rule 59 (exp4 -> exp4 PLUS exp5 .)
    TIMES           reduce using rule 59 (exp4 -> exp4 PLUS exp5 .)
    DIVIDE          reduce using rule 59 (exp4 -> exp4 PLUS exp5 .)
    MOD             reduce using rule 59 (exp4 -> exp4 PLUS exp5 .)
    DPLUS           reduce using rule 59 (exp4 -> exp4 PLUS exp5 .)
    DMINUS          reduce using rule 59 (exp4 -> exp4 PLUS exp5 .)
    SEMICOLON       reduce using rule 59 (exp4 -> exp4 PLUS exp5 .)
    COMMA           reduce using rule 59 (exp4 -> exp4 PLUS exp5 .)
    RCHAVES         reduce using rule 59 (exp4 -> exp4 PLUS exp5 .)
    ELSE            reduce using rule 59 (exp4 -> exp4 PLUS exp5 .)
    RPAREN          reduce using rule 59 (exp4 -> exp4 PLUS exp5 .)
    LESS            shift and go to state 80
    GREATER         shift and go to state 81
    LESS_EQUAL      shift and go to state 82
    GREATER_EQUAL   shift and go to state 83

  ! LESS            [ reduce using rule 59 (exp4 -> exp4 PLUS exp5 .) ]
  ! GREATER         [ reduce using rule 59 (exp4 -> exp4 PLUS exp5 .) ]
  ! LESS_EQUAL      [ reduce using rule 59 (exp4 -> exp4 PLUS exp5 .) ]
  ! GREATER_EQUAL   [ reduce using rule 59 (exp4 -> exp4 PLUS exp5 .) ]
  ! DPLUS           [ reduce using rule 61 (exp4 -> exp5 .) ]
  ! DMINUS          [ reduce using rule 61 (exp4 -> exp5 .) ]
  ! IF              [ reduce using rule 61 (exp4 -> exp5 .) ]
  ! VAR             [ reduce using rule 61 (exp4 -> exp5 .) ]
  ! FOR             [ reduce using rule 61 (exp4 -> exp5 .) ]
  ! RETURN          [ reduce using rule 61 (exp4 -> exp5 .) ]
  ! ASSIGN          [ reduce using rule 61 (exp4 -> exp5 .) ]
  ! COLONEQ         [ reduce using rule 61 (exp4 -> exp5 .) ]
  ! OR              [ reduce using rule 61 (exp4 -> exp5 .) ]
  ! AND             [ reduce using rule 61 (exp4 -> exp5 .) ]
  ! EQUALS          [ reduce using rule 61 (exp4 -> exp5 .) ]
  ! DIFFERENT       [ reduce using rule 61 (exp4 -> exp5 .) ]
  ! LESS            [ reduce using rule 61 (exp4 -> exp5 .) ]
  ! GREATER         [ reduce using rule 61 (exp4 -> exp5 .) ]
  ! LESS_EQUAL      [ reduce using rule 61 (exp4 -> exp5 .) ]
  ! GREATER_EQUAL   [ reduce using rule 61 (exp4 -> exp5 .) ]
  ! PLUS            [ reduce using rule 61 (exp4 -> exp5 .) ]
  ! MINUS           [ reduce using rule 61 (exp4 -> exp5 .) ]
  ! TIMES           [ reduce using rule 61 (exp4 -> exp5 .) ]
  ! DIVIDE          [ reduce using rule 61 (exp4 -> exp5 .) ]
  ! MOD             [ reduce using rule 61 (exp4 -> exp5 .) ]
  ! SEMICOLON       [ reduce using rule 61 (exp4 -> exp5 .) ]
  ! COMMA           [ reduce using rule 61 (exp4 -> exp5 .) ]
  ! RCHAVES         [ reduce using rule 61 (exp4 -> exp5 .) ]
  ! ELSE            [ reduce using rule 61 (exp4 -> exp5 .) ]
  ! RPAREN          [ reduce using rule 61 (exp4 -> exp5 .) ]


state 103

    (60) exp4 -> exp4 MINUS exp5 .
    (62) exp5 -> exp5 . LESS exp6
    (63) exp5 -> exp5 . GREATER exp6
    (64) exp5 -> exp5 . LESS_EQUAL exp6
    (65) exp5 -> exp5 . GREATER_EQUAL exp6
    (61) exp4 -> exp5 .

  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! reduce/reduce conflict for DPLUS resolved using rule 60 (exp4 -> exp4 MINUS exp5 .)
  ! reduce/reduce conflict for DMINUS resolved using rule 60 (exp4 -> exp4 MINUS exp5 .)
  ! reduce/reduce conflict for IF resolved using rule 60 (exp4 -> exp4 MINUS exp5 .)
  ! reduce/reduce conflict for VAR resolved using rule 60 (exp4 -> exp4 MINUS exp5 .)
  ! reduce/reduce conflict for FOR resolved using rule 60 (exp4 -> exp4 MINUS exp5 .)
  ! reduce/reduce conflict for RETURN resolved using rule 60 (exp4 -> exp4 MINUS exp5 .)
  ! reduce/reduce conflict for ASSIGN resolved using rule 60 (exp4 -> exp4 MINUS exp5 .)
  ! reduce/reduce conflict for COLONEQ resolved using rule 60 (exp4 -> exp4 MINUS exp5 .)
  ! reduce/reduce conflict for OR resolved using rule 60 (exp4 -> exp4 MINUS exp5 .)
  ! reduce/reduce conflict for AND resolved using rule 60 (exp4 -> exp4 MINUS exp5 .)
  ! reduce/reduce conflict for EQUALS resolved using rule 60 (exp4 -> exp4 MINUS exp5 .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 60 (exp4 -> exp4 MINUS exp5 .)
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! reduce/reduce conflict for PLUS resolved using rule 60 (exp4 -> exp4 MINUS exp5 .)
  ! reduce/reduce conflict for MINUS resolved using rule 60 (exp4 -> exp4 MINUS exp5 .)
  ! reduce/reduce conflict for TIMES resolved using rule 60 (exp4 -> exp4 MINUS exp5 .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 60 (exp4 -> exp4 MINUS exp5 .)
  ! reduce/reduce conflict for MOD resolved using rule 60 (exp4 -> exp4 MINUS exp5 .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 60 (exp4 -> exp4 MINUS exp5 .)
  ! reduce/reduce conflict for COMMA resolved using rule 60 (exp4 -> exp4 MINUS exp5 .)
  ! reduce/reduce conflict for RCHAVES resolved using rule 60 (exp4 -> exp4 MINUS exp5 .)
  ! reduce/reduce conflict for ELSE resolved using rule 60 (exp4 -> exp4 MINUS exp5 .)
  ! reduce/reduce conflict for RPAREN resolved using rule 60 (exp4 -> exp4 MINUS exp5 .)
    IF              reduce using rule 60 (exp4 -> exp4 MINUS exp5 .)
    VAR             reduce using rule 60 (exp4 -> exp4 MINUS exp5 .)
    FOR             reduce using rule 60 (exp4 -> exp4 MINUS exp5 .)
    RETURN          reduce using rule 60 (exp4 -> exp4 MINUS exp5 .)
    ASSIGN          reduce using rule 60 (exp4 -> exp4 MINUS exp5 .)
    COLONEQ         reduce using rule 60 (exp4 -> exp4 MINUS exp5 .)
    OR              reduce using rule 60 (exp4 -> exp4 MINUS exp5 .)
    AND             reduce using rule 60 (exp4 -> exp4 MINUS exp5 .)
    EQUALS          reduce using rule 60 (exp4 -> exp4 MINUS exp5 .)
    DIFFERENT       reduce using rule 60 (exp4 -> exp4 MINUS exp5 .)
    PLUS            reduce using rule 60 (exp4 -> exp4 MINUS exp5 .)
    MINUS           reduce using rule 60 (exp4 -> exp4 MINUS exp5 .)
    TIMES           reduce using rule 60 (exp4 -> exp4 MINUS exp5 .)
    DIVIDE          reduce using rule 60 (exp4 -> exp4 MINUS exp5 .)
    MOD             reduce using rule 60 (exp4 -> exp4 MINUS exp5 .)
    DPLUS           reduce using rule 60 (exp4 -> exp4 MINUS exp5 .)
    DMINUS          reduce using rule 60 (exp4 -> exp4 MINUS exp5 .)
    SEMICOLON       reduce using rule 60 (exp4 -> exp4 MINUS exp5 .)
    COMMA           reduce using rule 60 (exp4 -> exp4 MINUS exp5 .)
    RCHAVES         reduce using rule 60 (exp4 -> exp4 MINUS exp5 .)
    ELSE            reduce using rule 60 (exp4 -> exp4 MINUS exp5 .)
    RPAREN          reduce using rule 60 (exp4 -> exp4 MINUS exp5 .)
    LESS            shift and go to state 80
    GREATER         shift and go to state 81
    LESS_EQUAL      shift and go to state 82
    GREATER_EQUAL   shift and go to state 83

  ! LESS            [ reduce using rule 60 (exp4 -> exp4 MINUS exp5 .) ]
  ! GREATER         [ reduce using rule 60 (exp4 -> exp4 MINUS exp5 .) ]
  ! LESS_EQUAL      [ reduce using rule 60 (exp4 -> exp4 MINUS exp5 .) ]
  ! GREATER_EQUAL   [ reduce using rule 60 (exp4 -> exp4 MINUS exp5 .) ]
  ! DPLUS           [ reduce using rule 61 (exp4 -> exp5 .) ]
  ! DMINUS          [ reduce using rule 61 (exp4 -> exp5 .) ]
  ! IF              [ reduce using rule 61 (exp4 -> exp5 .) ]
  ! VAR             [ reduce using rule 61 (exp4 -> exp5 .) ]
  ! FOR             [ reduce using rule 61 (exp4 -> exp5 .) ]
  ! RETURN          [ reduce using rule 61 (exp4 -> exp5 .) ]
  ! ASSIGN          [ reduce using rule 61 (exp4 -> exp5 .) ]
  ! COLONEQ         [ reduce using rule 61 (exp4 -> exp5 .) ]
  ! OR              [ reduce using rule 61 (exp4 -> exp5 .) ]
  ! AND             [ reduce using rule 61 (exp4 -> exp5 .) ]
  ! EQUALS          [ reduce using rule 61 (exp4 -> exp5 .) ]
  ! DIFFERENT       [ reduce using rule 61 (exp4 -> exp5 .) ]
  ! LESS            [ reduce using rule 61 (exp4 -> exp5 .) ]
  ! GREATER         [ reduce using rule 61 (exp4 -> exp5 .) ]
  ! LESS_EQUAL      [ reduce using rule 61 (exp4 -> exp5 .) ]
  ! GREATER_EQUAL   [ reduce using rule 61 (exp4 -> exp5 .) ]
  ! PLUS            [ reduce using rule 61 (exp4 -> exp5 .) ]
  ! MINUS           [ reduce using rule 61 (exp4 -> exp5 .) ]
  ! TIMES           [ reduce using rule 61 (exp4 -> exp5 .) ]
  ! DIVIDE          [ reduce using rule 61 (exp4 -> exp5 .) ]
  ! MOD             [ reduce using rule 61 (exp4 -> exp5 .) ]
  ! SEMICOLON       [ reduce using rule 61 (exp4 -> exp5 .) ]
  ! COMMA           [ reduce using rule 61 (exp4 -> exp5 .) ]
  ! RCHAVES         [ reduce using rule 61 (exp4 -> exp5 .) ]
  ! ELSE            [ reduce using rule 61 (exp4 -> exp5 .) ]
  ! RPAREN          [ reduce using rule 61 (exp4 -> exp5 .) ]


state 104

    (62) exp5 -> exp5 LESS exp6 .
    (67) exp6 -> exp6 . EQUALS exp7
    (68) exp6 -> exp6 . DIFFERENT exp7
    (66) exp5 -> exp6 .

  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for DIFFERENT resolved as shift
  ! reduce/reduce conflict for DPLUS resolved using rule 62 (exp5 -> exp5 LESS exp6 .)
  ! reduce/reduce conflict for DMINUS resolved using rule 62 (exp5 -> exp5 LESS exp6 .)
  ! reduce/reduce conflict for IF resolved using rule 62 (exp5 -> exp5 LESS exp6 .)
  ! reduce/reduce conflict for VAR resolved using rule 62 (exp5 -> exp5 LESS exp6 .)
  ! reduce/reduce conflict for FOR resolved using rule 62 (exp5 -> exp5 LESS exp6 .)
  ! reduce/reduce conflict for RETURN resolved using rule 62 (exp5 -> exp5 LESS exp6 .)
  ! reduce/reduce conflict for ASSIGN resolved using rule 62 (exp5 -> exp5 LESS exp6 .)
  ! reduce/reduce conflict for COLONEQ resolved using rule 62 (exp5 -> exp5 LESS exp6 .)
  ! reduce/reduce conflict for OR resolved using rule 62 (exp5 -> exp5 LESS exp6 .)
  ! reduce/reduce conflict for AND resolved using rule 62 (exp5 -> exp5 LESS exp6 .)
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for DIFFERENT resolved as shift
  ! reduce/reduce conflict for LESS resolved using rule 62 (exp5 -> exp5 LESS exp6 .)
  ! reduce/reduce conflict for GREATER resolved using rule 62 (exp5 -> exp5 LESS exp6 .)
  ! reduce/reduce conflict for LESS_EQUAL resolved using rule 62 (exp5 -> exp5 LESS exp6 .)
  ! reduce/reduce conflict for GREATER_EQUAL resolved using rule 62 (exp5 -> exp5 LESS exp6 .)
  ! reduce/reduce conflict for PLUS resolved using rule 62 (exp5 -> exp5 LESS exp6 .)
  ! reduce/reduce conflict for MINUS resolved using rule 62 (exp5 -> exp5 LESS exp6 .)
  ! reduce/reduce conflict for TIMES resolved using rule 62 (exp5 -> exp5 LESS exp6 .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 62 (exp5 -> exp5 LESS exp6 .)
  ! reduce/reduce conflict for MOD resolved using rule 62 (exp5 -> exp5 LESS exp6 .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 62 (exp5 -> exp5 LESS exp6 .)
  ! reduce/reduce conflict for COMMA resolved using rule 62 (exp5 -> exp5 LESS exp6 .)
  ! reduce/reduce conflict for RCHAVES resolved using rule 62 (exp5 -> exp5 LESS exp6 .)
  ! reduce/reduce conflict for ELSE resolved using rule 62 (exp5 -> exp5 LESS exp6 .)
  ! reduce/reduce conflict for RPAREN resolved using rule 62 (exp5 -> exp5 LESS exp6 .)
    IF              reduce using rule 62 (exp5 -> exp5 LESS exp6 .)
    VAR             reduce using rule 62 (exp5 -> exp5 LESS exp6 .)
    FOR             reduce using rule 62 (exp5 -> exp5 LESS exp6 .)
    RETURN          reduce using rule 62 (exp5 -> exp5 LESS exp6 .)
    ASSIGN          reduce using rule 62 (exp5 -> exp5 LESS exp6 .)
    COLONEQ         reduce using rule 62 (exp5 -> exp5 LESS exp6 .)
    OR              reduce using rule 62 (exp5 -> exp5 LESS exp6 .)
    AND             reduce using rule 62 (exp5 -> exp5 LESS exp6 .)
    LESS            reduce using rule 62 (exp5 -> exp5 LESS exp6 .)
    GREATER         reduce using rule 62 (exp5 -> exp5 LESS exp6 .)
    LESS_EQUAL      reduce using rule 62 (exp5 -> exp5 LESS exp6 .)
    GREATER_EQUAL   reduce using rule 62 (exp5 -> exp5 LESS exp6 .)
    PLUS            reduce using rule 62 (exp5 -> exp5 LESS exp6 .)
    MINUS           reduce using rule 62 (exp5 -> exp5 LESS exp6 .)
    TIMES           reduce using rule 62 (exp5 -> exp5 LESS exp6 .)
    DIVIDE          reduce using rule 62 (exp5 -> exp5 LESS exp6 .)
    MOD             reduce using rule 62 (exp5 -> exp5 LESS exp6 .)
    DPLUS           reduce using rule 62 (exp5 -> exp5 LESS exp6 .)
    DMINUS          reduce using rule 62 (exp5 -> exp5 LESS exp6 .)
    SEMICOLON       reduce using rule 62 (exp5 -> exp5 LESS exp6 .)
    COMMA           reduce using rule 62 (exp5 -> exp5 LESS exp6 .)
    RCHAVES         reduce using rule 62 (exp5 -> exp5 LESS exp6 .)
    ELSE            reduce using rule 62 (exp5 -> exp5 LESS exp6 .)
    RPAREN          reduce using rule 62 (exp5 -> exp5 LESS exp6 .)
    EQUALS          shift and go to state 84
    DIFFERENT       shift and go to state 85

  ! EQUALS          [ reduce using rule 62 (exp5 -> exp5 LESS exp6 .) ]
  ! DIFFERENT       [ reduce using rule 62 (exp5 -> exp5 LESS exp6 .) ]
  ! DPLUS           [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! DMINUS          [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! IF              [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! VAR             [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! FOR             [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! RETURN          [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! ASSIGN          [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! COLONEQ         [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! OR              [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! AND             [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! EQUALS          [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! DIFFERENT       [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! LESS            [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! GREATER         [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! LESS_EQUAL      [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! GREATER_EQUAL   [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! PLUS            [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! MINUS           [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! TIMES           [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! DIVIDE          [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! MOD             [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! SEMICOLON       [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! COMMA           [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! RCHAVES         [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! ELSE            [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! RPAREN          [ reduce using rule 66 (exp5 -> exp6 .) ]


state 105

    (63) exp5 -> exp5 GREATER exp6 .
    (67) exp6 -> exp6 . EQUALS exp7
    (68) exp6 -> exp6 . DIFFERENT exp7
    (66) exp5 -> exp6 .

  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for DIFFERENT resolved as shift
  ! reduce/reduce conflict for DPLUS resolved using rule 63 (exp5 -> exp5 GREATER exp6 .)
  ! reduce/reduce conflict for DMINUS resolved using rule 63 (exp5 -> exp5 GREATER exp6 .)
  ! reduce/reduce conflict for IF resolved using rule 63 (exp5 -> exp5 GREATER exp6 .)
  ! reduce/reduce conflict for VAR resolved using rule 63 (exp5 -> exp5 GREATER exp6 .)
  ! reduce/reduce conflict for FOR resolved using rule 63 (exp5 -> exp5 GREATER exp6 .)
  ! reduce/reduce conflict for RETURN resolved using rule 63 (exp5 -> exp5 GREATER exp6 .)
  ! reduce/reduce conflict for ASSIGN resolved using rule 63 (exp5 -> exp5 GREATER exp6 .)
  ! reduce/reduce conflict for COLONEQ resolved using rule 63 (exp5 -> exp5 GREATER exp6 .)
  ! reduce/reduce conflict for OR resolved using rule 63 (exp5 -> exp5 GREATER exp6 .)
  ! reduce/reduce conflict for AND resolved using rule 63 (exp5 -> exp5 GREATER exp6 .)
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for DIFFERENT resolved as shift
  ! reduce/reduce conflict for LESS resolved using rule 63 (exp5 -> exp5 GREATER exp6 .)
  ! reduce/reduce conflict for GREATER resolved using rule 63 (exp5 -> exp5 GREATER exp6 .)
  ! reduce/reduce conflict for LESS_EQUAL resolved using rule 63 (exp5 -> exp5 GREATER exp6 .)
  ! reduce/reduce conflict for GREATER_EQUAL resolved using rule 63 (exp5 -> exp5 GREATER exp6 .)
  ! reduce/reduce conflict for PLUS resolved using rule 63 (exp5 -> exp5 GREATER exp6 .)
  ! reduce/reduce conflict for MINUS resolved using rule 63 (exp5 -> exp5 GREATER exp6 .)
  ! reduce/reduce conflict for TIMES resolved using rule 63 (exp5 -> exp5 GREATER exp6 .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 63 (exp5 -> exp5 GREATER exp6 .)
  ! reduce/reduce conflict for MOD resolved using rule 63 (exp5 -> exp5 GREATER exp6 .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 63 (exp5 -> exp5 GREATER exp6 .)
  ! reduce/reduce conflict for COMMA resolved using rule 63 (exp5 -> exp5 GREATER exp6 .)
  ! reduce/reduce conflict for RCHAVES resolved using rule 63 (exp5 -> exp5 GREATER exp6 .)
  ! reduce/reduce conflict for ELSE resolved using rule 63 (exp5 -> exp5 GREATER exp6 .)
  ! reduce/reduce conflict for RPAREN resolved using rule 63 (exp5 -> exp5 GREATER exp6 .)
    IF              reduce using rule 63 (exp5 -> exp5 GREATER exp6 .)
    VAR             reduce using rule 63 (exp5 -> exp5 GREATER exp6 .)
    FOR             reduce using rule 63 (exp5 -> exp5 GREATER exp6 .)
    RETURN          reduce using rule 63 (exp5 -> exp5 GREATER exp6 .)
    ASSIGN          reduce using rule 63 (exp5 -> exp5 GREATER exp6 .)
    COLONEQ         reduce using rule 63 (exp5 -> exp5 GREATER exp6 .)
    OR              reduce using rule 63 (exp5 -> exp5 GREATER exp6 .)
    AND             reduce using rule 63 (exp5 -> exp5 GREATER exp6 .)
    LESS            reduce using rule 63 (exp5 -> exp5 GREATER exp6 .)
    GREATER         reduce using rule 63 (exp5 -> exp5 GREATER exp6 .)
    LESS_EQUAL      reduce using rule 63 (exp5 -> exp5 GREATER exp6 .)
    GREATER_EQUAL   reduce using rule 63 (exp5 -> exp5 GREATER exp6 .)
    PLUS            reduce using rule 63 (exp5 -> exp5 GREATER exp6 .)
    MINUS           reduce using rule 63 (exp5 -> exp5 GREATER exp6 .)
    TIMES           reduce using rule 63 (exp5 -> exp5 GREATER exp6 .)
    DIVIDE          reduce using rule 63 (exp5 -> exp5 GREATER exp6 .)
    MOD             reduce using rule 63 (exp5 -> exp5 GREATER exp6 .)
    DPLUS           reduce using rule 63 (exp5 -> exp5 GREATER exp6 .)
    DMINUS          reduce using rule 63 (exp5 -> exp5 GREATER exp6 .)
    SEMICOLON       reduce using rule 63 (exp5 -> exp5 GREATER exp6 .)
    COMMA           reduce using rule 63 (exp5 -> exp5 GREATER exp6 .)
    RCHAVES         reduce using rule 63 (exp5 -> exp5 GREATER exp6 .)
    ELSE            reduce using rule 63 (exp5 -> exp5 GREATER exp6 .)
    RPAREN          reduce using rule 63 (exp5 -> exp5 GREATER exp6 .)
    EQUALS          shift and go to state 84
    DIFFERENT       shift and go to state 85

  ! EQUALS          [ reduce using rule 63 (exp5 -> exp5 GREATER exp6 .) ]
  ! DIFFERENT       [ reduce using rule 63 (exp5 -> exp5 GREATER exp6 .) ]
  ! DPLUS           [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! DMINUS          [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! IF              [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! VAR             [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! FOR             [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! RETURN          [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! ASSIGN          [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! COLONEQ         [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! OR              [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! AND             [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! EQUALS          [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! DIFFERENT       [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! LESS            [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! GREATER         [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! LESS_EQUAL      [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! GREATER_EQUAL   [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! PLUS            [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! MINUS           [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! TIMES           [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! DIVIDE          [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! MOD             [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! SEMICOLON       [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! COMMA           [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! RCHAVES         [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! ELSE            [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! RPAREN          [ reduce using rule 66 (exp5 -> exp6 .) ]


state 106

    (64) exp5 -> exp5 LESS_EQUAL exp6 .
    (67) exp6 -> exp6 . EQUALS exp7
    (68) exp6 -> exp6 . DIFFERENT exp7
    (66) exp5 -> exp6 .

  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for DIFFERENT resolved as shift
  ! reduce/reduce conflict for DPLUS resolved using rule 64 (exp5 -> exp5 LESS_EQUAL exp6 .)
  ! reduce/reduce conflict for DMINUS resolved using rule 64 (exp5 -> exp5 LESS_EQUAL exp6 .)
  ! reduce/reduce conflict for IF resolved using rule 64 (exp5 -> exp5 LESS_EQUAL exp6 .)
  ! reduce/reduce conflict for VAR resolved using rule 64 (exp5 -> exp5 LESS_EQUAL exp6 .)
  ! reduce/reduce conflict for FOR resolved using rule 64 (exp5 -> exp5 LESS_EQUAL exp6 .)
  ! reduce/reduce conflict for RETURN resolved using rule 64 (exp5 -> exp5 LESS_EQUAL exp6 .)
  ! reduce/reduce conflict for ASSIGN resolved using rule 64 (exp5 -> exp5 LESS_EQUAL exp6 .)
  ! reduce/reduce conflict for COLONEQ resolved using rule 64 (exp5 -> exp5 LESS_EQUAL exp6 .)
  ! reduce/reduce conflict for OR resolved using rule 64 (exp5 -> exp5 LESS_EQUAL exp6 .)
  ! reduce/reduce conflict for AND resolved using rule 64 (exp5 -> exp5 LESS_EQUAL exp6 .)
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for DIFFERENT resolved as shift
  ! reduce/reduce conflict for LESS resolved using rule 64 (exp5 -> exp5 LESS_EQUAL exp6 .)
  ! reduce/reduce conflict for GREATER resolved using rule 64 (exp5 -> exp5 LESS_EQUAL exp6 .)
  ! reduce/reduce conflict for LESS_EQUAL resolved using rule 64 (exp5 -> exp5 LESS_EQUAL exp6 .)
  ! reduce/reduce conflict for GREATER_EQUAL resolved using rule 64 (exp5 -> exp5 LESS_EQUAL exp6 .)
  ! reduce/reduce conflict for PLUS resolved using rule 64 (exp5 -> exp5 LESS_EQUAL exp6 .)
  ! reduce/reduce conflict for MINUS resolved using rule 64 (exp5 -> exp5 LESS_EQUAL exp6 .)
  ! reduce/reduce conflict for TIMES resolved using rule 64 (exp5 -> exp5 LESS_EQUAL exp6 .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 64 (exp5 -> exp5 LESS_EQUAL exp6 .)
  ! reduce/reduce conflict for MOD resolved using rule 64 (exp5 -> exp5 LESS_EQUAL exp6 .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 64 (exp5 -> exp5 LESS_EQUAL exp6 .)
  ! reduce/reduce conflict for COMMA resolved using rule 64 (exp5 -> exp5 LESS_EQUAL exp6 .)
  ! reduce/reduce conflict for RCHAVES resolved using rule 64 (exp5 -> exp5 LESS_EQUAL exp6 .)
  ! reduce/reduce conflict for ELSE resolved using rule 64 (exp5 -> exp5 LESS_EQUAL exp6 .)
  ! reduce/reduce conflict for RPAREN resolved using rule 64 (exp5 -> exp5 LESS_EQUAL exp6 .)
    IF              reduce using rule 64 (exp5 -> exp5 LESS_EQUAL exp6 .)
    VAR             reduce using rule 64 (exp5 -> exp5 LESS_EQUAL exp6 .)
    FOR             reduce using rule 64 (exp5 -> exp5 LESS_EQUAL exp6 .)
    RETURN          reduce using rule 64 (exp5 -> exp5 LESS_EQUAL exp6 .)
    ASSIGN          reduce using rule 64 (exp5 -> exp5 LESS_EQUAL exp6 .)
    COLONEQ         reduce using rule 64 (exp5 -> exp5 LESS_EQUAL exp6 .)
    OR              reduce using rule 64 (exp5 -> exp5 LESS_EQUAL exp6 .)
    AND             reduce using rule 64 (exp5 -> exp5 LESS_EQUAL exp6 .)
    LESS            reduce using rule 64 (exp5 -> exp5 LESS_EQUAL exp6 .)
    GREATER         reduce using rule 64 (exp5 -> exp5 LESS_EQUAL exp6 .)
    LESS_EQUAL      reduce using rule 64 (exp5 -> exp5 LESS_EQUAL exp6 .)
    GREATER_EQUAL   reduce using rule 64 (exp5 -> exp5 LESS_EQUAL exp6 .)
    PLUS            reduce using rule 64 (exp5 -> exp5 LESS_EQUAL exp6 .)
    MINUS           reduce using rule 64 (exp5 -> exp5 LESS_EQUAL exp6 .)
    TIMES           reduce using rule 64 (exp5 -> exp5 LESS_EQUAL exp6 .)
    DIVIDE          reduce using rule 64 (exp5 -> exp5 LESS_EQUAL exp6 .)
    MOD             reduce using rule 64 (exp5 -> exp5 LESS_EQUAL exp6 .)
    DPLUS           reduce using rule 64 (exp5 -> exp5 LESS_EQUAL exp6 .)
    DMINUS          reduce using rule 64 (exp5 -> exp5 LESS_EQUAL exp6 .)
    SEMICOLON       reduce using rule 64 (exp5 -> exp5 LESS_EQUAL exp6 .)
    COMMA           reduce using rule 64 (exp5 -> exp5 LESS_EQUAL exp6 .)
    RCHAVES         reduce using rule 64 (exp5 -> exp5 LESS_EQUAL exp6 .)
    ELSE            reduce using rule 64 (exp5 -> exp5 LESS_EQUAL exp6 .)
    RPAREN          reduce using rule 64 (exp5 -> exp5 LESS_EQUAL exp6 .)
    EQUALS          shift and go to state 84
    DIFFERENT       shift and go to state 85

  ! EQUALS          [ reduce using rule 64 (exp5 -> exp5 LESS_EQUAL exp6 .) ]
  ! DIFFERENT       [ reduce using rule 64 (exp5 -> exp5 LESS_EQUAL exp6 .) ]
  ! DPLUS           [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! DMINUS          [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! IF              [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! VAR             [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! FOR             [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! RETURN          [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! ASSIGN          [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! COLONEQ         [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! OR              [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! AND             [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! EQUALS          [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! DIFFERENT       [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! LESS            [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! GREATER         [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! LESS_EQUAL      [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! GREATER_EQUAL   [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! PLUS            [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! MINUS           [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! TIMES           [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! DIVIDE          [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! MOD             [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! SEMICOLON       [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! COMMA           [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! RCHAVES         [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! ELSE            [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! RPAREN          [ reduce using rule 66 (exp5 -> exp6 .) ]


state 107

    (65) exp5 -> exp5 GREATER_EQUAL exp6 .
    (67) exp6 -> exp6 . EQUALS exp7
    (68) exp6 -> exp6 . DIFFERENT exp7
    (66) exp5 -> exp6 .

  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for DIFFERENT resolved as shift
  ! reduce/reduce conflict for DPLUS resolved using rule 65 (exp5 -> exp5 GREATER_EQUAL exp6 .)
  ! reduce/reduce conflict for DMINUS resolved using rule 65 (exp5 -> exp5 GREATER_EQUAL exp6 .)
  ! reduce/reduce conflict for IF resolved using rule 65 (exp5 -> exp5 GREATER_EQUAL exp6 .)
  ! reduce/reduce conflict for VAR resolved using rule 65 (exp5 -> exp5 GREATER_EQUAL exp6 .)
  ! reduce/reduce conflict for FOR resolved using rule 65 (exp5 -> exp5 GREATER_EQUAL exp6 .)
  ! reduce/reduce conflict for RETURN resolved using rule 65 (exp5 -> exp5 GREATER_EQUAL exp6 .)
  ! reduce/reduce conflict for ASSIGN resolved using rule 65 (exp5 -> exp5 GREATER_EQUAL exp6 .)
  ! reduce/reduce conflict for COLONEQ resolved using rule 65 (exp5 -> exp5 GREATER_EQUAL exp6 .)
  ! reduce/reduce conflict for OR resolved using rule 65 (exp5 -> exp5 GREATER_EQUAL exp6 .)
  ! reduce/reduce conflict for AND resolved using rule 65 (exp5 -> exp5 GREATER_EQUAL exp6 .)
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for DIFFERENT resolved as shift
  ! reduce/reduce conflict for LESS resolved using rule 65 (exp5 -> exp5 GREATER_EQUAL exp6 .)
  ! reduce/reduce conflict for GREATER resolved using rule 65 (exp5 -> exp5 GREATER_EQUAL exp6 .)
  ! reduce/reduce conflict for LESS_EQUAL resolved using rule 65 (exp5 -> exp5 GREATER_EQUAL exp6 .)
  ! reduce/reduce conflict for GREATER_EQUAL resolved using rule 65 (exp5 -> exp5 GREATER_EQUAL exp6 .)
  ! reduce/reduce conflict for PLUS resolved using rule 65 (exp5 -> exp5 GREATER_EQUAL exp6 .)
  ! reduce/reduce conflict for MINUS resolved using rule 65 (exp5 -> exp5 GREATER_EQUAL exp6 .)
  ! reduce/reduce conflict for TIMES resolved using rule 65 (exp5 -> exp5 GREATER_EQUAL exp6 .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 65 (exp5 -> exp5 GREATER_EQUAL exp6 .)
  ! reduce/reduce conflict for MOD resolved using rule 65 (exp5 -> exp5 GREATER_EQUAL exp6 .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 65 (exp5 -> exp5 GREATER_EQUAL exp6 .)
  ! reduce/reduce conflict for COMMA resolved using rule 65 (exp5 -> exp5 GREATER_EQUAL exp6 .)
  ! reduce/reduce conflict for RCHAVES resolved using rule 65 (exp5 -> exp5 GREATER_EQUAL exp6 .)
  ! reduce/reduce conflict for ELSE resolved using rule 65 (exp5 -> exp5 GREATER_EQUAL exp6 .)
  ! reduce/reduce conflict for RPAREN resolved using rule 65 (exp5 -> exp5 GREATER_EQUAL exp6 .)
    IF              reduce using rule 65 (exp5 -> exp5 GREATER_EQUAL exp6 .)
    VAR             reduce using rule 65 (exp5 -> exp5 GREATER_EQUAL exp6 .)
    FOR             reduce using rule 65 (exp5 -> exp5 GREATER_EQUAL exp6 .)
    RETURN          reduce using rule 65 (exp5 -> exp5 GREATER_EQUAL exp6 .)
    ASSIGN          reduce using rule 65 (exp5 -> exp5 GREATER_EQUAL exp6 .)
    COLONEQ         reduce using rule 65 (exp5 -> exp5 GREATER_EQUAL exp6 .)
    OR              reduce using rule 65 (exp5 -> exp5 GREATER_EQUAL exp6 .)
    AND             reduce using rule 65 (exp5 -> exp5 GREATER_EQUAL exp6 .)
    LESS            reduce using rule 65 (exp5 -> exp5 GREATER_EQUAL exp6 .)
    GREATER         reduce using rule 65 (exp5 -> exp5 GREATER_EQUAL exp6 .)
    LESS_EQUAL      reduce using rule 65 (exp5 -> exp5 GREATER_EQUAL exp6 .)
    GREATER_EQUAL   reduce using rule 65 (exp5 -> exp5 GREATER_EQUAL exp6 .)
    PLUS            reduce using rule 65 (exp5 -> exp5 GREATER_EQUAL exp6 .)
    MINUS           reduce using rule 65 (exp5 -> exp5 GREATER_EQUAL exp6 .)
    TIMES           reduce using rule 65 (exp5 -> exp5 GREATER_EQUAL exp6 .)
    DIVIDE          reduce using rule 65 (exp5 -> exp5 GREATER_EQUAL exp6 .)
    MOD             reduce using rule 65 (exp5 -> exp5 GREATER_EQUAL exp6 .)
    DPLUS           reduce using rule 65 (exp5 -> exp5 GREATER_EQUAL exp6 .)
    DMINUS          reduce using rule 65 (exp5 -> exp5 GREATER_EQUAL exp6 .)
    SEMICOLON       reduce using rule 65 (exp5 -> exp5 GREATER_EQUAL exp6 .)
    COMMA           reduce using rule 65 (exp5 -> exp5 GREATER_EQUAL exp6 .)
    RCHAVES         reduce using rule 65 (exp5 -> exp5 GREATER_EQUAL exp6 .)
    ELSE            reduce using rule 65 (exp5 -> exp5 GREATER_EQUAL exp6 .)
    RPAREN          reduce using rule 65 (exp5 -> exp5 GREATER_EQUAL exp6 .)
    EQUALS          shift and go to state 84
    DIFFERENT       shift and go to state 85

  ! EQUALS          [ reduce using rule 65 (exp5 -> exp5 GREATER_EQUAL exp6 .) ]
  ! DIFFERENT       [ reduce using rule 65 (exp5 -> exp5 GREATER_EQUAL exp6 .) ]
  ! DPLUS           [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! DMINUS          [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! IF              [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! VAR             [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! FOR             [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! RETURN          [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! ASSIGN          [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! COLONEQ         [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! OR              [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! AND             [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! EQUALS          [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! DIFFERENT       [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! LESS            [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! GREATER         [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! LESS_EQUAL      [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! GREATER_EQUAL   [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! PLUS            [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! MINUS           [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! TIMES           [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! DIVIDE          [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! MOD             [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! SEMICOLON       [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! COMMA           [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! RCHAVES         [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! ELSE            [ reduce using rule 66 (exp5 -> exp6 .) ]
  ! RPAREN          [ reduce using rule 66 (exp5 -> exp6 .) ]


state 108

    (67) exp6 -> exp6 EQUALS exp7 .
    (70) exp7 -> exp7 . AND exp8
    (69) exp6 -> exp7 .

  ! shift/reduce conflict for AND resolved as shift
  ! reduce/reduce conflict for DPLUS resolved using rule 67 (exp6 -> exp6 EQUALS exp7 .)
  ! reduce/reduce conflict for DMINUS resolved using rule 67 (exp6 -> exp6 EQUALS exp7 .)
  ! reduce/reduce conflict for IF resolved using rule 67 (exp6 -> exp6 EQUALS exp7 .)
  ! reduce/reduce conflict for VAR resolved using rule 67 (exp6 -> exp6 EQUALS exp7 .)
  ! reduce/reduce conflict for FOR resolved using rule 67 (exp6 -> exp6 EQUALS exp7 .)
  ! reduce/reduce conflict for RETURN resolved using rule 67 (exp6 -> exp6 EQUALS exp7 .)
  ! reduce/reduce conflict for ASSIGN resolved using rule 67 (exp6 -> exp6 EQUALS exp7 .)
  ! reduce/reduce conflict for COLONEQ resolved using rule 67 (exp6 -> exp6 EQUALS exp7 .)
  ! reduce/reduce conflict for OR resolved using rule 67 (exp6 -> exp6 EQUALS exp7 .)
  ! shift/reduce conflict for AND resolved as shift
  ! reduce/reduce conflict for EQUALS resolved using rule 67 (exp6 -> exp6 EQUALS exp7 .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 67 (exp6 -> exp6 EQUALS exp7 .)
  ! reduce/reduce conflict for LESS resolved using rule 67 (exp6 -> exp6 EQUALS exp7 .)
  ! reduce/reduce conflict for GREATER resolved using rule 67 (exp6 -> exp6 EQUALS exp7 .)
  ! reduce/reduce conflict for LESS_EQUAL resolved using rule 67 (exp6 -> exp6 EQUALS exp7 .)
  ! reduce/reduce conflict for GREATER_EQUAL resolved using rule 67 (exp6 -> exp6 EQUALS exp7 .)
  ! reduce/reduce conflict for PLUS resolved using rule 67 (exp6 -> exp6 EQUALS exp7 .)
  ! reduce/reduce conflict for MINUS resolved using rule 67 (exp6 -> exp6 EQUALS exp7 .)
  ! reduce/reduce conflict for TIMES resolved using rule 67 (exp6 -> exp6 EQUALS exp7 .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 67 (exp6 -> exp6 EQUALS exp7 .)
  ! reduce/reduce conflict for MOD resolved using rule 67 (exp6 -> exp6 EQUALS exp7 .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 67 (exp6 -> exp6 EQUALS exp7 .)
  ! reduce/reduce conflict for COMMA resolved using rule 67 (exp6 -> exp6 EQUALS exp7 .)
  ! reduce/reduce conflict for RCHAVES resolved using rule 67 (exp6 -> exp6 EQUALS exp7 .)
  ! reduce/reduce conflict for ELSE resolved using rule 67 (exp6 -> exp6 EQUALS exp7 .)
  ! reduce/reduce conflict for RPAREN resolved using rule 67 (exp6 -> exp6 EQUALS exp7 .)
    IF              reduce using rule 67 (exp6 -> exp6 EQUALS exp7 .)
    VAR             reduce using rule 67 (exp6 -> exp6 EQUALS exp7 .)
    FOR             reduce using rule 67 (exp6 -> exp6 EQUALS exp7 .)
    RETURN          reduce using rule 67 (exp6 -> exp6 EQUALS exp7 .)
    ASSIGN          reduce using rule 67 (exp6 -> exp6 EQUALS exp7 .)
    COLONEQ         reduce using rule 67 (exp6 -> exp6 EQUALS exp7 .)
    OR              reduce using rule 67 (exp6 -> exp6 EQUALS exp7 .)
    EQUALS          reduce using rule 67 (exp6 -> exp6 EQUALS exp7 .)
    DIFFERENT       reduce using rule 67 (exp6 -> exp6 EQUALS exp7 .)
    LESS            reduce using rule 67 (exp6 -> exp6 EQUALS exp7 .)
    GREATER         reduce using rule 67 (exp6 -> exp6 EQUALS exp7 .)
    LESS_EQUAL      reduce using rule 67 (exp6 -> exp6 EQUALS exp7 .)
    GREATER_EQUAL   reduce using rule 67 (exp6 -> exp6 EQUALS exp7 .)
    PLUS            reduce using rule 67 (exp6 -> exp6 EQUALS exp7 .)
    MINUS           reduce using rule 67 (exp6 -> exp6 EQUALS exp7 .)
    TIMES           reduce using rule 67 (exp6 -> exp6 EQUALS exp7 .)
    DIVIDE          reduce using rule 67 (exp6 -> exp6 EQUALS exp7 .)
    MOD             reduce using rule 67 (exp6 -> exp6 EQUALS exp7 .)
    DPLUS           reduce using rule 67 (exp6 -> exp6 EQUALS exp7 .)
    DMINUS          reduce using rule 67 (exp6 -> exp6 EQUALS exp7 .)
    SEMICOLON       reduce using rule 67 (exp6 -> exp6 EQUALS exp7 .)
    COMMA           reduce using rule 67 (exp6 -> exp6 EQUALS exp7 .)
    RCHAVES         reduce using rule 67 (exp6 -> exp6 EQUALS exp7 .)
    ELSE            reduce using rule 67 (exp6 -> exp6 EQUALS exp7 .)
    RPAREN          reduce using rule 67 (exp6 -> exp6 EQUALS exp7 .)
    AND             shift and go to state 86

  ! AND             [ reduce using rule 67 (exp6 -> exp6 EQUALS exp7 .) ]
  ! DPLUS           [ reduce using rule 69 (exp6 -> exp7 .) ]
  ! DMINUS          [ reduce using rule 69 (exp6 -> exp7 .) ]
  ! IF              [ reduce using rule 69 (exp6 -> exp7 .) ]
  ! VAR             [ reduce using rule 69 (exp6 -> exp7 .) ]
  ! FOR             [ reduce using rule 69 (exp6 -> exp7 .) ]
  ! RETURN          [ reduce using rule 69 (exp6 -> exp7 .) ]
  ! ASSIGN          [ reduce using rule 69 (exp6 -> exp7 .) ]
  ! COLONEQ         [ reduce using rule 69 (exp6 -> exp7 .) ]
  ! OR              [ reduce using rule 69 (exp6 -> exp7 .) ]
  ! AND             [ reduce using rule 69 (exp6 -> exp7 .) ]
  ! EQUALS          [ reduce using rule 69 (exp6 -> exp7 .) ]
  ! DIFFERENT       [ reduce using rule 69 (exp6 -> exp7 .) ]
  ! LESS            [ reduce using rule 69 (exp6 -> exp7 .) ]
  ! GREATER         [ reduce using rule 69 (exp6 -> exp7 .) ]
  ! LESS_EQUAL      [ reduce using rule 69 (exp6 -> exp7 .) ]
  ! GREATER_EQUAL   [ reduce using rule 69 (exp6 -> exp7 .) ]
  ! PLUS            [ reduce using rule 69 (exp6 -> exp7 .) ]
  ! MINUS           [ reduce using rule 69 (exp6 -> exp7 .) ]
  ! TIMES           [ reduce using rule 69 (exp6 -> exp7 .) ]
  ! DIVIDE          [ reduce using rule 69 (exp6 -> exp7 .) ]
  ! MOD             [ reduce using rule 69 (exp6 -> exp7 .) ]
  ! SEMICOLON       [ reduce using rule 69 (exp6 -> exp7 .) ]
  ! COMMA           [ reduce using rule 69 (exp6 -> exp7 .) ]
  ! RCHAVES         [ reduce using rule 69 (exp6 -> exp7 .) ]
  ! ELSE            [ reduce using rule 69 (exp6 -> exp7 .) ]
  ! RPAREN          [ reduce using rule 69 (exp6 -> exp7 .) ]


state 109

    (68) exp6 -> exp6 DIFFERENT exp7 .
    (70) exp7 -> exp7 . AND exp8
    (69) exp6 -> exp7 .

  ! shift/reduce conflict for AND resolved as shift
  ! reduce/reduce conflict for DPLUS resolved using rule 68 (exp6 -> exp6 DIFFERENT exp7 .)
  ! reduce/reduce conflict for DMINUS resolved using rule 68 (exp6 -> exp6 DIFFERENT exp7 .)
  ! reduce/reduce conflict for IF resolved using rule 68 (exp6 -> exp6 DIFFERENT exp7 .)
  ! reduce/reduce conflict for VAR resolved using rule 68 (exp6 -> exp6 DIFFERENT exp7 .)
  ! reduce/reduce conflict for FOR resolved using rule 68 (exp6 -> exp6 DIFFERENT exp7 .)
  ! reduce/reduce conflict for RETURN resolved using rule 68 (exp6 -> exp6 DIFFERENT exp7 .)
  ! reduce/reduce conflict for ASSIGN resolved using rule 68 (exp6 -> exp6 DIFFERENT exp7 .)
  ! reduce/reduce conflict for COLONEQ resolved using rule 68 (exp6 -> exp6 DIFFERENT exp7 .)
  ! reduce/reduce conflict for OR resolved using rule 68 (exp6 -> exp6 DIFFERENT exp7 .)
  ! shift/reduce conflict for AND resolved as shift
  ! reduce/reduce conflict for EQUALS resolved using rule 68 (exp6 -> exp6 DIFFERENT exp7 .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 68 (exp6 -> exp6 DIFFERENT exp7 .)
  ! reduce/reduce conflict for LESS resolved using rule 68 (exp6 -> exp6 DIFFERENT exp7 .)
  ! reduce/reduce conflict for GREATER resolved using rule 68 (exp6 -> exp6 DIFFERENT exp7 .)
  ! reduce/reduce conflict for LESS_EQUAL resolved using rule 68 (exp6 -> exp6 DIFFERENT exp7 .)
  ! reduce/reduce conflict for GREATER_EQUAL resolved using rule 68 (exp6 -> exp6 DIFFERENT exp7 .)
  ! reduce/reduce conflict for PLUS resolved using rule 68 (exp6 -> exp6 DIFFERENT exp7 .)
  ! reduce/reduce conflict for MINUS resolved using rule 68 (exp6 -> exp6 DIFFERENT exp7 .)
  ! reduce/reduce conflict for TIMES resolved using rule 68 (exp6 -> exp6 DIFFERENT exp7 .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 68 (exp6 -> exp6 DIFFERENT exp7 .)
  ! reduce/reduce conflict for MOD resolved using rule 68 (exp6 -> exp6 DIFFERENT exp7 .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 68 (exp6 -> exp6 DIFFERENT exp7 .)
  ! reduce/reduce conflict for COMMA resolved using rule 68 (exp6 -> exp6 DIFFERENT exp7 .)
  ! reduce/reduce conflict for RCHAVES resolved using rule 68 (exp6 -> exp6 DIFFERENT exp7 .)
  ! reduce/reduce conflict for ELSE resolved using rule 68 (exp6 -> exp6 DIFFERENT exp7 .)
  ! reduce/reduce conflict for RPAREN resolved using rule 68 (exp6 -> exp6 DIFFERENT exp7 .)
    IF              reduce using rule 68 (exp6 -> exp6 DIFFERENT exp7 .)
    VAR             reduce using rule 68 (exp6 -> exp6 DIFFERENT exp7 .)
    FOR             reduce using rule 68 (exp6 -> exp6 DIFFERENT exp7 .)
    RETURN          reduce using rule 68 (exp6 -> exp6 DIFFERENT exp7 .)
    ASSIGN          reduce using rule 68 (exp6 -> exp6 DIFFERENT exp7 .)
    COLONEQ         reduce using rule 68 (exp6 -> exp6 DIFFERENT exp7 .)
    OR              reduce using rule 68 (exp6 -> exp6 DIFFERENT exp7 .)
    EQUALS          reduce using rule 68 (exp6 -> exp6 DIFFERENT exp7 .)
    DIFFERENT       reduce using rule 68 (exp6 -> exp6 DIFFERENT exp7 .)
    LESS            reduce using rule 68 (exp6 -> exp6 DIFFERENT exp7 .)
    GREATER         reduce using rule 68 (exp6 -> exp6 DIFFERENT exp7 .)
    LESS_EQUAL      reduce using rule 68 (exp6 -> exp6 DIFFERENT exp7 .)
    GREATER_EQUAL   reduce using rule 68 (exp6 -> exp6 DIFFERENT exp7 .)
    PLUS            reduce using rule 68 (exp6 -> exp6 DIFFERENT exp7 .)
    MINUS           reduce using rule 68 (exp6 -> exp6 DIFFERENT exp7 .)
    TIMES           reduce using rule 68 (exp6 -> exp6 DIFFERENT exp7 .)
    DIVIDE          reduce using rule 68 (exp6 -> exp6 DIFFERENT exp7 .)
    MOD             reduce using rule 68 (exp6 -> exp6 DIFFERENT exp7 .)
    DPLUS           reduce using rule 68 (exp6 -> exp6 DIFFERENT exp7 .)
    DMINUS          reduce using rule 68 (exp6 -> exp6 DIFFERENT exp7 .)
    SEMICOLON       reduce using rule 68 (exp6 -> exp6 DIFFERENT exp7 .)
    COMMA           reduce using rule 68 (exp6 -> exp6 DIFFERENT exp7 .)
    RCHAVES         reduce using rule 68 (exp6 -> exp6 DIFFERENT exp7 .)
    ELSE            reduce using rule 68 (exp6 -> exp6 DIFFERENT exp7 .)
    RPAREN          reduce using rule 68 (exp6 -> exp6 DIFFERENT exp7 .)
    AND             shift and go to state 86

  ! AND             [ reduce using rule 68 (exp6 -> exp6 DIFFERENT exp7 .) ]
  ! DPLUS           [ reduce using rule 69 (exp6 -> exp7 .) ]
  ! DMINUS          [ reduce using rule 69 (exp6 -> exp7 .) ]
  ! IF              [ reduce using rule 69 (exp6 -> exp7 .) ]
  ! VAR             [ reduce using rule 69 (exp6 -> exp7 .) ]
  ! FOR             [ reduce using rule 69 (exp6 -> exp7 .) ]
  ! RETURN          [ reduce using rule 69 (exp6 -> exp7 .) ]
  ! ASSIGN          [ reduce using rule 69 (exp6 -> exp7 .) ]
  ! COLONEQ         [ reduce using rule 69 (exp6 -> exp7 .) ]
  ! OR              [ reduce using rule 69 (exp6 -> exp7 .) ]
  ! AND             [ reduce using rule 69 (exp6 -> exp7 .) ]
  ! EQUALS          [ reduce using rule 69 (exp6 -> exp7 .) ]
  ! DIFFERENT       [ reduce using rule 69 (exp6 -> exp7 .) ]
  ! LESS            [ reduce using rule 69 (exp6 -> exp7 .) ]
  ! GREATER         [ reduce using rule 69 (exp6 -> exp7 .) ]
  ! LESS_EQUAL      [ reduce using rule 69 (exp6 -> exp7 .) ]
  ! GREATER_EQUAL   [ reduce using rule 69 (exp6 -> exp7 .) ]
  ! PLUS            [ reduce using rule 69 (exp6 -> exp7 .) ]
  ! MINUS           [ reduce using rule 69 (exp6 -> exp7 .) ]
  ! TIMES           [ reduce using rule 69 (exp6 -> exp7 .) ]
  ! DIVIDE          [ reduce using rule 69 (exp6 -> exp7 .) ]
  ! MOD             [ reduce using rule 69 (exp6 -> exp7 .) ]
  ! SEMICOLON       [ reduce using rule 69 (exp6 -> exp7 .) ]
  ! COMMA           [ reduce using rule 69 (exp6 -> exp7 .) ]
  ! RCHAVES         [ reduce using rule 69 (exp6 -> exp7 .) ]
  ! ELSE            [ reduce using rule 69 (exp6 -> exp7 .) ]
  ! RPAREN          [ reduce using rule 69 (exp6 -> exp7 .) ]


state 110

    (70) exp7 -> exp7 AND exp8 .
    (72) exp8 -> exp8 . OR exp9
    (71) exp7 -> exp8 .

  ! shift/reduce conflict for OR resolved as shift
  ! reduce/reduce conflict for DPLUS resolved using rule 70 (exp7 -> exp7 AND exp8 .)
  ! reduce/reduce conflict for DMINUS resolved using rule 70 (exp7 -> exp7 AND exp8 .)
  ! reduce/reduce conflict for IF resolved using rule 70 (exp7 -> exp7 AND exp8 .)
  ! reduce/reduce conflict for VAR resolved using rule 70 (exp7 -> exp7 AND exp8 .)
  ! reduce/reduce conflict for FOR resolved using rule 70 (exp7 -> exp7 AND exp8 .)
  ! reduce/reduce conflict for RETURN resolved using rule 70 (exp7 -> exp7 AND exp8 .)
  ! reduce/reduce conflict for ASSIGN resolved using rule 70 (exp7 -> exp7 AND exp8 .)
  ! reduce/reduce conflict for COLONEQ resolved using rule 70 (exp7 -> exp7 AND exp8 .)
  ! shift/reduce conflict for OR resolved as shift
  ! reduce/reduce conflict for AND resolved using rule 70 (exp7 -> exp7 AND exp8 .)
  ! reduce/reduce conflict for EQUALS resolved using rule 70 (exp7 -> exp7 AND exp8 .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 70 (exp7 -> exp7 AND exp8 .)
  ! reduce/reduce conflict for LESS resolved using rule 70 (exp7 -> exp7 AND exp8 .)
  ! reduce/reduce conflict for GREATER resolved using rule 70 (exp7 -> exp7 AND exp8 .)
  ! reduce/reduce conflict for LESS_EQUAL resolved using rule 70 (exp7 -> exp7 AND exp8 .)
  ! reduce/reduce conflict for GREATER_EQUAL resolved using rule 70 (exp7 -> exp7 AND exp8 .)
  ! reduce/reduce conflict for PLUS resolved using rule 70 (exp7 -> exp7 AND exp8 .)
  ! reduce/reduce conflict for MINUS resolved using rule 70 (exp7 -> exp7 AND exp8 .)
  ! reduce/reduce conflict for TIMES resolved using rule 70 (exp7 -> exp7 AND exp8 .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 70 (exp7 -> exp7 AND exp8 .)
  ! reduce/reduce conflict for MOD resolved using rule 70 (exp7 -> exp7 AND exp8 .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 70 (exp7 -> exp7 AND exp8 .)
  ! reduce/reduce conflict for COMMA resolved using rule 70 (exp7 -> exp7 AND exp8 .)
  ! reduce/reduce conflict for RCHAVES resolved using rule 70 (exp7 -> exp7 AND exp8 .)
  ! reduce/reduce conflict for ELSE resolved using rule 70 (exp7 -> exp7 AND exp8 .)
  ! reduce/reduce conflict for RPAREN resolved using rule 70 (exp7 -> exp7 AND exp8 .)
    IF              reduce using rule 70 (exp7 -> exp7 AND exp8 .)
    VAR             reduce using rule 70 (exp7 -> exp7 AND exp8 .)
    FOR             reduce using rule 70 (exp7 -> exp7 AND exp8 .)
    RETURN          reduce using rule 70 (exp7 -> exp7 AND exp8 .)
    ASSIGN          reduce using rule 70 (exp7 -> exp7 AND exp8 .)
    COLONEQ         reduce using rule 70 (exp7 -> exp7 AND exp8 .)
    AND             reduce using rule 70 (exp7 -> exp7 AND exp8 .)
    EQUALS          reduce using rule 70 (exp7 -> exp7 AND exp8 .)
    DIFFERENT       reduce using rule 70 (exp7 -> exp7 AND exp8 .)
    LESS            reduce using rule 70 (exp7 -> exp7 AND exp8 .)
    GREATER         reduce using rule 70 (exp7 -> exp7 AND exp8 .)
    LESS_EQUAL      reduce using rule 70 (exp7 -> exp7 AND exp8 .)
    GREATER_EQUAL   reduce using rule 70 (exp7 -> exp7 AND exp8 .)
    PLUS            reduce using rule 70 (exp7 -> exp7 AND exp8 .)
    MINUS           reduce using rule 70 (exp7 -> exp7 AND exp8 .)
    TIMES           reduce using rule 70 (exp7 -> exp7 AND exp8 .)
    DIVIDE          reduce using rule 70 (exp7 -> exp7 AND exp8 .)
    MOD             reduce using rule 70 (exp7 -> exp7 AND exp8 .)
    DPLUS           reduce using rule 70 (exp7 -> exp7 AND exp8 .)
    DMINUS          reduce using rule 70 (exp7 -> exp7 AND exp8 .)
    SEMICOLON       reduce using rule 70 (exp7 -> exp7 AND exp8 .)
    COMMA           reduce using rule 70 (exp7 -> exp7 AND exp8 .)
    RCHAVES         reduce using rule 70 (exp7 -> exp7 AND exp8 .)
    ELSE            reduce using rule 70 (exp7 -> exp7 AND exp8 .)
    RPAREN          reduce using rule 70 (exp7 -> exp7 AND exp8 .)
    OR              shift and go to state 87

  ! OR              [ reduce using rule 70 (exp7 -> exp7 AND exp8 .) ]
  ! DPLUS           [ reduce using rule 71 (exp7 -> exp8 .) ]
  ! DMINUS          [ reduce using rule 71 (exp7 -> exp8 .) ]
  ! IF              [ reduce using rule 71 (exp7 -> exp8 .) ]
  ! VAR             [ reduce using rule 71 (exp7 -> exp8 .) ]
  ! FOR             [ reduce using rule 71 (exp7 -> exp8 .) ]
  ! RETURN          [ reduce using rule 71 (exp7 -> exp8 .) ]
  ! ASSIGN          [ reduce using rule 71 (exp7 -> exp8 .) ]
  ! COLONEQ         [ reduce using rule 71 (exp7 -> exp8 .) ]
  ! OR              [ reduce using rule 71 (exp7 -> exp8 .) ]
  ! AND             [ reduce using rule 71 (exp7 -> exp8 .) ]
  ! EQUALS          [ reduce using rule 71 (exp7 -> exp8 .) ]
  ! DIFFERENT       [ reduce using rule 71 (exp7 -> exp8 .) ]
  ! LESS            [ reduce using rule 71 (exp7 -> exp8 .) ]
  ! GREATER         [ reduce using rule 71 (exp7 -> exp8 .) ]
  ! LESS_EQUAL      [ reduce using rule 71 (exp7 -> exp8 .) ]
  ! GREATER_EQUAL   [ reduce using rule 71 (exp7 -> exp8 .) ]
  ! PLUS            [ reduce using rule 71 (exp7 -> exp8 .) ]
  ! MINUS           [ reduce using rule 71 (exp7 -> exp8 .) ]
  ! TIMES           [ reduce using rule 71 (exp7 -> exp8 .) ]
  ! DIVIDE          [ reduce using rule 71 (exp7 -> exp8 .) ]
  ! MOD             [ reduce using rule 71 (exp7 -> exp8 .) ]
  ! SEMICOLON       [ reduce using rule 71 (exp7 -> exp8 .) ]
  ! COMMA           [ reduce using rule 71 (exp7 -> exp8 .) ]
  ! RCHAVES         [ reduce using rule 71 (exp7 -> exp8 .) ]
  ! ELSE            [ reduce using rule 71 (exp7 -> exp8 .) ]
  ! RPAREN          [ reduce using rule 71 (exp7 -> exp8 .) ]


state 111

    (72) exp8 -> exp8 OR exp9 .
    (74) exp9 -> exp9 . ASSIGN exp1
    (75) exp9 -> exp9 . COLONEQ exp1
    (73) exp8 -> exp9 .

  ! shift/reduce conflict for ASSIGN resolved as shift
  ! shift/reduce conflict for COLONEQ resolved as shift
  ! reduce/reduce conflict for DPLUS resolved using rule 72 (exp8 -> exp8 OR exp9 .)
  ! reduce/reduce conflict for DMINUS resolved using rule 72 (exp8 -> exp8 OR exp9 .)
  ! reduce/reduce conflict for IF resolved using rule 72 (exp8 -> exp8 OR exp9 .)
  ! reduce/reduce conflict for VAR resolved using rule 72 (exp8 -> exp8 OR exp9 .)
  ! reduce/reduce conflict for FOR resolved using rule 72 (exp8 -> exp8 OR exp9 .)
  ! reduce/reduce conflict for RETURN resolved using rule 72 (exp8 -> exp8 OR exp9 .)
  ! shift/reduce conflict for ASSIGN resolved as shift
  ! shift/reduce conflict for COLONEQ resolved as shift
  ! reduce/reduce conflict for OR resolved using rule 72 (exp8 -> exp8 OR exp9 .)
  ! reduce/reduce conflict for AND resolved using rule 72 (exp8 -> exp8 OR exp9 .)
  ! reduce/reduce conflict for EQUALS resolved using rule 72 (exp8 -> exp8 OR exp9 .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 72 (exp8 -> exp8 OR exp9 .)
  ! reduce/reduce conflict for LESS resolved using rule 72 (exp8 -> exp8 OR exp9 .)
  ! reduce/reduce conflict for GREATER resolved using rule 72 (exp8 -> exp8 OR exp9 .)
  ! reduce/reduce conflict for LESS_EQUAL resolved using rule 72 (exp8 -> exp8 OR exp9 .)
  ! reduce/reduce conflict for GREATER_EQUAL resolved using rule 72 (exp8 -> exp8 OR exp9 .)
  ! reduce/reduce conflict for PLUS resolved using rule 72 (exp8 -> exp8 OR exp9 .)
  ! reduce/reduce conflict for MINUS resolved using rule 72 (exp8 -> exp8 OR exp9 .)
  ! reduce/reduce conflict for TIMES resolved using rule 72 (exp8 -> exp8 OR exp9 .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 72 (exp8 -> exp8 OR exp9 .)
  ! reduce/reduce conflict for MOD resolved using rule 72 (exp8 -> exp8 OR exp9 .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 72 (exp8 -> exp8 OR exp9 .)
  ! reduce/reduce conflict for COMMA resolved using rule 72 (exp8 -> exp8 OR exp9 .)
  ! reduce/reduce conflict for RCHAVES resolved using rule 72 (exp8 -> exp8 OR exp9 .)
  ! reduce/reduce conflict for ELSE resolved using rule 72 (exp8 -> exp8 OR exp9 .)
  ! reduce/reduce conflict for RPAREN resolved using rule 72 (exp8 -> exp8 OR exp9 .)
    IF              reduce using rule 72 (exp8 -> exp8 OR exp9 .)
    VAR             reduce using rule 72 (exp8 -> exp8 OR exp9 .)
    FOR             reduce using rule 72 (exp8 -> exp8 OR exp9 .)
    RETURN          reduce using rule 72 (exp8 -> exp8 OR exp9 .)
    OR              reduce using rule 72 (exp8 -> exp8 OR exp9 .)
    AND             reduce using rule 72 (exp8 -> exp8 OR exp9 .)
    EQUALS          reduce using rule 72 (exp8 -> exp8 OR exp9 .)
    DIFFERENT       reduce using rule 72 (exp8 -> exp8 OR exp9 .)
    LESS            reduce using rule 72 (exp8 -> exp8 OR exp9 .)
    GREATER         reduce using rule 72 (exp8 -> exp8 OR exp9 .)
    LESS_EQUAL      reduce using rule 72 (exp8 -> exp8 OR exp9 .)
    GREATER_EQUAL   reduce using rule 72 (exp8 -> exp8 OR exp9 .)
    PLUS            reduce using rule 72 (exp8 -> exp8 OR exp9 .)
    MINUS           reduce using rule 72 (exp8 -> exp8 OR exp9 .)
    TIMES           reduce using rule 72 (exp8 -> exp8 OR exp9 .)
    DIVIDE          reduce using rule 72 (exp8 -> exp8 OR exp9 .)
    MOD             reduce using rule 72 (exp8 -> exp8 OR exp9 .)
    DPLUS           reduce using rule 72 (exp8 -> exp8 OR exp9 .)
    DMINUS          reduce using rule 72 (exp8 -> exp8 OR exp9 .)
    SEMICOLON       reduce using rule 72 (exp8 -> exp8 OR exp9 .)
    COMMA           reduce using rule 72 (exp8 -> exp8 OR exp9 .)
    RCHAVES         reduce using rule 72 (exp8 -> exp8 OR exp9 .)
    ELSE            reduce using rule 72 (exp8 -> exp8 OR exp9 .)
    RPAREN          reduce using rule 72 (exp8 -> exp8 OR exp9 .)
    ASSIGN          shift and go to state 88
    COLONEQ         shift and go to state 89

  ! ASSIGN          [ reduce using rule 72 (exp8 -> exp8 OR exp9 .) ]
  ! COLONEQ         [ reduce using rule 72 (exp8 -> exp8 OR exp9 .) ]
  ! DPLUS           [ reduce using rule 73 (exp8 -> exp9 .) ]
  ! DMINUS          [ reduce using rule 73 (exp8 -> exp9 .) ]
  ! IF              [ reduce using rule 73 (exp8 -> exp9 .) ]
  ! VAR             [ reduce using rule 73 (exp8 -> exp9 .) ]
  ! FOR             [ reduce using rule 73 (exp8 -> exp9 .) ]
  ! RETURN          [ reduce using rule 73 (exp8 -> exp9 .) ]
  ! ASSIGN          [ reduce using rule 73 (exp8 -> exp9 .) ]
  ! COLONEQ         [ reduce using rule 73 (exp8 -> exp9 .) ]
  ! OR              [ reduce using rule 73 (exp8 -> exp9 .) ]
  ! AND             [ reduce using rule 73 (exp8 -> exp9 .) ]
  ! EQUALS          [ reduce using rule 73 (exp8 -> exp9 .) ]
  ! DIFFERENT       [ reduce using rule 73 (exp8 -> exp9 .) ]
  ! LESS            [ reduce using rule 73 (exp8 -> exp9 .) ]
  ! GREATER         [ reduce using rule 73 (exp8 -> exp9 .) ]
  ! LESS_EQUAL      [ reduce using rule 73 (exp8 -> exp9 .) ]
  ! GREATER_EQUAL   [ reduce using rule 73 (exp8 -> exp9 .) ]
  ! PLUS            [ reduce using rule 73 (exp8 -> exp9 .) ]
  ! MINUS           [ reduce using rule 73 (exp8 -> exp9 .) ]
  ! TIMES           [ reduce using rule 73 (exp8 -> exp9 .) ]
  ! DIVIDE          [ reduce using rule 73 (exp8 -> exp9 .) ]
  ! MOD             [ reduce using rule 73 (exp8 -> exp9 .) ]
  ! SEMICOLON       [ reduce using rule 73 (exp8 -> exp9 .) ]
  ! COMMA           [ reduce using rule 73 (exp8 -> exp9 .) ]
  ! RCHAVES         [ reduce using rule 73 (exp8 -> exp9 .) ]
  ! ELSE            [ reduce using rule 73 (exp8 -> exp9 .) ]
  ! RPAREN          [ reduce using rule 73 (exp8 -> exp9 .) ]


state 112

    (74) exp9 -> exp9 ASSIGN exp1 .
    (76) exp9 -> exp1 .

  ! reduce/reduce conflict for DPLUS resolved using rule 74 (exp9 -> exp9 ASSIGN exp1 .)
  ! reduce/reduce conflict for DMINUS resolved using rule 74 (exp9 -> exp9 ASSIGN exp1 .)
  ! reduce/reduce conflict for IF resolved using rule 74 (exp9 -> exp9 ASSIGN exp1 .)
  ! reduce/reduce conflict for VAR resolved using rule 74 (exp9 -> exp9 ASSIGN exp1 .)
  ! reduce/reduce conflict for FOR resolved using rule 74 (exp9 -> exp9 ASSIGN exp1 .)
  ! reduce/reduce conflict for RETURN resolved using rule 74 (exp9 -> exp9 ASSIGN exp1 .)
  ! reduce/reduce conflict for ASSIGN resolved using rule 74 (exp9 -> exp9 ASSIGN exp1 .)
  ! reduce/reduce conflict for COLONEQ resolved using rule 74 (exp9 -> exp9 ASSIGN exp1 .)
  ! reduce/reduce conflict for OR resolved using rule 74 (exp9 -> exp9 ASSIGN exp1 .)
  ! reduce/reduce conflict for AND resolved using rule 74 (exp9 -> exp9 ASSIGN exp1 .)
  ! reduce/reduce conflict for EQUALS resolved using rule 74 (exp9 -> exp9 ASSIGN exp1 .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 74 (exp9 -> exp9 ASSIGN exp1 .)
  ! reduce/reduce conflict for LESS resolved using rule 74 (exp9 -> exp9 ASSIGN exp1 .)
  ! reduce/reduce conflict for GREATER resolved using rule 74 (exp9 -> exp9 ASSIGN exp1 .)
  ! reduce/reduce conflict for LESS_EQUAL resolved using rule 74 (exp9 -> exp9 ASSIGN exp1 .)
  ! reduce/reduce conflict for GREATER_EQUAL resolved using rule 74 (exp9 -> exp9 ASSIGN exp1 .)
  ! reduce/reduce conflict for PLUS resolved using rule 74 (exp9 -> exp9 ASSIGN exp1 .)
  ! reduce/reduce conflict for MINUS resolved using rule 74 (exp9 -> exp9 ASSIGN exp1 .)
  ! reduce/reduce conflict for TIMES resolved using rule 74 (exp9 -> exp9 ASSIGN exp1 .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 74 (exp9 -> exp9 ASSIGN exp1 .)
  ! reduce/reduce conflict for MOD resolved using rule 74 (exp9 -> exp9 ASSIGN exp1 .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 74 (exp9 -> exp9 ASSIGN exp1 .)
  ! reduce/reduce conflict for COMMA resolved using rule 74 (exp9 -> exp9 ASSIGN exp1 .)
  ! reduce/reduce conflict for RCHAVES resolved using rule 74 (exp9 -> exp9 ASSIGN exp1 .)
  ! reduce/reduce conflict for ELSE resolved using rule 74 (exp9 -> exp9 ASSIGN exp1 .)
  ! reduce/reduce conflict for RPAREN resolved using rule 74 (exp9 -> exp9 ASSIGN exp1 .)
    IF              reduce using rule 74 (exp9 -> exp9 ASSIGN exp1 .)
    VAR             reduce using rule 74 (exp9 -> exp9 ASSIGN exp1 .)
    FOR             reduce using rule 74 (exp9 -> exp9 ASSIGN exp1 .)
    RETURN          reduce using rule 74 (exp9 -> exp9 ASSIGN exp1 .)
    ASSIGN          reduce using rule 74 (exp9 -> exp9 ASSIGN exp1 .)
    COLONEQ         reduce using rule 74 (exp9 -> exp9 ASSIGN exp1 .)
    OR              reduce using rule 74 (exp9 -> exp9 ASSIGN exp1 .)
    AND             reduce using rule 74 (exp9 -> exp9 ASSIGN exp1 .)
    EQUALS          reduce using rule 74 (exp9 -> exp9 ASSIGN exp1 .)
    DIFFERENT       reduce using rule 74 (exp9 -> exp9 ASSIGN exp1 .)
    LESS            reduce using rule 74 (exp9 -> exp9 ASSIGN exp1 .)
    GREATER         reduce using rule 74 (exp9 -> exp9 ASSIGN exp1 .)
    LESS_EQUAL      reduce using rule 74 (exp9 -> exp9 ASSIGN exp1 .)
    GREATER_EQUAL   reduce using rule 74 (exp9 -> exp9 ASSIGN exp1 .)
    PLUS            reduce using rule 74 (exp9 -> exp9 ASSIGN exp1 .)
    MINUS           reduce using rule 74 (exp9 -> exp9 ASSIGN exp1 .)
    TIMES           reduce using rule 74 (exp9 -> exp9 ASSIGN exp1 .)
    DIVIDE          reduce using rule 74 (exp9 -> exp9 ASSIGN exp1 .)
    MOD             reduce using rule 74 (exp9 -> exp9 ASSIGN exp1 .)
    DPLUS           reduce using rule 74 (exp9 -> exp9 ASSIGN exp1 .)
    DMINUS          reduce using rule 74 (exp9 -> exp9 ASSIGN exp1 .)
    SEMICOLON       reduce using rule 74 (exp9 -> exp9 ASSIGN exp1 .)
    COMMA           reduce using rule 74 (exp9 -> exp9 ASSIGN exp1 .)
    RCHAVES         reduce using rule 74 (exp9 -> exp9 ASSIGN exp1 .)
    ELSE            reduce using rule 74 (exp9 -> exp9 ASSIGN exp1 .)
    RPAREN          reduce using rule 74 (exp9 -> exp9 ASSIGN exp1 .)

  ! DPLUS           [ reduce using rule 76 (exp9 -> exp1 .) ]
  ! DMINUS          [ reduce using rule 76 (exp9 -> exp1 .) ]
  ! IF              [ reduce using rule 76 (exp9 -> exp1 .) ]
  ! VAR             [ reduce using rule 76 (exp9 -> exp1 .) ]
  ! FOR             [ reduce using rule 76 (exp9 -> exp1 .) ]
  ! RETURN          [ reduce using rule 76 (exp9 -> exp1 .) ]
  ! ASSIGN          [ reduce using rule 76 (exp9 -> exp1 .) ]
  ! COLONEQ         [ reduce using rule 76 (exp9 -> exp1 .) ]
  ! OR              [ reduce using rule 76 (exp9 -> exp1 .) ]
  ! AND             [ reduce using rule 76 (exp9 -> exp1 .) ]
  ! EQUALS          [ reduce using rule 76 (exp9 -> exp1 .) ]
  ! DIFFERENT       [ reduce using rule 76 (exp9 -> exp1 .) ]
  ! LESS            [ reduce using rule 76 (exp9 -> exp1 .) ]
  ! GREATER         [ reduce using rule 76 (exp9 -> exp1 .) ]
  ! LESS_EQUAL      [ reduce using rule 76 (exp9 -> exp1 .) ]
  ! GREATER_EQUAL   [ reduce using rule 76 (exp9 -> exp1 .) ]
  ! PLUS            [ reduce using rule 76 (exp9 -> exp1 .) ]
  ! MINUS           [ reduce using rule 76 (exp9 -> exp1 .) ]
  ! TIMES           [ reduce using rule 76 (exp9 -> exp1 .) ]
  ! DIVIDE          [ reduce using rule 76 (exp9 -> exp1 .) ]
  ! MOD             [ reduce using rule 76 (exp9 -> exp1 .) ]
  ! SEMICOLON       [ reduce using rule 76 (exp9 -> exp1 .) ]
  ! COMMA           [ reduce using rule 76 (exp9 -> exp1 .) ]
  ! RCHAVES         [ reduce using rule 76 (exp9 -> exp1 .) ]
  ! ELSE            [ reduce using rule 76 (exp9 -> exp1 .) ]
  ! RPAREN          [ reduce using rule 76 (exp9 -> exp1 .) ]


state 113

    (75) exp9 -> exp9 COLONEQ exp1 .
    (76) exp9 -> exp1 .

  ! reduce/reduce conflict for DPLUS resolved using rule 75 (exp9 -> exp9 COLONEQ exp1 .)
  ! reduce/reduce conflict for DMINUS resolved using rule 75 (exp9 -> exp9 COLONEQ exp1 .)
  ! reduce/reduce conflict for IF resolved using rule 75 (exp9 -> exp9 COLONEQ exp1 .)
  ! reduce/reduce conflict for VAR resolved using rule 75 (exp9 -> exp9 COLONEQ exp1 .)
  ! reduce/reduce conflict for FOR resolved using rule 75 (exp9 -> exp9 COLONEQ exp1 .)
  ! reduce/reduce conflict for RETURN resolved using rule 75 (exp9 -> exp9 COLONEQ exp1 .)
  ! reduce/reduce conflict for ASSIGN resolved using rule 75 (exp9 -> exp9 COLONEQ exp1 .)
  ! reduce/reduce conflict for COLONEQ resolved using rule 75 (exp9 -> exp9 COLONEQ exp1 .)
  ! reduce/reduce conflict for OR resolved using rule 75 (exp9 -> exp9 COLONEQ exp1 .)
  ! reduce/reduce conflict for AND resolved using rule 75 (exp9 -> exp9 COLONEQ exp1 .)
  ! reduce/reduce conflict for EQUALS resolved using rule 75 (exp9 -> exp9 COLONEQ exp1 .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 75 (exp9 -> exp9 COLONEQ exp1 .)
  ! reduce/reduce conflict for LESS resolved using rule 75 (exp9 -> exp9 COLONEQ exp1 .)
  ! reduce/reduce conflict for GREATER resolved using rule 75 (exp9 -> exp9 COLONEQ exp1 .)
  ! reduce/reduce conflict for LESS_EQUAL resolved using rule 75 (exp9 -> exp9 COLONEQ exp1 .)
  ! reduce/reduce conflict for GREATER_EQUAL resolved using rule 75 (exp9 -> exp9 COLONEQ exp1 .)
  ! reduce/reduce conflict for PLUS resolved using rule 75 (exp9 -> exp9 COLONEQ exp1 .)
  ! reduce/reduce conflict for MINUS resolved using rule 75 (exp9 -> exp9 COLONEQ exp1 .)
  ! reduce/reduce conflict for TIMES resolved using rule 75 (exp9 -> exp9 COLONEQ exp1 .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 75 (exp9 -> exp9 COLONEQ exp1 .)
  ! reduce/reduce conflict for MOD resolved using rule 75 (exp9 -> exp9 COLONEQ exp1 .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 75 (exp9 -> exp9 COLONEQ exp1 .)
  ! reduce/reduce conflict for COMMA resolved using rule 75 (exp9 -> exp9 COLONEQ exp1 .)
  ! reduce/reduce conflict for RCHAVES resolved using rule 75 (exp9 -> exp9 COLONEQ exp1 .)
  ! reduce/reduce conflict for ELSE resolved using rule 75 (exp9 -> exp9 COLONEQ exp1 .)
  ! reduce/reduce conflict for RPAREN resolved using rule 75 (exp9 -> exp9 COLONEQ exp1 .)
    IF              reduce using rule 75 (exp9 -> exp9 COLONEQ exp1 .)
    VAR             reduce using rule 75 (exp9 -> exp9 COLONEQ exp1 .)
    FOR             reduce using rule 75 (exp9 -> exp9 COLONEQ exp1 .)
    RETURN          reduce using rule 75 (exp9 -> exp9 COLONEQ exp1 .)
    ASSIGN          reduce using rule 75 (exp9 -> exp9 COLONEQ exp1 .)
    COLONEQ         reduce using rule 75 (exp9 -> exp9 COLONEQ exp1 .)
    OR              reduce using rule 75 (exp9 -> exp9 COLONEQ exp1 .)
    AND             reduce using rule 75 (exp9 -> exp9 COLONEQ exp1 .)
    EQUALS          reduce using rule 75 (exp9 -> exp9 COLONEQ exp1 .)
    DIFFERENT       reduce using rule 75 (exp9 -> exp9 COLONEQ exp1 .)
    LESS            reduce using rule 75 (exp9 -> exp9 COLONEQ exp1 .)
    GREATER         reduce using rule 75 (exp9 -> exp9 COLONEQ exp1 .)
    LESS_EQUAL      reduce using rule 75 (exp9 -> exp9 COLONEQ exp1 .)
    GREATER_EQUAL   reduce using rule 75 (exp9 -> exp9 COLONEQ exp1 .)
    PLUS            reduce using rule 75 (exp9 -> exp9 COLONEQ exp1 .)
    MINUS           reduce using rule 75 (exp9 -> exp9 COLONEQ exp1 .)
    TIMES           reduce using rule 75 (exp9 -> exp9 COLONEQ exp1 .)
    DIVIDE          reduce using rule 75 (exp9 -> exp9 COLONEQ exp1 .)
    MOD             reduce using rule 75 (exp9 -> exp9 COLONEQ exp1 .)
    DPLUS           reduce using rule 75 (exp9 -> exp9 COLONEQ exp1 .)
    DMINUS          reduce using rule 75 (exp9 -> exp9 COLONEQ exp1 .)
    SEMICOLON       reduce using rule 75 (exp9 -> exp9 COLONEQ exp1 .)
    COMMA           reduce using rule 75 (exp9 -> exp9 COLONEQ exp1 .)
    RCHAVES         reduce using rule 75 (exp9 -> exp9 COLONEQ exp1 .)
    ELSE            reduce using rule 75 (exp9 -> exp9 COLONEQ exp1 .)
    RPAREN          reduce using rule 75 (exp9 -> exp9 COLONEQ exp1 .)

  ! DPLUS           [ reduce using rule 76 (exp9 -> exp1 .) ]
  ! DMINUS          [ reduce using rule 76 (exp9 -> exp1 .) ]
  ! IF              [ reduce using rule 76 (exp9 -> exp1 .) ]
  ! VAR             [ reduce using rule 76 (exp9 -> exp1 .) ]
  ! FOR             [ reduce using rule 76 (exp9 -> exp1 .) ]
  ! RETURN          [ reduce using rule 76 (exp9 -> exp1 .) ]
  ! ASSIGN          [ reduce using rule 76 (exp9 -> exp1 .) ]
  ! COLONEQ         [ reduce using rule 76 (exp9 -> exp1 .) ]
  ! OR              [ reduce using rule 76 (exp9 -> exp1 .) ]
  ! AND             [ reduce using rule 76 (exp9 -> exp1 .) ]
  ! EQUALS          [ reduce using rule 76 (exp9 -> exp1 .) ]
  ! DIFFERENT       [ reduce using rule 76 (exp9 -> exp1 .) ]
  ! LESS            [ reduce using rule 76 (exp9 -> exp1 .) ]
  ! GREATER         [ reduce using rule 76 (exp9 -> exp1 .) ]
  ! LESS_EQUAL      [ reduce using rule 76 (exp9 -> exp1 .) ]
  ! GREATER_EQUAL   [ reduce using rule 76 (exp9 -> exp1 .) ]
  ! PLUS            [ reduce using rule 76 (exp9 -> exp1 .) ]
  ! MINUS           [ reduce using rule 76 (exp9 -> exp1 .) ]
  ! TIMES           [ reduce using rule 76 (exp9 -> exp1 .) ]
  ! DIVIDE          [ reduce using rule 76 (exp9 -> exp1 .) ]
  ! MOD             [ reduce using rule 76 (exp9 -> exp1 .) ]
  ! SEMICOLON       [ reduce using rule 76 (exp9 -> exp1 .) ]
  ! COMMA           [ reduce using rule 76 (exp9 -> exp1 .) ]
  ! RCHAVES         [ reduce using rule 76 (exp9 -> exp1 .) ]
  ! ELSE            [ reduce using rule 76 (exp9 -> exp1 .) ]
  ! RPAREN          [ reduce using rule 76 (exp9 -> exp1 .) ]


state 114

    (38) declaration -> VAR ID type ASSIGN . exp
    (43) exp -> . exp1
    (44) exp1 -> . NUMBER
    (45) exp1 -> . STRING
    (46) exp1 -> . ID
    (47) exp1 -> . TRUE
    (48) exp1 -> . FALSE
    (49) exp1 -> . LPAREN exp RPAREN
    (50) exp1 -> . exp2
    (51) exp2 -> . exp2 DPLUS
    (52) exp2 -> . exp2 DMINUS
    (53) exp2 -> . NOT exp2
    (54) exp2 -> . exp3
    (55) exp3 -> . exp3 TIMES exp4
    (56) exp3 -> . exp3 DIVIDE exp4
    (57) exp3 -> . exp3 MOD exp4
    (58) exp3 -> . exp4
    (59) exp4 -> . exp4 PLUS exp5
    (60) exp4 -> . exp4 MINUS exp5
    (61) exp4 -> . exp5
    (62) exp5 -> . exp5 LESS exp6
    (63) exp5 -> . exp5 GREATER exp6
    (64) exp5 -> . exp5 LESS_EQUAL exp6
    (65) exp5 -> . exp5 GREATER_EQUAL exp6
    (66) exp5 -> . exp6
    (67) exp6 -> . exp6 EQUALS exp7
    (68) exp6 -> . exp6 DIFFERENT exp7
    (69) exp6 -> . exp7
    (70) exp7 -> . exp7 AND exp8
    (71) exp7 -> . exp8
    (72) exp8 -> . exp8 OR exp9
    (73) exp8 -> . exp9
    (74) exp9 -> . exp9 ASSIGN exp1
    (75) exp9 -> . exp9 COLONEQ exp1
    (76) exp9 -> . exp1

    NUMBER          shift and go to state 45
    STRING          shift and go to state 46
    ID              shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 62
    NOT             shift and go to state 51

    exp                            shift and go to state 123
    exp1                           shift and go to state 44
    exp2                           shift and go to state 50
    exp3                           shift and go to state 52
    exp4                           shift and go to state 53
    exp5                           shift and go to state 54
    exp6                           shift and go to state 55
    exp7                           shift and go to state 56
    exp8                           shift and go to state 57
    exp9                           shift and go to state 58

state 115

    (39) declaration -> VAR ID type COLONEQ . exp
    (43) exp -> . exp1
    (44) exp1 -> . NUMBER
    (45) exp1 -> . STRING
    (46) exp1 -> . ID
    (47) exp1 -> . TRUE
    (48) exp1 -> . FALSE
    (49) exp1 -> . LPAREN exp RPAREN
    (50) exp1 -> . exp2
    (51) exp2 -> . exp2 DPLUS
    (52) exp2 -> . exp2 DMINUS
    (53) exp2 -> . NOT exp2
    (54) exp2 -> . exp3
    (55) exp3 -> . exp3 TIMES exp4
    (56) exp3 -> . exp3 DIVIDE exp4
    (57) exp3 -> . exp3 MOD exp4
    (58) exp3 -> . exp4
    (59) exp4 -> . exp4 PLUS exp5
    (60) exp4 -> . exp4 MINUS exp5
    (61) exp4 -> . exp5
    (62) exp5 -> . exp5 LESS exp6
    (63) exp5 -> . exp5 GREATER exp6
    (64) exp5 -> . exp5 LESS_EQUAL exp6
    (65) exp5 -> . exp5 GREATER_EQUAL exp6
    (66) exp5 -> . exp6
    (67) exp6 -> . exp6 EQUALS exp7
    (68) exp6 -> . exp6 DIFFERENT exp7
    (69) exp6 -> . exp7
    (70) exp7 -> . exp7 AND exp8
    (71) exp7 -> . exp8
    (72) exp8 -> . exp8 OR exp9
    (73) exp8 -> . exp9
    (74) exp9 -> . exp9 ASSIGN exp1
    (75) exp9 -> . exp9 COLONEQ exp1
    (76) exp9 -> . exp1

    NUMBER          shift and go to state 45
    STRING          shift and go to state 46
    ID              shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 62
    NOT             shift and go to state 51

    exp                            shift and go to state 124
    exp1                           shift and go to state 44
    exp2                           shift and go to state 50
    exp3                           shift and go to state 52
    exp4                           shift and go to state 53
    exp5                           shift and go to state 54
    exp6                           shift and go to state 55
    exp7                           shift and go to state 56
    exp8                           shift and go to state 57
    exp9                           shift and go to state 58

state 116

    (34) for -> FOR exp SEMICOLON exp . SEMICOLON exp

    SEMICOLON       shift and go to state 125


state 117

    (36) for -> FOR exp COMMA exp . ASSIGN RANGE exp

    ASSIGN          shift and go to state 126


state 118

    (49) exp1 -> LPAREN exp RPAREN .

    SEMICOLON       reduce using rule 49 (exp1 -> LPAREN exp RPAREN .)
    COMMA           reduce using rule 49 (exp1 -> LPAREN exp RPAREN .)
    IF              reduce using rule 49 (exp1 -> LPAREN exp RPAREN .)
    VAR             reduce using rule 49 (exp1 -> LPAREN exp RPAREN .)
    FOR             reduce using rule 49 (exp1 -> LPAREN exp RPAREN .)
    RETURN          reduce using rule 49 (exp1 -> LPAREN exp RPAREN .)
    RCHAVES         reduce using rule 49 (exp1 -> LPAREN exp RPAREN .)
    ELSE            reduce using rule 49 (exp1 -> LPAREN exp RPAREN .)
    ASSIGN          reduce using rule 49 (exp1 -> LPAREN exp RPAREN .)
    COLONEQ         reduce using rule 49 (exp1 -> LPAREN exp RPAREN .)
    OR              reduce using rule 49 (exp1 -> LPAREN exp RPAREN .)
    AND             reduce using rule 49 (exp1 -> LPAREN exp RPAREN .)
    EQUALS          reduce using rule 49 (exp1 -> LPAREN exp RPAREN .)
    DIFFERENT       reduce using rule 49 (exp1 -> LPAREN exp RPAREN .)
    LESS            reduce using rule 49 (exp1 -> LPAREN exp RPAREN .)
    GREATER         reduce using rule 49 (exp1 -> LPAREN exp RPAREN .)
    LESS_EQUAL      reduce using rule 49 (exp1 -> LPAREN exp RPAREN .)
    GREATER_EQUAL   reduce using rule 49 (exp1 -> LPAREN exp RPAREN .)
    PLUS            reduce using rule 49 (exp1 -> LPAREN exp RPAREN .)
    MINUS           reduce using rule 49 (exp1 -> LPAREN exp RPAREN .)
    TIMES           reduce using rule 49 (exp1 -> LPAREN exp RPAREN .)
    DIVIDE          reduce using rule 49 (exp1 -> LPAREN exp RPAREN .)
    MOD             reduce using rule 49 (exp1 -> LPAREN exp RPAREN .)
    DPLUS           reduce using rule 49 (exp1 -> LPAREN exp RPAREN .)
    DMINUS          reduce using rule 49 (exp1 -> LPAREN exp RPAREN .)
    RPAREN          reduce using rule 49 (exp1 -> LPAREN exp RPAREN .)


state 119

    (21) statement1 -> IF LPAREN exp RPAREN statement1 . ELSE statement1
    (31) statement2 -> IF LPAREN exp RPAREN statement1 . ELSE statement2
    (25) statement1 -> statement1 .
    (19) statement -> statement1 .

  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! reduce/reduce conflict for IF resolved using rule 19 (statement -> statement1 .)
  ! reduce/reduce conflict for VAR resolved using rule 19 (statement -> statement1 .)
  ! reduce/reduce conflict for FOR resolved using rule 19 (statement -> statement1 .)
  ! reduce/reduce conflict for RETURN resolved using rule 19 (statement -> statement1 .)
  ! reduce/reduce conflict for RCHAVES resolved using rule 19 (statement -> statement1 .)
    ELSE            shift and go to state 127
    IF              reduce using rule 19 (statement -> statement1 .)
    VAR             reduce using rule 19 (statement -> statement1 .)
    FOR             reduce using rule 19 (statement -> statement1 .)
    RETURN          reduce using rule 19 (statement -> statement1 .)
    RCHAVES         reduce using rule 19 (statement -> statement1 .)

  ! ELSE            [ reduce using rule 25 (statement1 -> statement1 .) ]
  ! IF              [ reduce using rule 25 (statement1 -> statement1 .) ]
  ! VAR             [ reduce using rule 25 (statement1 -> statement1 .) ]
  ! FOR             [ reduce using rule 25 (statement1 -> statement1 .) ]
  ! RETURN          [ reduce using rule 25 (statement1 -> statement1 .) ]
  ! RCHAVES         [ reduce using rule 25 (statement1 -> statement1 .) ]
  ! ELSE            [ reduce using rule 19 (statement -> statement1 .) ]


state 120

    (28) statement2 -> IF LPAREN exp RPAREN statement .

    IF              reduce using rule 28 (statement2 -> IF LPAREN exp RPAREN statement .)
    VAR             reduce using rule 28 (statement2 -> IF LPAREN exp RPAREN statement .)
    FOR             reduce using rule 28 (statement2 -> IF LPAREN exp RPAREN statement .)
    RETURN          reduce using rule 28 (statement2 -> IF LPAREN exp RPAREN statement .)
    RCHAVES         reduce using rule 28 (statement2 -> IF LPAREN exp RPAREN statement .)
    ELSE            reduce using rule 28 (statement2 -> IF LPAREN exp RPAREN statement .)


state 121

    (22) statement1 -> IF exp statement1 ELSE statement1 .
    (25) statement1 -> statement1 .

  ! reduce/reduce conflict for ELSE resolved using rule 22 (statement1 -> IF exp statement1 ELSE statement1 .)
  ! reduce/reduce conflict for IF resolved using rule 22 (statement1 -> IF exp statement1 ELSE statement1 .)
  ! reduce/reduce conflict for VAR resolved using rule 22 (statement1 -> IF exp statement1 ELSE statement1 .)
  ! reduce/reduce conflict for FOR resolved using rule 22 (statement1 -> IF exp statement1 ELSE statement1 .)
  ! reduce/reduce conflict for RETURN resolved using rule 22 (statement1 -> IF exp statement1 ELSE statement1 .)
  ! reduce/reduce conflict for RCHAVES resolved using rule 22 (statement1 -> IF exp statement1 ELSE statement1 .)
    IF              reduce using rule 22 (statement1 -> IF exp statement1 ELSE statement1 .)
    VAR             reduce using rule 22 (statement1 -> IF exp statement1 ELSE statement1 .)
    FOR             reduce using rule 22 (statement1 -> IF exp statement1 ELSE statement1 .)
    RETURN          reduce using rule 22 (statement1 -> IF exp statement1 ELSE statement1 .)
    RCHAVES         reduce using rule 22 (statement1 -> IF exp statement1 ELSE statement1 .)
    ELSE            reduce using rule 22 (statement1 -> IF exp statement1 ELSE statement1 .)

  ! ELSE            [ reduce using rule 25 (statement1 -> statement1 .) ]
  ! IF              [ reduce using rule 25 (statement1 -> statement1 .) ]
  ! VAR             [ reduce using rule 25 (statement1 -> statement1 .) ]
  ! FOR             [ reduce using rule 25 (statement1 -> statement1 .) ]
  ! RETURN          [ reduce using rule 25 (statement1 -> statement1 .) ]
  ! RCHAVES         [ reduce using rule 25 (statement1 -> statement1 .) ]


state 122

    (30) statement2 -> IF exp statement1 ELSE statement2 .
    (26) statement1 -> statement2 .

  ! reduce/reduce conflict for ELSE resolved using rule 26 (statement1 -> statement2 .)
  ! reduce/reduce conflict for IF resolved using rule 26 (statement1 -> statement2 .)
  ! reduce/reduce conflict for VAR resolved using rule 26 (statement1 -> statement2 .)
  ! reduce/reduce conflict for FOR resolved using rule 26 (statement1 -> statement2 .)
  ! reduce/reduce conflict for RETURN resolved using rule 26 (statement1 -> statement2 .)
  ! reduce/reduce conflict for RCHAVES resolved using rule 26 (statement1 -> statement2 .)
    ELSE            reduce using rule 26 (statement1 -> statement2 .)
    IF              reduce using rule 26 (statement1 -> statement2 .)
    VAR             reduce using rule 26 (statement1 -> statement2 .)
    FOR             reduce using rule 26 (statement1 -> statement2 .)
    RETURN          reduce using rule 26 (statement1 -> statement2 .)
    RCHAVES         reduce using rule 26 (statement1 -> statement2 .)

  ! IF              [ reduce using rule 30 (statement2 -> IF exp statement1 ELSE statement2 .) ]
  ! VAR             [ reduce using rule 30 (statement2 -> IF exp statement1 ELSE statement2 .) ]
  ! FOR             [ reduce using rule 30 (statement2 -> IF exp statement1 ELSE statement2 .) ]
  ! RETURN          [ reduce using rule 30 (statement2 -> IF exp statement1 ELSE statement2 .) ]
  ! RCHAVES         [ reduce using rule 30 (statement2 -> IF exp statement1 ELSE statement2 .) ]
  ! ELSE            [ reduce using rule 30 (statement2 -> IF exp statement1 ELSE statement2 .) ]


state 123

    (38) declaration -> VAR ID type ASSIGN exp .

    IF              reduce using rule 38 (declaration -> VAR ID type ASSIGN exp .)
    VAR             reduce using rule 38 (declaration -> VAR ID type ASSIGN exp .)
    FOR             reduce using rule 38 (declaration -> VAR ID type ASSIGN exp .)
    RETURN          reduce using rule 38 (declaration -> VAR ID type ASSIGN exp .)
    RCHAVES         reduce using rule 38 (declaration -> VAR ID type ASSIGN exp .)
    ELSE            reduce using rule 38 (declaration -> VAR ID type ASSIGN exp .)


state 124

    (39) declaration -> VAR ID type COLONEQ exp .

    IF              reduce using rule 39 (declaration -> VAR ID type COLONEQ exp .)
    VAR             reduce using rule 39 (declaration -> VAR ID type COLONEQ exp .)
    FOR             reduce using rule 39 (declaration -> VAR ID type COLONEQ exp .)
    RETURN          reduce using rule 39 (declaration -> VAR ID type COLONEQ exp .)
    RCHAVES         reduce using rule 39 (declaration -> VAR ID type COLONEQ exp .)
    ELSE            reduce using rule 39 (declaration -> VAR ID type COLONEQ exp .)


state 125

    (34) for -> FOR exp SEMICOLON exp SEMICOLON . exp
    (43) exp -> . exp1
    (44) exp1 -> . NUMBER
    (45) exp1 -> . STRING
    (46) exp1 -> . ID
    (47) exp1 -> . TRUE
    (48) exp1 -> . FALSE
    (49) exp1 -> . LPAREN exp RPAREN
    (50) exp1 -> . exp2
    (51) exp2 -> . exp2 DPLUS
    (52) exp2 -> . exp2 DMINUS
    (53) exp2 -> . NOT exp2
    (54) exp2 -> . exp3
    (55) exp3 -> . exp3 TIMES exp4
    (56) exp3 -> . exp3 DIVIDE exp4
    (57) exp3 -> . exp3 MOD exp4
    (58) exp3 -> . exp4
    (59) exp4 -> . exp4 PLUS exp5
    (60) exp4 -> . exp4 MINUS exp5
    (61) exp4 -> . exp5
    (62) exp5 -> . exp5 LESS exp6
    (63) exp5 -> . exp5 GREATER exp6
    (64) exp5 -> . exp5 LESS_EQUAL exp6
    (65) exp5 -> . exp5 GREATER_EQUAL exp6
    (66) exp5 -> . exp6
    (67) exp6 -> . exp6 EQUALS exp7
    (68) exp6 -> . exp6 DIFFERENT exp7
    (69) exp6 -> . exp7
    (70) exp7 -> . exp7 AND exp8
    (71) exp7 -> . exp8
    (72) exp8 -> . exp8 OR exp9
    (73) exp8 -> . exp9
    (74) exp9 -> . exp9 ASSIGN exp1
    (75) exp9 -> . exp9 COLONEQ exp1
    (76) exp9 -> . exp1

    NUMBER          shift and go to state 45
    STRING          shift and go to state 46
    ID              shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 62
    NOT             shift and go to state 51

    exp                            shift and go to state 128
    exp1                           shift and go to state 44
    exp2                           shift and go to state 50
    exp3                           shift and go to state 52
    exp4                           shift and go to state 53
    exp5                           shift and go to state 54
    exp6                           shift and go to state 55
    exp7                           shift and go to state 56
    exp8                           shift and go to state 57
    exp9                           shift and go to state 58

state 126

    (36) for -> FOR exp COMMA exp ASSIGN . RANGE exp

    RANGE           shift and go to state 129


state 127

    (21) statement1 -> IF LPAREN exp RPAREN statement1 ELSE . statement1
    (31) statement2 -> IF LPAREN exp RPAREN statement1 ELSE . statement2
    (21) statement1 -> . IF LPAREN exp RPAREN statement1 ELSE statement1
    (22) statement1 -> . IF exp statement1 ELSE statement1
    (23) statement1 -> . declaration
    (24) statement1 -> . for
    (25) statement1 -> . statement1
    (26) statement1 -> . statement2
    (27) statement1 -> . return
    (28) statement2 -> . IF LPAREN exp RPAREN statement
    (29) statement2 -> . IF exp statement
    (30) statement2 -> . IF exp statement1 ELSE statement2
    (31) statement2 -> . IF LPAREN exp RPAREN statement1 ELSE statement2
    (37) declaration -> . VAR ID type
    (38) declaration -> . VAR ID type ASSIGN exp
    (39) declaration -> . VAR ID type COLONEQ exp
    (32) for -> . FOR
    (33) for -> . FOR exp
    (34) for -> . FOR exp SEMICOLON exp SEMICOLON exp
    (35) for -> . FOR RANGE exp
    (36) for -> . FOR exp COMMA exp ASSIGN RANGE exp
    (77) return -> . RETURN exp
    (78) return -> . RETURN

    IF              shift and go to state 25
    VAR             shift and go to state 29
    FOR             shift and go to state 30
    RETURN          shift and go to state 31

    statement1                     shift and go to state 130
    statement2                     shift and go to state 131
    declaration                    shift and go to state 26
    for                            shift and go to state 27
    return                         shift and go to state 28

state 128

    (34) for -> FOR exp SEMICOLON exp SEMICOLON exp .

    IF              reduce using rule 34 (for -> FOR exp SEMICOLON exp SEMICOLON exp .)
    VAR             reduce using rule 34 (for -> FOR exp SEMICOLON exp SEMICOLON exp .)
    FOR             reduce using rule 34 (for -> FOR exp SEMICOLON exp SEMICOLON exp .)
    RETURN          reduce using rule 34 (for -> FOR exp SEMICOLON exp SEMICOLON exp .)
    RCHAVES         reduce using rule 34 (for -> FOR exp SEMICOLON exp SEMICOLON exp .)
    ELSE            reduce using rule 34 (for -> FOR exp SEMICOLON exp SEMICOLON exp .)


state 129

    (36) for -> FOR exp COMMA exp ASSIGN RANGE . exp
    (43) exp -> . exp1
    (44) exp1 -> . NUMBER
    (45) exp1 -> . STRING
    (46) exp1 -> . ID
    (47) exp1 -> . TRUE
    (48) exp1 -> . FALSE
    (49) exp1 -> . LPAREN exp RPAREN
    (50) exp1 -> . exp2
    (51) exp2 -> . exp2 DPLUS
    (52) exp2 -> . exp2 DMINUS
    (53) exp2 -> . NOT exp2
    (54) exp2 -> . exp3
    (55) exp3 -> . exp3 TIMES exp4
    (56) exp3 -> . exp3 DIVIDE exp4
    (57) exp3 -> . exp3 MOD exp4
    (58) exp3 -> . exp4
    (59) exp4 -> . exp4 PLUS exp5
    (60) exp4 -> . exp4 MINUS exp5
    (61) exp4 -> . exp5
    (62) exp5 -> . exp5 LESS exp6
    (63) exp5 -> . exp5 GREATER exp6
    (64) exp5 -> . exp5 LESS_EQUAL exp6
    (65) exp5 -> . exp5 GREATER_EQUAL exp6
    (66) exp5 -> . exp6
    (67) exp6 -> . exp6 EQUALS exp7
    (68) exp6 -> . exp6 DIFFERENT exp7
    (69) exp6 -> . exp7
    (70) exp7 -> . exp7 AND exp8
    (71) exp7 -> . exp8
    (72) exp8 -> . exp8 OR exp9
    (73) exp8 -> . exp9
    (74) exp9 -> . exp9 ASSIGN exp1
    (75) exp9 -> . exp9 COLONEQ exp1
    (76) exp9 -> . exp1

    NUMBER          shift and go to state 45
    STRING          shift and go to state 46
    ID              shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 62
    NOT             shift and go to state 51

    exp                            shift and go to state 132
    exp1                           shift and go to state 44
    exp2                           shift and go to state 50
    exp3                           shift and go to state 52
    exp4                           shift and go to state 53
    exp5                           shift and go to state 54
    exp6                           shift and go to state 55
    exp7                           shift and go to state 56
    exp8                           shift and go to state 57
    exp9                           shift and go to state 58

state 130

    (21) statement1 -> IF LPAREN exp RPAREN statement1 ELSE statement1 .
    (25) statement1 -> statement1 .

  ! reduce/reduce conflict for ELSE resolved using rule 21 (statement1 -> IF LPAREN exp RPAREN statement1 ELSE statement1 .)
  ! reduce/reduce conflict for IF resolved using rule 21 (statement1 -> IF LPAREN exp RPAREN statement1 ELSE statement1 .)
  ! reduce/reduce conflict for VAR resolved using rule 21 (statement1 -> IF LPAREN exp RPAREN statement1 ELSE statement1 .)
  ! reduce/reduce conflict for FOR resolved using rule 21 (statement1 -> IF LPAREN exp RPAREN statement1 ELSE statement1 .)
  ! reduce/reduce conflict for RETURN resolved using rule 21 (statement1 -> IF LPAREN exp RPAREN statement1 ELSE statement1 .)
  ! reduce/reduce conflict for RCHAVES resolved using rule 21 (statement1 -> IF LPAREN exp RPAREN statement1 ELSE statement1 .)
    IF              reduce using rule 21 (statement1 -> IF LPAREN exp RPAREN statement1 ELSE statement1 .)
    VAR             reduce using rule 21 (statement1 -> IF LPAREN exp RPAREN statement1 ELSE statement1 .)
    FOR             reduce using rule 21 (statement1 -> IF LPAREN exp RPAREN statement1 ELSE statement1 .)
    RETURN          reduce using rule 21 (statement1 -> IF LPAREN exp RPAREN statement1 ELSE statement1 .)
    RCHAVES         reduce using rule 21 (statement1 -> IF LPAREN exp RPAREN statement1 ELSE statement1 .)
    ELSE            reduce using rule 21 (statement1 -> IF LPAREN exp RPAREN statement1 ELSE statement1 .)

  ! ELSE            [ reduce using rule 25 (statement1 -> statement1 .) ]
  ! IF              [ reduce using rule 25 (statement1 -> statement1 .) ]
  ! VAR             [ reduce using rule 25 (statement1 -> statement1 .) ]
  ! FOR             [ reduce using rule 25 (statement1 -> statement1 .) ]
  ! RETURN          [ reduce using rule 25 (statement1 -> statement1 .) ]
  ! RCHAVES         [ reduce using rule 25 (statement1 -> statement1 .) ]


state 131

    (31) statement2 -> IF LPAREN exp RPAREN statement1 ELSE statement2 .
    (26) statement1 -> statement2 .

  ! reduce/reduce conflict for ELSE resolved using rule 26 (statement1 -> statement2 .)
  ! reduce/reduce conflict for IF resolved using rule 26 (statement1 -> statement2 .)
  ! reduce/reduce conflict for VAR resolved using rule 26 (statement1 -> statement2 .)
  ! reduce/reduce conflict for FOR resolved using rule 26 (statement1 -> statement2 .)
  ! reduce/reduce conflict for RETURN resolved using rule 26 (statement1 -> statement2 .)
  ! reduce/reduce conflict for RCHAVES resolved using rule 26 (statement1 -> statement2 .)
    ELSE            reduce using rule 26 (statement1 -> statement2 .)
    IF              reduce using rule 26 (statement1 -> statement2 .)
    VAR             reduce using rule 26 (statement1 -> statement2 .)
    FOR             reduce using rule 26 (statement1 -> statement2 .)
    RETURN          reduce using rule 26 (statement1 -> statement2 .)
    RCHAVES         reduce using rule 26 (statement1 -> statement2 .)

  ! IF              [ reduce using rule 31 (statement2 -> IF LPAREN exp RPAREN statement1 ELSE statement2 .) ]
  ! VAR             [ reduce using rule 31 (statement2 -> IF LPAREN exp RPAREN statement1 ELSE statement2 .) ]
  ! FOR             [ reduce using rule 31 (statement2 -> IF LPAREN exp RPAREN statement1 ELSE statement2 .) ]
  ! RETURN          [ reduce using rule 31 (statement2 -> IF LPAREN exp RPAREN statement1 ELSE statement2 .) ]
  ! RCHAVES         [ reduce using rule 31 (statement2 -> IF LPAREN exp RPAREN statement1 ELSE statement2 .) ]
  ! ELSE            [ reduce using rule 31 (statement2 -> IF LPAREN exp RPAREN statement1 ELSE statement2 .) ]


state 132

    (36) for -> FOR exp COMMA exp ASSIGN RANGE exp .

    IF              reduce using rule 36 (for -> FOR exp COMMA exp ASSIGN RANGE exp .)
    VAR             reduce using rule 36 (for -> FOR exp COMMA exp ASSIGN RANGE exp .)
    FOR             reduce using rule 36 (for -> FOR exp COMMA exp ASSIGN RANGE exp .)
    RETURN          reduce using rule 36 (for -> FOR exp COMMA exp ASSIGN RANGE exp .)
    RCHAVES         reduce using rule 36 (for -> FOR exp COMMA exp ASSIGN RANGE exp .)
    ELSE            reduce using rule 36 (for -> FOR exp COMMA exp ASSIGN RANGE exp .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for DPLUS in state 50 resolved as shift
WARNING: shift/reduce conflict for DMINUS in state 50 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 52 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 52 resolved as shift
WARNING: shift/reduce conflict for MOD in state 52 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 53 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 53 resolved as shift
WARNING: shift/reduce conflict for LESS in state 54 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 54 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 54 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 54 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 55 resolved as shift
WARNING: shift/reduce conflict for DIFFERENT in state 55 resolved as shift
WARNING: shift/reduce conflict for AND in state 56 resolved as shift
WARNING: shift/reduce conflict for OR in state 57 resolved as shift
WARNING: shift/reduce conflict for ASSIGN in state 58 resolved as shift
WARNING: shift/reduce conflict for COLONEQ in state 58 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 68 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 68 resolved as shift
WARNING: shift/reduce conflict for DPLUS in state 73 resolved as shift
WARNING: shift/reduce conflict for DMINUS in state 73 resolved as shift
WARNING: shift/reduce conflict for DPLUS in state 73 resolved as shift
WARNING: shift/reduce conflict for DMINUS in state 73 resolved as shift
WARNING: shift/reduce conflict for IF in state 97 resolved as shift
WARNING: shift/reduce conflict for VAR in state 97 resolved as shift
WARNING: shift/reduce conflict for FOR in state 97 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 97 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 99 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 99 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 99 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 99 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 100 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 100 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 100 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 100 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 101 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 101 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 101 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 101 resolved as shift
WARNING: shift/reduce conflict for LESS in state 102 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 102 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 102 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 102 resolved as shift
WARNING: shift/reduce conflict for LESS in state 102 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 102 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 102 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 102 resolved as shift
WARNING: shift/reduce conflict for LESS in state 103 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 103 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 103 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 103 resolved as shift
WARNING: shift/reduce conflict for LESS in state 103 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 103 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 103 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 103 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 104 resolved as shift
WARNING: shift/reduce conflict for DIFFERENT in state 104 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 104 resolved as shift
WARNING: shift/reduce conflict for DIFFERENT in state 104 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 105 resolved as shift
WARNING: shift/reduce conflict for DIFFERENT in state 105 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 105 resolved as shift
WARNING: shift/reduce conflict for DIFFERENT in state 105 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 106 resolved as shift
WARNING: shift/reduce conflict for DIFFERENT in state 106 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 106 resolved as shift
WARNING: shift/reduce conflict for DIFFERENT in state 106 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 107 resolved as shift
WARNING: shift/reduce conflict for DIFFERENT in state 107 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 107 resolved as shift
WARNING: shift/reduce conflict for DIFFERENT in state 107 resolved as shift
WARNING: shift/reduce conflict for AND in state 108 resolved as shift
WARNING: shift/reduce conflict for AND in state 108 resolved as shift
WARNING: shift/reduce conflict for AND in state 109 resolved as shift
WARNING: shift/reduce conflict for AND in state 109 resolved as shift
WARNING: shift/reduce conflict for OR in state 110 resolved as shift
WARNING: shift/reduce conflict for OR in state 110 resolved as shift
WARNING: shift/reduce conflict for ASSIGN in state 111 resolved as shift
WARNING: shift/reduce conflict for COLONEQ in state 111 resolved as shift
WARNING: shift/reduce conflict for ASSIGN in state 111 resolved as shift
WARNING: shift/reduce conflict for COLONEQ in state 111 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 119 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 119 resolved as shift
WARNING: reduce/reduce conflict in state 23 resolved using rule (statement -> statement1)
WARNING: rejected rule (statement1 -> statement1) in state 23
WARNING: reduce/reduce conflict in state 24 resolved using rule (statement -> statement2)
WARNING: rejected rule (statement1 -> statement2) in state 24
WARNING: reduce/reduce conflict in state 44 resolved using rule (exp -> exp1)
WARNING: rejected rule (exp9 -> exp1) in state 44
WARNING: reduce/reduce conflict in state 68 resolved using rule (statement -> statement1)
WARNING: rejected rule (statement1 -> statement1) in state 68
WARNING: reduce/reduce conflict in state 70 resolved using rule (statement -> statement2)
WARNING: rejected rule (statement1 -> statement2) in state 70
WARNING: reduce/reduce conflict in state 73 resolved using rule (exp1 -> exp2)
WARNING: rejected rule (exp2 -> NOT exp2) in state 73
WARNING: reduce/reduce conflict in state 99 resolved using rule (exp3 -> exp3 TIMES exp4)
WARNING: rejected rule (exp3 -> exp4) in state 99
WARNING: reduce/reduce conflict in state 100 resolved using rule (exp3 -> exp3 DIVIDE exp4)
WARNING: rejected rule (exp3 -> exp4) in state 100
WARNING: reduce/reduce conflict in state 101 resolved using rule (exp3 -> exp3 MOD exp4)
WARNING: rejected rule (exp3 -> exp4) in state 101
WARNING: reduce/reduce conflict in state 102 resolved using rule (exp4 -> exp4 PLUS exp5)
WARNING: rejected rule (exp4 -> exp5) in state 102
WARNING: reduce/reduce conflict in state 103 resolved using rule (exp4 -> exp4 MINUS exp5)
WARNING: rejected rule (exp4 -> exp5) in state 103
WARNING: reduce/reduce conflict in state 104 resolved using rule (exp5 -> exp5 LESS exp6)
WARNING: rejected rule (exp5 -> exp6) in state 104
WARNING: reduce/reduce conflict in state 105 resolved using rule (exp5 -> exp5 GREATER exp6)
WARNING: rejected rule (exp5 -> exp6) in state 105
WARNING: reduce/reduce conflict in state 106 resolved using rule (exp5 -> exp5 LESS_EQUAL exp6)
WARNING: rejected rule (exp5 -> exp6) in state 106
WARNING: reduce/reduce conflict in state 107 resolved using rule (exp5 -> exp5 GREATER_EQUAL exp6)
WARNING: rejected rule (exp5 -> exp6) in state 107
WARNING: reduce/reduce conflict in state 108 resolved using rule (exp6 -> exp6 EQUALS exp7)
WARNING: rejected rule (exp6 -> exp7) in state 108
WARNING: reduce/reduce conflict in state 109 resolved using rule (exp6 -> exp6 DIFFERENT exp7)
WARNING: rejected rule (exp6 -> exp7) in state 109
WARNING: reduce/reduce conflict in state 110 resolved using rule (exp7 -> exp7 AND exp8)
WARNING: rejected rule (exp7 -> exp8) in state 110
WARNING: reduce/reduce conflict in state 111 resolved using rule (exp8 -> exp8 OR exp9)
WARNING: rejected rule (exp8 -> exp9) in state 111
WARNING: reduce/reduce conflict in state 112 resolved using rule (exp9 -> exp9 ASSIGN exp1)
WARNING: rejected rule (exp9 -> exp1) in state 112
WARNING: reduce/reduce conflict in state 113 resolved using rule (exp9 -> exp9 COLONEQ exp1)
WARNING: rejected rule (exp9 -> exp1) in state 113
WARNING: reduce/reduce conflict in state 119 resolved using rule (statement -> statement1)
WARNING: rejected rule (statement1 -> statement1) in state 119
WARNING: reduce/reduce conflict in state 121 resolved using rule (statement1 -> IF exp statement1 ELSE statement1)
WARNING: rejected rule (statement1 -> statement1) in state 121
WARNING: reduce/reduce conflict in state 122 resolved using rule (statement1 -> statement2)
WARNING: rejected rule (statement2 -> IF exp statement1 ELSE statement2) in state 122
WARNING: reduce/reduce conflict in state 130 resolved using rule (statement1 -> IF LPAREN exp RPAREN statement1 ELSE statement1)
WARNING: rejected rule (statement1 -> statement1) in state 130
WARNING: reduce/reduce conflict in state 131 resolved using rule (statement1 -> statement2)
WARNING: rejected rule (statement2 -> IF LPAREN exp RPAREN statement1 ELSE statement2) in state 131
WARNING: Rule (statement1 -> statement1) is never reduced
WARNING: Rule (exp2 -> NOT exp2) is never reduced
WARNING: Rule (statement2 -> IF exp statement1 ELSE statement2) is never reduced
WARNING: Rule (statement2 -> IF LPAREN exp RPAREN statement1 ELSE statement2) is never reduced
