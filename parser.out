Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> programaGO
Rule 1     programaGO -> defpackage defimport funcdecls
Rule 2     defpackage -> PACKAGE ID
Rule 3     defimport -> IMPORT ID
Rule 4     funcdecl -> FUNC ID signature body
Rule 5     funcdecls -> funcdecl
Rule 6     funcdecls -> funcdecl funcdecls
Rule 7     signature -> LPAREN sigparams RPAREN
Rule 8     signature -> LPAREN sigparams RPAREN funcreturn
Rule 9     signature -> LPAREN RPAREN
Rule 10    signature -> LPAREN RPAREN funcreturn
Rule 11    sigparams -> ID type
Rule 12    sigparams -> ID type COMMA sigparams
Rule 13    funcreturn -> type
Rule 14    funcreturn -> LPAREN type RPAREN
Rule 15    body -> LCHAVES stms RCHAVES
Rule 16    body -> LCHAVES RCHAVES
Rule 17    stms -> statement
Rule 18    stms -> statement NEWLINE stms
Rule 19    stms -> statement NEWLINE
Rule 20    statement -> statement1
Rule 21    statement1 -> IF LPAREN exp RPAREN body ELSE body
Rule 22    statement1 -> IF exp statement1 ELSE body
Rule 23    statement1 -> IF exp body
Rule 24    statement1 -> IF LPAREN exp RPAREN body
Rule 25    statement1 -> declaration
Rule 26    statement1 -> for
Rule 27    statement1 -> callFunc
Rule 28    statement1 -> callFuncP
Rule 29    statement1 -> return
Rule 30    statement1 -> break
Rule 31    for -> FOR body
Rule 32    for -> FOR exp body
Rule 33    for -> FOR exp SEMICOLON exp SEMICOLON exp body
Rule 34    declaration -> VAR ID type
Rule 35    declaration -> VAR ID type ASSIGN exp
Rule 36    declaration -> VAR ID type COLONEQ exp
Rule 37    declaration -> VAR ID type SEMICOLON
Rule 38    declaration -> VAR ID type ASSIGN exp SEMICOLON
Rule 39    declaration -> VAR ID type COLONEQ exp SEMICOLON
Rule 40    type -> INT
Rule 41    type -> STRING
Rule 42    type -> BOOL
Rule 43    exp -> exp1
Rule 44    exp1 -> exp1 ASSIGN exp2
Rule 45    exp1 -> exp1 COLONEQ exp2
Rule 46    exp1 -> exp2
Rule 47    exp2 -> exp2 OR exp3
Rule 48    exp2 -> exp3
Rule 49    exp3 -> exp3 AND exp4
Rule 50    exp3 -> exp4
Rule 51    exp4 -> exp4 EQUALS exp5
Rule 52    exp4 -> exp4 DIFFERENT exp5
Rule 53    exp4 -> exp5
Rule 54    exp5 -> exp5 LESS exp6
Rule 55    exp5 -> exp5 GREATER exp6
Rule 56    exp5 -> exp5 LESS_EQUAL exp6
Rule 57    exp5 -> exp5 GREATER_EQUAL exp6
Rule 58    exp5 -> exp6
Rule 59    exp6 -> exp6 PLUS exp7
Rule 60    exp6 -> exp6 MINUS exp7
Rule 61    exp6 -> exp7
Rule 62    exp7 -> exp7 TIMES exp8
Rule 63    exp7 -> exp7 DIVIDE exp8
Rule 64    exp7 -> exp7 MOD exp8
Rule 65    exp7 -> exp8
Rule 66    exp8 -> exp8 DPLUS
Rule 67    exp8 -> exp8 DMINUS
Rule 68    exp8 -> NOT exp8
Rule 69    exp8 -> exp9
Rule 70    exp9 -> NUMBER
Rule 71    exp9 -> STRING
Rule 72    exp9 -> ID
Rule 73    exp9 -> TRUE
Rule 74    exp9 -> FALSE
Rule 75    exp9 -> LPAREN exp RPAREN
Rule 76    exp9 -> exp
Rule 77    return -> RETURN exp
Rule 78    return -> RETURN
Rule 79    return -> RETURN exp SEMICOLON
Rule 80    return -> RETURN SEMICOLON
Rule 81    break -> BREAK
Rule 82    break -> BREAK SEMICOLON
Rule 83    callFunc -> ID LPAREN params RPAREN
Rule 84    callFunc -> ID LPAREN RPAREN
Rule 85    callFunc -> ID LPAREN params RPAREN SEMICOLON
Rule 86    callFunc -> ID LPAREN RPAREN SEMICOLON
Rule 87    callFuncP -> ID DOT ID LPAREN params RPAREN
Rule 88    callFuncP -> ID DOT ID LPAREN RPAREN
Rule 89    callFuncP -> ID DOT ID LPAREN params RPAREN SEMICOLON
Rule 90    callFuncP -> ID DOT ID LPAREN RPAREN SEMICOLON
Rule 91    params -> exp COMMA params
Rule 92    params -> exp

Terminals, with rules where they appear

AND                  : 49
ASSIGN               : 35 38 44
BOOL                 : 42
BREAK                : 81 82
COLONEQ              : 36 39 45
COMMA                : 12 91
DIFFERENT            : 52
DIVIDE               : 63
DMINUS               : 67
DOT                  : 87 88 89 90
DPLUS                : 66
ELSE                 : 21 22
EQUALS               : 51
FALSE                : 74
FOR                  : 31 32 33
FUNC                 : 4
GREATER              : 55
GREATER_EQUAL        : 57
ID                   : 2 3 4 11 12 34 35 36 37 38 39 72 83 84 85 86 87 87 88 88 89 89 90 90
IF                   : 21 22 23 24
IMPORT               : 3
INT                  : 40
LCHAVES              : 15 16
LESS                 : 54
LESS_EQUAL           : 56
LPAREN               : 7 8 9 10 14 21 24 75 83 84 85 86 87 88 89 90
MINUS                : 60
MOD                  : 64
NEWLINE              : 18 19
NOT                  : 68
NUMBER               : 70
OR                   : 47
PACKAGE              : 2
PLUS                 : 59
RCHAVES              : 15 16
RETURN               : 77 78 79 80
RPAREN               : 7 8 9 10 14 21 24 75 83 84 85 86 87 88 89 90
SEMICOLON            : 33 33 37 38 39 79 80 82 85 86 89 90
STRING               : 41 71
TIMES                : 62
TRUE                 : 73
VAR                  : 34 35 36 37 38 39
error                : 

Nonterminals, with rules where they appear

body                 : 4 21 21 22 23 24 31 32 33
break                : 30
callFunc             : 27
callFuncP            : 28
declaration          : 25
defimport            : 1
defpackage           : 1
exp                  : 21 22 23 24 32 33 33 33 35 36 38 39 75 76 77 79 91 92
exp1                 : 43 44 45
exp2                 : 44 45 46 47
exp3                 : 47 48 49
exp4                 : 49 50 51 52
exp5                 : 51 52 53 54 55 56 57
exp6                 : 54 55 56 57 58 59 60
exp7                 : 59 60 61 62 63 64
exp8                 : 62 63 64 65 66 67 68
exp9                 : 69
for                  : 26
funcdecl             : 5 6
funcdecls            : 1 6
funcreturn           : 8 10
params               : 83 85 87 89 91
programaGO           : 0
return               : 29
signature            : 4
sigparams            : 7 8 12
statement            : 17 18 19
statement1           : 20 22
stms                 : 15 18
type                 : 11 12 13 14 34 35 36 37 38 39

Parsing method: LALR

state 0

    (0) S' -> . programaGO
    (1) programaGO -> . defpackage defimport funcdecls
    (2) defpackage -> . PACKAGE ID

    PACKAGE         shift and go to state 3

    programaGO                     shift and go to state 1
    defpackage                     shift and go to state 2

state 1

    (0) S' -> programaGO .



state 2

    (1) programaGO -> defpackage . defimport funcdecls
    (3) defimport -> . IMPORT ID

    IMPORT          shift and go to state 5

    defimport                      shift and go to state 4

state 3

    (2) defpackage -> PACKAGE . ID

    ID              shift and go to state 6


state 4

    (1) programaGO -> defpackage defimport . funcdecls
    (5) funcdecls -> . funcdecl
    (6) funcdecls -> . funcdecl funcdecls
    (4) funcdecl -> . FUNC ID signature body

    FUNC            shift and go to state 9

    funcdecls                      shift and go to state 7
    funcdecl                       shift and go to state 8

state 5

    (3) defimport -> IMPORT . ID

    ID              shift and go to state 10


state 6

    (2) defpackage -> PACKAGE ID .

    IMPORT          reduce using rule 2 (defpackage -> PACKAGE ID .)


state 7

    (1) programaGO -> defpackage defimport funcdecls .

    $end            reduce using rule 1 (programaGO -> defpackage defimport funcdecls .)


state 8

    (5) funcdecls -> funcdecl .
    (6) funcdecls -> funcdecl . funcdecls
    (5) funcdecls -> . funcdecl
    (6) funcdecls -> . funcdecl funcdecls
    (4) funcdecl -> . FUNC ID signature body

    $end            reduce using rule 5 (funcdecls -> funcdecl .)
    FUNC            shift and go to state 9

    funcdecl                       shift and go to state 8
    funcdecls                      shift and go to state 11

state 9

    (4) funcdecl -> FUNC . ID signature body

    ID              shift and go to state 12


state 10

    (3) defimport -> IMPORT ID .

    FUNC            reduce using rule 3 (defimport -> IMPORT ID .)


state 11

    (6) funcdecls -> funcdecl funcdecls .

    $end            reduce using rule 6 (funcdecls -> funcdecl funcdecls .)


state 12

    (4) funcdecl -> FUNC ID . signature body
    (7) signature -> . LPAREN sigparams RPAREN
    (8) signature -> . LPAREN sigparams RPAREN funcreturn
    (9) signature -> . LPAREN RPAREN
    (10) signature -> . LPAREN RPAREN funcreturn

    LPAREN          shift and go to state 14

    signature                      shift and go to state 13

state 13

    (4) funcdecl -> FUNC ID signature . body
    (15) body -> . LCHAVES stms RCHAVES
    (16) body -> . LCHAVES RCHAVES

    LCHAVES         shift and go to state 16

    body                           shift and go to state 15

state 14

    (7) signature -> LPAREN . sigparams RPAREN
    (8) signature -> LPAREN . sigparams RPAREN funcreturn
    (9) signature -> LPAREN . RPAREN
    (10) signature -> LPAREN . RPAREN funcreturn
    (11) sigparams -> . ID type
    (12) sigparams -> . ID type COMMA sigparams

    RPAREN          shift and go to state 18
    ID              shift and go to state 19

    sigparams                      shift and go to state 17

state 15

    (4) funcdecl -> FUNC ID signature body .

    FUNC            reduce using rule 4 (funcdecl -> FUNC ID signature body .)
    $end            reduce using rule 4 (funcdecl -> FUNC ID signature body .)


state 16

    (15) body -> LCHAVES . stms RCHAVES
    (16) body -> LCHAVES . RCHAVES
    (17) stms -> . statement
    (18) stms -> . statement NEWLINE stms
    (19) stms -> . statement NEWLINE
    (20) statement -> . statement1
    (21) statement1 -> . IF LPAREN exp RPAREN body ELSE body
    (22) statement1 -> . IF exp statement1 ELSE body
    (23) statement1 -> . IF exp body
    (24) statement1 -> . IF LPAREN exp RPAREN body
    (25) statement1 -> . declaration
    (26) statement1 -> . for
    (27) statement1 -> . callFunc
    (28) statement1 -> . callFuncP
    (29) statement1 -> . return
    (30) statement1 -> . break
    (34) declaration -> . VAR ID type
    (35) declaration -> . VAR ID type ASSIGN exp
    (36) declaration -> . VAR ID type COLONEQ exp
    (37) declaration -> . VAR ID type SEMICOLON
    (38) declaration -> . VAR ID type ASSIGN exp SEMICOLON
    (39) declaration -> . VAR ID type COLONEQ exp SEMICOLON
    (31) for -> . FOR body
    (32) for -> . FOR exp body
    (33) for -> . FOR exp SEMICOLON exp SEMICOLON exp body
    (83) callFunc -> . ID LPAREN params RPAREN
    (84) callFunc -> . ID LPAREN RPAREN
    (85) callFunc -> . ID LPAREN params RPAREN SEMICOLON
    (86) callFunc -> . ID LPAREN RPAREN SEMICOLON
    (87) callFuncP -> . ID DOT ID LPAREN params RPAREN
    (88) callFuncP -> . ID DOT ID LPAREN RPAREN
    (89) callFuncP -> . ID DOT ID LPAREN params RPAREN SEMICOLON
    (90) callFuncP -> . ID DOT ID LPAREN RPAREN SEMICOLON
    (77) return -> . RETURN exp
    (78) return -> . RETURN
    (79) return -> . RETURN exp SEMICOLON
    (80) return -> . RETURN SEMICOLON
    (81) break -> . BREAK
    (82) break -> . BREAK SEMICOLON

    RCHAVES         shift and go to state 21
    IF              shift and go to state 24
    VAR             shift and go to state 31
    FOR             shift and go to state 33
    ID              shift and go to state 32
    RETURN          shift and go to state 34
    BREAK           shift and go to state 35

    stms                           shift and go to state 20
    statement                      shift and go to state 22
    statement1                     shift and go to state 23
    declaration                    shift and go to state 25
    for                            shift and go to state 26
    callFunc                       shift and go to state 27
    callFuncP                      shift and go to state 28
    return                         shift and go to state 29
    break                          shift and go to state 30

state 17

    (7) signature -> LPAREN sigparams . RPAREN
    (8) signature -> LPAREN sigparams . RPAREN funcreturn

    RPAREN          shift and go to state 36


state 18

    (9) signature -> LPAREN RPAREN .
    (10) signature -> LPAREN RPAREN . funcreturn
    (13) funcreturn -> . type
    (14) funcreturn -> . LPAREN type RPAREN
    (40) type -> . INT
    (41) type -> . STRING
    (42) type -> . BOOL

    LCHAVES         reduce using rule 9 (signature -> LPAREN RPAREN .)
    LPAREN          shift and go to state 37
    INT             shift and go to state 40
    STRING          shift and go to state 41
    BOOL            shift and go to state 42

    funcreturn                     shift and go to state 38
    type                           shift and go to state 39

state 19

    (11) sigparams -> ID . type
    (12) sigparams -> ID . type COMMA sigparams
    (40) type -> . INT
    (41) type -> . STRING
    (42) type -> . BOOL

    INT             shift and go to state 40
    STRING          shift and go to state 41
    BOOL            shift and go to state 42

    type                           shift and go to state 43

state 20

    (15) body -> LCHAVES stms . RCHAVES

    RCHAVES         shift and go to state 44


state 21

    (16) body -> LCHAVES RCHAVES .

    FUNC            reduce using rule 16 (body -> LCHAVES RCHAVES .)
    $end            reduce using rule 16 (body -> LCHAVES RCHAVES .)
    NEWLINE         reduce using rule 16 (body -> LCHAVES RCHAVES .)
    RCHAVES         reduce using rule 16 (body -> LCHAVES RCHAVES .)
    ELSE            reduce using rule 16 (body -> LCHAVES RCHAVES .)


state 22

    (17) stms -> statement .
    (18) stms -> statement . NEWLINE stms
    (19) stms -> statement . NEWLINE

    RCHAVES         reduce using rule 17 (stms -> statement .)
    NEWLINE         shift and go to state 45


state 23

    (20) statement -> statement1 .

    NEWLINE         reduce using rule 20 (statement -> statement1 .)
    RCHAVES         reduce using rule 20 (statement -> statement1 .)


state 24

    (21) statement1 -> IF . LPAREN exp RPAREN body ELSE body
    (22) statement1 -> IF . exp statement1 ELSE body
    (23) statement1 -> IF . exp body
    (24) statement1 -> IF . LPAREN exp RPAREN body
    (43) exp -> . exp1
    (44) exp1 -> . exp1 ASSIGN exp2
    (45) exp1 -> . exp1 COLONEQ exp2
    (46) exp1 -> . exp2
    (47) exp2 -> . exp2 OR exp3
    (48) exp2 -> . exp3
    (49) exp3 -> . exp3 AND exp4
    (50) exp3 -> . exp4
    (51) exp4 -> . exp4 EQUALS exp5
    (52) exp4 -> . exp4 DIFFERENT exp5
    (53) exp4 -> . exp5
    (54) exp5 -> . exp5 LESS exp6
    (55) exp5 -> . exp5 GREATER exp6
    (56) exp5 -> . exp5 LESS_EQUAL exp6
    (57) exp5 -> . exp5 GREATER_EQUAL exp6
    (58) exp5 -> . exp6
    (59) exp6 -> . exp6 PLUS exp7
    (60) exp6 -> . exp6 MINUS exp7
    (61) exp6 -> . exp7
    (62) exp7 -> . exp7 TIMES exp8
    (63) exp7 -> . exp7 DIVIDE exp8
    (64) exp7 -> . exp7 MOD exp8
    (65) exp7 -> . exp8
    (66) exp8 -> . exp8 DPLUS
    (67) exp8 -> . exp8 DMINUS
    (68) exp8 -> . NOT exp8
    (69) exp8 -> . exp9
    (70) exp9 -> . NUMBER
    (71) exp9 -> . STRING
    (72) exp9 -> . ID
    (73) exp9 -> . TRUE
    (74) exp9 -> . FALSE
    (75) exp9 -> . LPAREN exp RPAREN
    (76) exp9 -> . exp

    LPAREN          shift and go to state 46
    NOT             shift and go to state 56
    NUMBER          shift and go to state 58
    STRING          shift and go to state 59
    ID              shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62

    exp                            shift and go to state 47
    exp1                           shift and go to state 48
    exp2                           shift and go to state 49
    exp3                           shift and go to state 50
    exp4                           shift and go to state 51
    exp5                           shift and go to state 52
    exp6                           shift and go to state 53
    exp7                           shift and go to state 54
    exp8                           shift and go to state 55
    exp9                           shift and go to state 57

state 25

    (25) statement1 -> declaration .

    NEWLINE         reduce using rule 25 (statement1 -> declaration .)
    RCHAVES         reduce using rule 25 (statement1 -> declaration .)
    ELSE            reduce using rule 25 (statement1 -> declaration .)


state 26

    (26) statement1 -> for .

    NEWLINE         reduce using rule 26 (statement1 -> for .)
    RCHAVES         reduce using rule 26 (statement1 -> for .)
    ELSE            reduce using rule 26 (statement1 -> for .)


state 27

    (27) statement1 -> callFunc .

    NEWLINE         reduce using rule 27 (statement1 -> callFunc .)
    RCHAVES         reduce using rule 27 (statement1 -> callFunc .)
    ELSE            reduce using rule 27 (statement1 -> callFunc .)


state 28

    (28) statement1 -> callFuncP .

    NEWLINE         reduce using rule 28 (statement1 -> callFuncP .)
    RCHAVES         reduce using rule 28 (statement1 -> callFuncP .)
    ELSE            reduce using rule 28 (statement1 -> callFuncP .)


state 29

    (29) statement1 -> return .

    NEWLINE         reduce using rule 29 (statement1 -> return .)
    RCHAVES         reduce using rule 29 (statement1 -> return .)
    ELSE            reduce using rule 29 (statement1 -> return .)


state 30

    (30) statement1 -> break .

    NEWLINE         reduce using rule 30 (statement1 -> break .)
    RCHAVES         reduce using rule 30 (statement1 -> break .)
    ELSE            reduce using rule 30 (statement1 -> break .)


state 31

    (34) declaration -> VAR . ID type
    (35) declaration -> VAR . ID type ASSIGN exp
    (36) declaration -> VAR . ID type COLONEQ exp
    (37) declaration -> VAR . ID type SEMICOLON
    (38) declaration -> VAR . ID type ASSIGN exp SEMICOLON
    (39) declaration -> VAR . ID type COLONEQ exp SEMICOLON

    ID              shift and go to state 63


state 32

    (83) callFunc -> ID . LPAREN params RPAREN
    (84) callFunc -> ID . LPAREN RPAREN
    (85) callFunc -> ID . LPAREN params RPAREN SEMICOLON
    (86) callFunc -> ID . LPAREN RPAREN SEMICOLON
    (87) callFuncP -> ID . DOT ID LPAREN params RPAREN
    (88) callFuncP -> ID . DOT ID LPAREN RPAREN
    (89) callFuncP -> ID . DOT ID LPAREN params RPAREN SEMICOLON
    (90) callFuncP -> ID . DOT ID LPAREN RPAREN SEMICOLON

    LPAREN          shift and go to state 64
    DOT             shift and go to state 65


state 33

    (31) for -> FOR . body
    (32) for -> FOR . exp body
    (33) for -> FOR . exp SEMICOLON exp SEMICOLON exp body
    (15) body -> . LCHAVES stms RCHAVES
    (16) body -> . LCHAVES RCHAVES
    (43) exp -> . exp1
    (44) exp1 -> . exp1 ASSIGN exp2
    (45) exp1 -> . exp1 COLONEQ exp2
    (46) exp1 -> . exp2
    (47) exp2 -> . exp2 OR exp3
    (48) exp2 -> . exp3
    (49) exp3 -> . exp3 AND exp4
    (50) exp3 -> . exp4
    (51) exp4 -> . exp4 EQUALS exp5
    (52) exp4 -> . exp4 DIFFERENT exp5
    (53) exp4 -> . exp5
    (54) exp5 -> . exp5 LESS exp6
    (55) exp5 -> . exp5 GREATER exp6
    (56) exp5 -> . exp5 LESS_EQUAL exp6
    (57) exp5 -> . exp5 GREATER_EQUAL exp6
    (58) exp5 -> . exp6
    (59) exp6 -> . exp6 PLUS exp7
    (60) exp6 -> . exp6 MINUS exp7
    (61) exp6 -> . exp7
    (62) exp7 -> . exp7 TIMES exp8
    (63) exp7 -> . exp7 DIVIDE exp8
    (64) exp7 -> . exp7 MOD exp8
    (65) exp7 -> . exp8
    (66) exp8 -> . exp8 DPLUS
    (67) exp8 -> . exp8 DMINUS
    (68) exp8 -> . NOT exp8
    (69) exp8 -> . exp9
    (70) exp9 -> . NUMBER
    (71) exp9 -> . STRING
    (72) exp9 -> . ID
    (73) exp9 -> . TRUE
    (74) exp9 -> . FALSE
    (75) exp9 -> . LPAREN exp RPAREN
    (76) exp9 -> . exp

    LCHAVES         shift and go to state 16
    NOT             shift and go to state 56
    NUMBER          shift and go to state 58
    STRING          shift and go to state 59
    ID              shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    LPAREN          shift and go to state 68

    body                           shift and go to state 66
    exp                            shift and go to state 67
    exp1                           shift and go to state 48
    exp2                           shift and go to state 49
    exp3                           shift and go to state 50
    exp4                           shift and go to state 51
    exp5                           shift and go to state 52
    exp6                           shift and go to state 53
    exp7                           shift and go to state 54
    exp8                           shift and go to state 55
    exp9                           shift and go to state 57

state 34

    (77) return -> RETURN . exp
    (78) return -> RETURN .
    (79) return -> RETURN . exp SEMICOLON
    (80) return -> RETURN . SEMICOLON
    (43) exp -> . exp1
    (44) exp1 -> . exp1 ASSIGN exp2
    (45) exp1 -> . exp1 COLONEQ exp2
    (46) exp1 -> . exp2
    (47) exp2 -> . exp2 OR exp3
    (48) exp2 -> . exp3
    (49) exp3 -> . exp3 AND exp4
    (50) exp3 -> . exp4
    (51) exp4 -> . exp4 EQUALS exp5
    (52) exp4 -> . exp4 DIFFERENT exp5
    (53) exp4 -> . exp5
    (54) exp5 -> . exp5 LESS exp6
    (55) exp5 -> . exp5 GREATER exp6
    (56) exp5 -> . exp5 LESS_EQUAL exp6
    (57) exp5 -> . exp5 GREATER_EQUAL exp6
    (58) exp5 -> . exp6
    (59) exp6 -> . exp6 PLUS exp7
    (60) exp6 -> . exp6 MINUS exp7
    (61) exp6 -> . exp7
    (62) exp7 -> . exp7 TIMES exp8
    (63) exp7 -> . exp7 DIVIDE exp8
    (64) exp7 -> . exp7 MOD exp8
    (65) exp7 -> . exp8
    (66) exp8 -> . exp8 DPLUS
    (67) exp8 -> . exp8 DMINUS
    (68) exp8 -> . NOT exp8
    (69) exp8 -> . exp9
    (70) exp9 -> . NUMBER
    (71) exp9 -> . STRING
    (72) exp9 -> . ID
    (73) exp9 -> . TRUE
    (74) exp9 -> . FALSE
    (75) exp9 -> . LPAREN exp RPAREN
    (76) exp9 -> . exp

    NEWLINE         reduce using rule 78 (return -> RETURN .)
    RCHAVES         reduce using rule 78 (return -> RETURN .)
    ELSE            reduce using rule 78 (return -> RETURN .)
    SEMICOLON       shift and go to state 70
    NOT             shift and go to state 56
    NUMBER          shift and go to state 58
    STRING          shift and go to state 59
    ID              shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    LPAREN          shift and go to state 68

    exp                            shift and go to state 69
    exp1                           shift and go to state 48
    exp2                           shift and go to state 49
    exp3                           shift and go to state 50
    exp4                           shift and go to state 51
    exp5                           shift and go to state 52
    exp6                           shift and go to state 53
    exp7                           shift and go to state 54
    exp8                           shift and go to state 55
    exp9                           shift and go to state 57

state 35

    (81) break -> BREAK .
    (82) break -> BREAK . SEMICOLON

    NEWLINE         reduce using rule 81 (break -> BREAK .)
    RCHAVES         reduce using rule 81 (break -> BREAK .)
    ELSE            reduce using rule 81 (break -> BREAK .)
    SEMICOLON       shift and go to state 71


state 36

    (7) signature -> LPAREN sigparams RPAREN .
    (8) signature -> LPAREN sigparams RPAREN . funcreturn
    (13) funcreturn -> . type
    (14) funcreturn -> . LPAREN type RPAREN
    (40) type -> . INT
    (41) type -> . STRING
    (42) type -> . BOOL

    LCHAVES         reduce using rule 7 (signature -> LPAREN sigparams RPAREN .)
    LPAREN          shift and go to state 37
    INT             shift and go to state 40
    STRING          shift and go to state 41
    BOOL            shift and go to state 42

    funcreturn                     shift and go to state 72
    type                           shift and go to state 39

state 37

    (14) funcreturn -> LPAREN . type RPAREN
    (40) type -> . INT
    (41) type -> . STRING
    (42) type -> . BOOL

    INT             shift and go to state 40
    STRING          shift and go to state 41
    BOOL            shift and go to state 42

    type                           shift and go to state 73

state 38

    (10) signature -> LPAREN RPAREN funcreturn .

    LCHAVES         reduce using rule 10 (signature -> LPAREN RPAREN funcreturn .)


state 39

    (13) funcreturn -> type .

    LCHAVES         reduce using rule 13 (funcreturn -> type .)


state 40

    (40) type -> INT .

    LCHAVES         reduce using rule 40 (type -> INT .)
    COMMA           reduce using rule 40 (type -> INT .)
    RPAREN          reduce using rule 40 (type -> INT .)
    ASSIGN          reduce using rule 40 (type -> INT .)
    COLONEQ         reduce using rule 40 (type -> INT .)
    SEMICOLON       reduce using rule 40 (type -> INT .)
    NEWLINE         reduce using rule 40 (type -> INT .)
    RCHAVES         reduce using rule 40 (type -> INT .)
    ELSE            reduce using rule 40 (type -> INT .)


state 41

    (41) type -> STRING .

    LCHAVES         reduce using rule 41 (type -> STRING .)
    COMMA           reduce using rule 41 (type -> STRING .)
    RPAREN          reduce using rule 41 (type -> STRING .)
    ASSIGN          reduce using rule 41 (type -> STRING .)
    COLONEQ         reduce using rule 41 (type -> STRING .)
    SEMICOLON       reduce using rule 41 (type -> STRING .)
    NEWLINE         reduce using rule 41 (type -> STRING .)
    RCHAVES         reduce using rule 41 (type -> STRING .)
    ELSE            reduce using rule 41 (type -> STRING .)


state 42

    (42) type -> BOOL .

    LCHAVES         reduce using rule 42 (type -> BOOL .)
    COMMA           reduce using rule 42 (type -> BOOL .)
    RPAREN          reduce using rule 42 (type -> BOOL .)
    ASSIGN          reduce using rule 42 (type -> BOOL .)
    COLONEQ         reduce using rule 42 (type -> BOOL .)
    SEMICOLON       reduce using rule 42 (type -> BOOL .)
    NEWLINE         reduce using rule 42 (type -> BOOL .)
    RCHAVES         reduce using rule 42 (type -> BOOL .)
    ELSE            reduce using rule 42 (type -> BOOL .)


state 43

    (11) sigparams -> ID type .
    (12) sigparams -> ID type . COMMA sigparams

    RPAREN          reduce using rule 11 (sigparams -> ID type .)
    COMMA           shift and go to state 74


state 44

    (15) body -> LCHAVES stms RCHAVES .

    FUNC            reduce using rule 15 (body -> LCHAVES stms RCHAVES .)
    $end            reduce using rule 15 (body -> LCHAVES stms RCHAVES .)
    NEWLINE         reduce using rule 15 (body -> LCHAVES stms RCHAVES .)
    RCHAVES         reduce using rule 15 (body -> LCHAVES stms RCHAVES .)
    ELSE            reduce using rule 15 (body -> LCHAVES stms RCHAVES .)


state 45

    (18) stms -> statement NEWLINE . stms
    (19) stms -> statement NEWLINE .
    (17) stms -> . statement
    (18) stms -> . statement NEWLINE stms
    (19) stms -> . statement NEWLINE
    (20) statement -> . statement1
    (21) statement1 -> . IF LPAREN exp RPAREN body ELSE body
    (22) statement1 -> . IF exp statement1 ELSE body
    (23) statement1 -> . IF exp body
    (24) statement1 -> . IF LPAREN exp RPAREN body
    (25) statement1 -> . declaration
    (26) statement1 -> . for
    (27) statement1 -> . callFunc
    (28) statement1 -> . callFuncP
    (29) statement1 -> . return
    (30) statement1 -> . break
    (34) declaration -> . VAR ID type
    (35) declaration -> . VAR ID type ASSIGN exp
    (36) declaration -> . VAR ID type COLONEQ exp
    (37) declaration -> . VAR ID type SEMICOLON
    (38) declaration -> . VAR ID type ASSIGN exp SEMICOLON
    (39) declaration -> . VAR ID type COLONEQ exp SEMICOLON
    (31) for -> . FOR body
    (32) for -> . FOR exp body
    (33) for -> . FOR exp SEMICOLON exp SEMICOLON exp body
    (83) callFunc -> . ID LPAREN params RPAREN
    (84) callFunc -> . ID LPAREN RPAREN
    (85) callFunc -> . ID LPAREN params RPAREN SEMICOLON
    (86) callFunc -> . ID LPAREN RPAREN SEMICOLON
    (87) callFuncP -> . ID DOT ID LPAREN params RPAREN
    (88) callFuncP -> . ID DOT ID LPAREN RPAREN
    (89) callFuncP -> . ID DOT ID LPAREN params RPAREN SEMICOLON
    (90) callFuncP -> . ID DOT ID LPAREN RPAREN SEMICOLON
    (77) return -> . RETURN exp
    (78) return -> . RETURN
    (79) return -> . RETURN exp SEMICOLON
    (80) return -> . RETURN SEMICOLON
    (81) break -> . BREAK
    (82) break -> . BREAK SEMICOLON

    RCHAVES         reduce using rule 19 (stms -> statement NEWLINE .)
    IF              shift and go to state 24
    VAR             shift and go to state 31
    FOR             shift and go to state 33
    ID              shift and go to state 32
    RETURN          shift and go to state 34
    BREAK           shift and go to state 35

    statement                      shift and go to state 22
    stms                           shift and go to state 75
    statement1                     shift and go to state 23
    declaration                    shift and go to state 25
    for                            shift and go to state 26
    callFunc                       shift and go to state 27
    callFuncP                      shift and go to state 28
    return                         shift and go to state 29
    break                          shift and go to state 30

state 46

    (21) statement1 -> IF LPAREN . exp RPAREN body ELSE body
    (24) statement1 -> IF LPAREN . exp RPAREN body
    (75) exp9 -> LPAREN . exp RPAREN
    (43) exp -> . exp1
    (44) exp1 -> . exp1 ASSIGN exp2
    (45) exp1 -> . exp1 COLONEQ exp2
    (46) exp1 -> . exp2
    (47) exp2 -> . exp2 OR exp3
    (48) exp2 -> . exp3
    (49) exp3 -> . exp3 AND exp4
    (50) exp3 -> . exp4
    (51) exp4 -> . exp4 EQUALS exp5
    (52) exp4 -> . exp4 DIFFERENT exp5
    (53) exp4 -> . exp5
    (54) exp5 -> . exp5 LESS exp6
    (55) exp5 -> . exp5 GREATER exp6
    (56) exp5 -> . exp5 LESS_EQUAL exp6
    (57) exp5 -> . exp5 GREATER_EQUAL exp6
    (58) exp5 -> . exp6
    (59) exp6 -> . exp6 PLUS exp7
    (60) exp6 -> . exp6 MINUS exp7
    (61) exp6 -> . exp7
    (62) exp7 -> . exp7 TIMES exp8
    (63) exp7 -> . exp7 DIVIDE exp8
    (64) exp7 -> . exp7 MOD exp8
    (65) exp7 -> . exp8
    (66) exp8 -> . exp8 DPLUS
    (67) exp8 -> . exp8 DMINUS
    (68) exp8 -> . NOT exp8
    (69) exp8 -> . exp9
    (70) exp9 -> . NUMBER
    (71) exp9 -> . STRING
    (72) exp9 -> . ID
    (73) exp9 -> . TRUE
    (74) exp9 -> . FALSE
    (75) exp9 -> . LPAREN exp RPAREN
    (76) exp9 -> . exp

    NOT             shift and go to state 56
    NUMBER          shift and go to state 58
    STRING          shift and go to state 59
    ID              shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    LPAREN          shift and go to state 68

    exp                            shift and go to state 76
    exp1                           shift and go to state 48
    exp2                           shift and go to state 49
    exp3                           shift and go to state 50
    exp4                           shift and go to state 51
    exp5                           shift and go to state 52
    exp6                           shift and go to state 53
    exp7                           shift and go to state 54
    exp8                           shift and go to state 55
    exp9                           shift and go to state 57

state 47

    (22) statement1 -> IF exp . statement1 ELSE body
    (23) statement1 -> IF exp . body
    (76) exp9 -> exp .
    (21) statement1 -> . IF LPAREN exp RPAREN body ELSE body
    (22) statement1 -> . IF exp statement1 ELSE body
    (23) statement1 -> . IF exp body
    (24) statement1 -> . IF LPAREN exp RPAREN body
    (25) statement1 -> . declaration
    (26) statement1 -> . for
    (27) statement1 -> . callFunc
    (28) statement1 -> . callFuncP
    (29) statement1 -> . return
    (30) statement1 -> . break
    (15) body -> . LCHAVES stms RCHAVES
    (16) body -> . LCHAVES RCHAVES
    (34) declaration -> . VAR ID type
    (35) declaration -> . VAR ID type ASSIGN exp
    (36) declaration -> . VAR ID type COLONEQ exp
    (37) declaration -> . VAR ID type SEMICOLON
    (38) declaration -> . VAR ID type ASSIGN exp SEMICOLON
    (39) declaration -> . VAR ID type COLONEQ exp SEMICOLON
    (31) for -> . FOR body
    (32) for -> . FOR exp body
    (33) for -> . FOR exp SEMICOLON exp SEMICOLON exp body
    (83) callFunc -> . ID LPAREN params RPAREN
    (84) callFunc -> . ID LPAREN RPAREN
    (85) callFunc -> . ID LPAREN params RPAREN SEMICOLON
    (86) callFunc -> . ID LPAREN RPAREN SEMICOLON
    (87) callFuncP -> . ID DOT ID LPAREN params RPAREN
    (88) callFuncP -> . ID DOT ID LPAREN RPAREN
    (89) callFuncP -> . ID DOT ID LPAREN params RPAREN SEMICOLON
    (90) callFuncP -> . ID DOT ID LPAREN RPAREN SEMICOLON
    (77) return -> . RETURN exp
    (78) return -> . RETURN
    (79) return -> . RETURN exp SEMICOLON
    (80) return -> . RETURN SEMICOLON
    (81) break -> . BREAK
    (82) break -> . BREAK SEMICOLON

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for LCHAVES resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
    DPLUS           reduce using rule 76 (exp9 -> exp .)
    DMINUS          reduce using rule 76 (exp9 -> exp .)
    TIMES           reduce using rule 76 (exp9 -> exp .)
    DIVIDE          reduce using rule 76 (exp9 -> exp .)
    MOD             reduce using rule 76 (exp9 -> exp .)
    PLUS            reduce using rule 76 (exp9 -> exp .)
    MINUS           reduce using rule 76 (exp9 -> exp .)
    LESS            reduce using rule 76 (exp9 -> exp .)
    GREATER         reduce using rule 76 (exp9 -> exp .)
    LESS_EQUAL      reduce using rule 76 (exp9 -> exp .)
    GREATER_EQUAL   reduce using rule 76 (exp9 -> exp .)
    EQUALS          reduce using rule 76 (exp9 -> exp .)
    DIFFERENT       reduce using rule 76 (exp9 -> exp .)
    AND             reduce using rule 76 (exp9 -> exp .)
    OR              reduce using rule 76 (exp9 -> exp .)
    ASSIGN          reduce using rule 76 (exp9 -> exp .)
    COLONEQ         reduce using rule 76 (exp9 -> exp .)
    IF              shift and go to state 24
    LCHAVES         shift and go to state 16
    VAR             shift and go to state 31
    FOR             shift and go to state 33
    ID              shift and go to state 32
    RETURN          shift and go to state 34
    BREAK           shift and go to state 35

  ! IF              [ reduce using rule 76 (exp9 -> exp .) ]
  ! LCHAVES         [ reduce using rule 76 (exp9 -> exp .) ]
  ! VAR             [ reduce using rule 76 (exp9 -> exp .) ]
  ! FOR             [ reduce using rule 76 (exp9 -> exp .) ]
  ! ID              [ reduce using rule 76 (exp9 -> exp .) ]
  ! RETURN          [ reduce using rule 76 (exp9 -> exp .) ]
  ! BREAK           [ reduce using rule 76 (exp9 -> exp .) ]

    statement1                     shift and go to state 77
    body                           shift and go to state 78
    declaration                    shift and go to state 25
    for                            shift and go to state 26
    callFunc                       shift and go to state 27
    callFuncP                      shift and go to state 28
    return                         shift and go to state 29
    break                          shift and go to state 30

state 48

    (43) exp -> exp1 .
    (44) exp1 -> exp1 . ASSIGN exp2
    (45) exp1 -> exp1 . COLONEQ exp2

  ! shift/reduce conflict for ASSIGN resolved as shift
  ! shift/reduce conflict for COLONEQ resolved as shift
    IF              reduce using rule 43 (exp -> exp1 .)
    LCHAVES         reduce using rule 43 (exp -> exp1 .)
    VAR             reduce using rule 43 (exp -> exp1 .)
    FOR             reduce using rule 43 (exp -> exp1 .)
    ID              reduce using rule 43 (exp -> exp1 .)
    RETURN          reduce using rule 43 (exp -> exp1 .)
    BREAK           reduce using rule 43 (exp -> exp1 .)
    DPLUS           reduce using rule 43 (exp -> exp1 .)
    DMINUS          reduce using rule 43 (exp -> exp1 .)
    TIMES           reduce using rule 43 (exp -> exp1 .)
    DIVIDE          reduce using rule 43 (exp -> exp1 .)
    MOD             reduce using rule 43 (exp -> exp1 .)
    PLUS            reduce using rule 43 (exp -> exp1 .)
    MINUS           reduce using rule 43 (exp -> exp1 .)
    LESS            reduce using rule 43 (exp -> exp1 .)
    GREATER         reduce using rule 43 (exp -> exp1 .)
    LESS_EQUAL      reduce using rule 43 (exp -> exp1 .)
    GREATER_EQUAL   reduce using rule 43 (exp -> exp1 .)
    EQUALS          reduce using rule 43 (exp -> exp1 .)
    DIFFERENT       reduce using rule 43 (exp -> exp1 .)
    AND             reduce using rule 43 (exp -> exp1 .)
    OR              reduce using rule 43 (exp -> exp1 .)
    SEMICOLON       reduce using rule 43 (exp -> exp1 .)
    NEWLINE         reduce using rule 43 (exp -> exp1 .)
    RCHAVES         reduce using rule 43 (exp -> exp1 .)
    ELSE            reduce using rule 43 (exp -> exp1 .)
    RPAREN          reduce using rule 43 (exp -> exp1 .)
    COMMA           reduce using rule 43 (exp -> exp1 .)
    ASSIGN          shift and go to state 79
    COLONEQ         shift and go to state 80

  ! ASSIGN          [ reduce using rule 43 (exp -> exp1 .) ]
  ! COLONEQ         [ reduce using rule 43 (exp -> exp1 .) ]


state 49

    (46) exp1 -> exp2 .
    (47) exp2 -> exp2 . OR exp3

  ! shift/reduce conflict for OR resolved as shift
    IF              reduce using rule 46 (exp1 -> exp2 .)
    LCHAVES         reduce using rule 46 (exp1 -> exp2 .)
    VAR             reduce using rule 46 (exp1 -> exp2 .)
    FOR             reduce using rule 46 (exp1 -> exp2 .)
    ID              reduce using rule 46 (exp1 -> exp2 .)
    RETURN          reduce using rule 46 (exp1 -> exp2 .)
    BREAK           reduce using rule 46 (exp1 -> exp2 .)
    DPLUS           reduce using rule 46 (exp1 -> exp2 .)
    DMINUS          reduce using rule 46 (exp1 -> exp2 .)
    TIMES           reduce using rule 46 (exp1 -> exp2 .)
    DIVIDE          reduce using rule 46 (exp1 -> exp2 .)
    MOD             reduce using rule 46 (exp1 -> exp2 .)
    PLUS            reduce using rule 46 (exp1 -> exp2 .)
    MINUS           reduce using rule 46 (exp1 -> exp2 .)
    LESS            reduce using rule 46 (exp1 -> exp2 .)
    GREATER         reduce using rule 46 (exp1 -> exp2 .)
    LESS_EQUAL      reduce using rule 46 (exp1 -> exp2 .)
    GREATER_EQUAL   reduce using rule 46 (exp1 -> exp2 .)
    EQUALS          reduce using rule 46 (exp1 -> exp2 .)
    DIFFERENT       reduce using rule 46 (exp1 -> exp2 .)
    AND             reduce using rule 46 (exp1 -> exp2 .)
    ASSIGN          reduce using rule 46 (exp1 -> exp2 .)
    COLONEQ         reduce using rule 46 (exp1 -> exp2 .)
    SEMICOLON       reduce using rule 46 (exp1 -> exp2 .)
    NEWLINE         reduce using rule 46 (exp1 -> exp2 .)
    RCHAVES         reduce using rule 46 (exp1 -> exp2 .)
    ELSE            reduce using rule 46 (exp1 -> exp2 .)
    RPAREN          reduce using rule 46 (exp1 -> exp2 .)
    COMMA           reduce using rule 46 (exp1 -> exp2 .)
    OR              shift and go to state 81

  ! OR              [ reduce using rule 46 (exp1 -> exp2 .) ]


state 50

    (48) exp2 -> exp3 .
    (49) exp3 -> exp3 . AND exp4

  ! shift/reduce conflict for AND resolved as shift
    IF              reduce using rule 48 (exp2 -> exp3 .)
    LCHAVES         reduce using rule 48 (exp2 -> exp3 .)
    VAR             reduce using rule 48 (exp2 -> exp3 .)
    FOR             reduce using rule 48 (exp2 -> exp3 .)
    ID              reduce using rule 48 (exp2 -> exp3 .)
    RETURN          reduce using rule 48 (exp2 -> exp3 .)
    BREAK           reduce using rule 48 (exp2 -> exp3 .)
    DPLUS           reduce using rule 48 (exp2 -> exp3 .)
    DMINUS          reduce using rule 48 (exp2 -> exp3 .)
    TIMES           reduce using rule 48 (exp2 -> exp3 .)
    DIVIDE          reduce using rule 48 (exp2 -> exp3 .)
    MOD             reduce using rule 48 (exp2 -> exp3 .)
    PLUS            reduce using rule 48 (exp2 -> exp3 .)
    MINUS           reduce using rule 48 (exp2 -> exp3 .)
    LESS            reduce using rule 48 (exp2 -> exp3 .)
    GREATER         reduce using rule 48 (exp2 -> exp3 .)
    LESS_EQUAL      reduce using rule 48 (exp2 -> exp3 .)
    GREATER_EQUAL   reduce using rule 48 (exp2 -> exp3 .)
    EQUALS          reduce using rule 48 (exp2 -> exp3 .)
    DIFFERENT       reduce using rule 48 (exp2 -> exp3 .)
    OR              reduce using rule 48 (exp2 -> exp3 .)
    ASSIGN          reduce using rule 48 (exp2 -> exp3 .)
    COLONEQ         reduce using rule 48 (exp2 -> exp3 .)
    SEMICOLON       reduce using rule 48 (exp2 -> exp3 .)
    NEWLINE         reduce using rule 48 (exp2 -> exp3 .)
    RCHAVES         reduce using rule 48 (exp2 -> exp3 .)
    ELSE            reduce using rule 48 (exp2 -> exp3 .)
    RPAREN          reduce using rule 48 (exp2 -> exp3 .)
    COMMA           reduce using rule 48 (exp2 -> exp3 .)
    AND             shift and go to state 82

  ! AND             [ reduce using rule 48 (exp2 -> exp3 .) ]


state 51

    (50) exp3 -> exp4 .
    (51) exp4 -> exp4 . EQUALS exp5
    (52) exp4 -> exp4 . DIFFERENT exp5

  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for DIFFERENT resolved as shift
    IF              reduce using rule 50 (exp3 -> exp4 .)
    LCHAVES         reduce using rule 50 (exp3 -> exp4 .)
    VAR             reduce using rule 50 (exp3 -> exp4 .)
    FOR             reduce using rule 50 (exp3 -> exp4 .)
    ID              reduce using rule 50 (exp3 -> exp4 .)
    RETURN          reduce using rule 50 (exp3 -> exp4 .)
    BREAK           reduce using rule 50 (exp3 -> exp4 .)
    DPLUS           reduce using rule 50 (exp3 -> exp4 .)
    DMINUS          reduce using rule 50 (exp3 -> exp4 .)
    TIMES           reduce using rule 50 (exp3 -> exp4 .)
    DIVIDE          reduce using rule 50 (exp3 -> exp4 .)
    MOD             reduce using rule 50 (exp3 -> exp4 .)
    PLUS            reduce using rule 50 (exp3 -> exp4 .)
    MINUS           reduce using rule 50 (exp3 -> exp4 .)
    LESS            reduce using rule 50 (exp3 -> exp4 .)
    GREATER         reduce using rule 50 (exp3 -> exp4 .)
    LESS_EQUAL      reduce using rule 50 (exp3 -> exp4 .)
    GREATER_EQUAL   reduce using rule 50 (exp3 -> exp4 .)
    AND             reduce using rule 50 (exp3 -> exp4 .)
    OR              reduce using rule 50 (exp3 -> exp4 .)
    ASSIGN          reduce using rule 50 (exp3 -> exp4 .)
    COLONEQ         reduce using rule 50 (exp3 -> exp4 .)
    SEMICOLON       reduce using rule 50 (exp3 -> exp4 .)
    NEWLINE         reduce using rule 50 (exp3 -> exp4 .)
    RCHAVES         reduce using rule 50 (exp3 -> exp4 .)
    ELSE            reduce using rule 50 (exp3 -> exp4 .)
    RPAREN          reduce using rule 50 (exp3 -> exp4 .)
    COMMA           reduce using rule 50 (exp3 -> exp4 .)
    EQUALS          shift and go to state 83
    DIFFERENT       shift and go to state 84

  ! EQUALS          [ reduce using rule 50 (exp3 -> exp4 .) ]
  ! DIFFERENT       [ reduce using rule 50 (exp3 -> exp4 .) ]


state 52

    (53) exp4 -> exp5 .
    (54) exp5 -> exp5 . LESS exp6
    (55) exp5 -> exp5 . GREATER exp6
    (56) exp5 -> exp5 . LESS_EQUAL exp6
    (57) exp5 -> exp5 . GREATER_EQUAL exp6

  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
    IF              reduce using rule 53 (exp4 -> exp5 .)
    LCHAVES         reduce using rule 53 (exp4 -> exp5 .)
    VAR             reduce using rule 53 (exp4 -> exp5 .)
    FOR             reduce using rule 53 (exp4 -> exp5 .)
    ID              reduce using rule 53 (exp4 -> exp5 .)
    RETURN          reduce using rule 53 (exp4 -> exp5 .)
    BREAK           reduce using rule 53 (exp4 -> exp5 .)
    DPLUS           reduce using rule 53 (exp4 -> exp5 .)
    DMINUS          reduce using rule 53 (exp4 -> exp5 .)
    TIMES           reduce using rule 53 (exp4 -> exp5 .)
    DIVIDE          reduce using rule 53 (exp4 -> exp5 .)
    MOD             reduce using rule 53 (exp4 -> exp5 .)
    PLUS            reduce using rule 53 (exp4 -> exp5 .)
    MINUS           reduce using rule 53 (exp4 -> exp5 .)
    EQUALS          reduce using rule 53 (exp4 -> exp5 .)
    DIFFERENT       reduce using rule 53 (exp4 -> exp5 .)
    AND             reduce using rule 53 (exp4 -> exp5 .)
    OR              reduce using rule 53 (exp4 -> exp5 .)
    ASSIGN          reduce using rule 53 (exp4 -> exp5 .)
    COLONEQ         reduce using rule 53 (exp4 -> exp5 .)
    SEMICOLON       reduce using rule 53 (exp4 -> exp5 .)
    NEWLINE         reduce using rule 53 (exp4 -> exp5 .)
    RCHAVES         reduce using rule 53 (exp4 -> exp5 .)
    ELSE            reduce using rule 53 (exp4 -> exp5 .)
    RPAREN          reduce using rule 53 (exp4 -> exp5 .)
    COMMA           reduce using rule 53 (exp4 -> exp5 .)
    LESS            shift and go to state 85
    GREATER         shift and go to state 86
    LESS_EQUAL      shift and go to state 87
    GREATER_EQUAL   shift and go to state 88

  ! LESS            [ reduce using rule 53 (exp4 -> exp5 .) ]
  ! GREATER         [ reduce using rule 53 (exp4 -> exp5 .) ]
  ! LESS_EQUAL      [ reduce using rule 53 (exp4 -> exp5 .) ]
  ! GREATER_EQUAL   [ reduce using rule 53 (exp4 -> exp5 .) ]


state 53

    (58) exp5 -> exp6 .
    (59) exp6 -> exp6 . PLUS exp7
    (60) exp6 -> exp6 . MINUS exp7

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    IF              reduce using rule 58 (exp5 -> exp6 .)
    LCHAVES         reduce using rule 58 (exp5 -> exp6 .)
    VAR             reduce using rule 58 (exp5 -> exp6 .)
    FOR             reduce using rule 58 (exp5 -> exp6 .)
    ID              reduce using rule 58 (exp5 -> exp6 .)
    RETURN          reduce using rule 58 (exp5 -> exp6 .)
    BREAK           reduce using rule 58 (exp5 -> exp6 .)
    DPLUS           reduce using rule 58 (exp5 -> exp6 .)
    DMINUS          reduce using rule 58 (exp5 -> exp6 .)
    TIMES           reduce using rule 58 (exp5 -> exp6 .)
    DIVIDE          reduce using rule 58 (exp5 -> exp6 .)
    MOD             reduce using rule 58 (exp5 -> exp6 .)
    LESS            reduce using rule 58 (exp5 -> exp6 .)
    GREATER         reduce using rule 58 (exp5 -> exp6 .)
    LESS_EQUAL      reduce using rule 58 (exp5 -> exp6 .)
    GREATER_EQUAL   reduce using rule 58 (exp5 -> exp6 .)
    EQUALS          reduce using rule 58 (exp5 -> exp6 .)
    DIFFERENT       reduce using rule 58 (exp5 -> exp6 .)
    AND             reduce using rule 58 (exp5 -> exp6 .)
    OR              reduce using rule 58 (exp5 -> exp6 .)
    ASSIGN          reduce using rule 58 (exp5 -> exp6 .)
    COLONEQ         reduce using rule 58 (exp5 -> exp6 .)
    SEMICOLON       reduce using rule 58 (exp5 -> exp6 .)
    NEWLINE         reduce using rule 58 (exp5 -> exp6 .)
    RCHAVES         reduce using rule 58 (exp5 -> exp6 .)
    ELSE            reduce using rule 58 (exp5 -> exp6 .)
    RPAREN          reduce using rule 58 (exp5 -> exp6 .)
    COMMA           reduce using rule 58 (exp5 -> exp6 .)
    PLUS            shift and go to state 89
    MINUS           shift and go to state 90

  ! PLUS            [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! MINUS           [ reduce using rule 58 (exp5 -> exp6 .) ]


state 54

    (61) exp6 -> exp7 .
    (62) exp7 -> exp7 . TIMES exp8
    (63) exp7 -> exp7 . DIVIDE exp8
    (64) exp7 -> exp7 . MOD exp8

  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    IF              reduce using rule 61 (exp6 -> exp7 .)
    LCHAVES         reduce using rule 61 (exp6 -> exp7 .)
    VAR             reduce using rule 61 (exp6 -> exp7 .)
    FOR             reduce using rule 61 (exp6 -> exp7 .)
    ID              reduce using rule 61 (exp6 -> exp7 .)
    RETURN          reduce using rule 61 (exp6 -> exp7 .)
    BREAK           reduce using rule 61 (exp6 -> exp7 .)
    DPLUS           reduce using rule 61 (exp6 -> exp7 .)
    DMINUS          reduce using rule 61 (exp6 -> exp7 .)
    PLUS            reduce using rule 61 (exp6 -> exp7 .)
    MINUS           reduce using rule 61 (exp6 -> exp7 .)
    LESS            reduce using rule 61 (exp6 -> exp7 .)
    GREATER         reduce using rule 61 (exp6 -> exp7 .)
    LESS_EQUAL      reduce using rule 61 (exp6 -> exp7 .)
    GREATER_EQUAL   reduce using rule 61 (exp6 -> exp7 .)
    EQUALS          reduce using rule 61 (exp6 -> exp7 .)
    DIFFERENT       reduce using rule 61 (exp6 -> exp7 .)
    AND             reduce using rule 61 (exp6 -> exp7 .)
    OR              reduce using rule 61 (exp6 -> exp7 .)
    ASSIGN          reduce using rule 61 (exp6 -> exp7 .)
    COLONEQ         reduce using rule 61 (exp6 -> exp7 .)
    SEMICOLON       reduce using rule 61 (exp6 -> exp7 .)
    NEWLINE         reduce using rule 61 (exp6 -> exp7 .)
    RCHAVES         reduce using rule 61 (exp6 -> exp7 .)
    ELSE            reduce using rule 61 (exp6 -> exp7 .)
    RPAREN          reduce using rule 61 (exp6 -> exp7 .)
    COMMA           reduce using rule 61 (exp6 -> exp7 .)
    TIMES           shift and go to state 91
    DIVIDE          shift and go to state 92
    MOD             shift and go to state 93

  ! TIMES           [ reduce using rule 61 (exp6 -> exp7 .) ]
  ! DIVIDE          [ reduce using rule 61 (exp6 -> exp7 .) ]
  ! MOD             [ reduce using rule 61 (exp6 -> exp7 .) ]


state 55

    (65) exp7 -> exp8 .
    (66) exp8 -> exp8 . DPLUS
    (67) exp8 -> exp8 . DMINUS

  ! shift/reduce conflict for DPLUS resolved as shift
  ! shift/reduce conflict for DMINUS resolved as shift
    IF              reduce using rule 65 (exp7 -> exp8 .)
    LCHAVES         reduce using rule 65 (exp7 -> exp8 .)
    VAR             reduce using rule 65 (exp7 -> exp8 .)
    FOR             reduce using rule 65 (exp7 -> exp8 .)
    ID              reduce using rule 65 (exp7 -> exp8 .)
    RETURN          reduce using rule 65 (exp7 -> exp8 .)
    BREAK           reduce using rule 65 (exp7 -> exp8 .)
    TIMES           reduce using rule 65 (exp7 -> exp8 .)
    DIVIDE          reduce using rule 65 (exp7 -> exp8 .)
    MOD             reduce using rule 65 (exp7 -> exp8 .)
    PLUS            reduce using rule 65 (exp7 -> exp8 .)
    MINUS           reduce using rule 65 (exp7 -> exp8 .)
    LESS            reduce using rule 65 (exp7 -> exp8 .)
    GREATER         reduce using rule 65 (exp7 -> exp8 .)
    LESS_EQUAL      reduce using rule 65 (exp7 -> exp8 .)
    GREATER_EQUAL   reduce using rule 65 (exp7 -> exp8 .)
    EQUALS          reduce using rule 65 (exp7 -> exp8 .)
    DIFFERENT       reduce using rule 65 (exp7 -> exp8 .)
    AND             reduce using rule 65 (exp7 -> exp8 .)
    OR              reduce using rule 65 (exp7 -> exp8 .)
    ASSIGN          reduce using rule 65 (exp7 -> exp8 .)
    COLONEQ         reduce using rule 65 (exp7 -> exp8 .)
    SEMICOLON       reduce using rule 65 (exp7 -> exp8 .)
    NEWLINE         reduce using rule 65 (exp7 -> exp8 .)
    RCHAVES         reduce using rule 65 (exp7 -> exp8 .)
    ELSE            reduce using rule 65 (exp7 -> exp8 .)
    RPAREN          reduce using rule 65 (exp7 -> exp8 .)
    COMMA           reduce using rule 65 (exp7 -> exp8 .)
    DPLUS           shift and go to state 94
    DMINUS          shift and go to state 95

  ! DPLUS           [ reduce using rule 65 (exp7 -> exp8 .) ]
  ! DMINUS          [ reduce using rule 65 (exp7 -> exp8 .) ]


state 56

    (68) exp8 -> NOT . exp8
    (66) exp8 -> . exp8 DPLUS
    (67) exp8 -> . exp8 DMINUS
    (68) exp8 -> . NOT exp8
    (69) exp8 -> . exp9
    (70) exp9 -> . NUMBER
    (71) exp9 -> . STRING
    (72) exp9 -> . ID
    (73) exp9 -> . TRUE
    (74) exp9 -> . FALSE
    (75) exp9 -> . LPAREN exp RPAREN
    (76) exp9 -> . exp
    (43) exp -> . exp1
    (44) exp1 -> . exp1 ASSIGN exp2
    (45) exp1 -> . exp1 COLONEQ exp2
    (46) exp1 -> . exp2
    (47) exp2 -> . exp2 OR exp3
    (48) exp2 -> . exp3
    (49) exp3 -> . exp3 AND exp4
    (50) exp3 -> . exp4
    (51) exp4 -> . exp4 EQUALS exp5
    (52) exp4 -> . exp4 DIFFERENT exp5
    (53) exp4 -> . exp5
    (54) exp5 -> . exp5 LESS exp6
    (55) exp5 -> . exp5 GREATER exp6
    (56) exp5 -> . exp5 LESS_EQUAL exp6
    (57) exp5 -> . exp5 GREATER_EQUAL exp6
    (58) exp5 -> . exp6
    (59) exp6 -> . exp6 PLUS exp7
    (60) exp6 -> . exp6 MINUS exp7
    (61) exp6 -> . exp7
    (62) exp7 -> . exp7 TIMES exp8
    (63) exp7 -> . exp7 DIVIDE exp8
    (64) exp7 -> . exp7 MOD exp8
    (65) exp7 -> . exp8

    NOT             shift and go to state 56
    NUMBER          shift and go to state 58
    STRING          shift and go to state 59
    ID              shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    LPAREN          shift and go to state 68

    exp8                           shift and go to state 96
    exp9                           shift and go to state 57
    exp                            shift and go to state 97
    exp1                           shift and go to state 48
    exp2                           shift and go to state 49
    exp3                           shift and go to state 50
    exp4                           shift and go to state 51
    exp5                           shift and go to state 52
    exp6                           shift and go to state 53
    exp7                           shift and go to state 54

state 57

    (69) exp8 -> exp9 .

    IF              reduce using rule 69 (exp8 -> exp9 .)
    LCHAVES         reduce using rule 69 (exp8 -> exp9 .)
    VAR             reduce using rule 69 (exp8 -> exp9 .)
    FOR             reduce using rule 69 (exp8 -> exp9 .)
    ID              reduce using rule 69 (exp8 -> exp9 .)
    RETURN          reduce using rule 69 (exp8 -> exp9 .)
    BREAK           reduce using rule 69 (exp8 -> exp9 .)
    DPLUS           reduce using rule 69 (exp8 -> exp9 .)
    DMINUS          reduce using rule 69 (exp8 -> exp9 .)
    TIMES           reduce using rule 69 (exp8 -> exp9 .)
    DIVIDE          reduce using rule 69 (exp8 -> exp9 .)
    MOD             reduce using rule 69 (exp8 -> exp9 .)
    PLUS            reduce using rule 69 (exp8 -> exp9 .)
    MINUS           reduce using rule 69 (exp8 -> exp9 .)
    LESS            reduce using rule 69 (exp8 -> exp9 .)
    GREATER         reduce using rule 69 (exp8 -> exp9 .)
    LESS_EQUAL      reduce using rule 69 (exp8 -> exp9 .)
    GREATER_EQUAL   reduce using rule 69 (exp8 -> exp9 .)
    EQUALS          reduce using rule 69 (exp8 -> exp9 .)
    DIFFERENT       reduce using rule 69 (exp8 -> exp9 .)
    AND             reduce using rule 69 (exp8 -> exp9 .)
    OR              reduce using rule 69 (exp8 -> exp9 .)
    ASSIGN          reduce using rule 69 (exp8 -> exp9 .)
    COLONEQ         reduce using rule 69 (exp8 -> exp9 .)
    SEMICOLON       reduce using rule 69 (exp8 -> exp9 .)
    NEWLINE         reduce using rule 69 (exp8 -> exp9 .)
    RCHAVES         reduce using rule 69 (exp8 -> exp9 .)
    ELSE            reduce using rule 69 (exp8 -> exp9 .)
    RPAREN          reduce using rule 69 (exp8 -> exp9 .)
    COMMA           reduce using rule 69 (exp8 -> exp9 .)


state 58

    (70) exp9 -> NUMBER .

    IF              reduce using rule 70 (exp9 -> NUMBER .)
    LCHAVES         reduce using rule 70 (exp9 -> NUMBER .)
    VAR             reduce using rule 70 (exp9 -> NUMBER .)
    FOR             reduce using rule 70 (exp9 -> NUMBER .)
    ID              reduce using rule 70 (exp9 -> NUMBER .)
    RETURN          reduce using rule 70 (exp9 -> NUMBER .)
    BREAK           reduce using rule 70 (exp9 -> NUMBER .)
    DPLUS           reduce using rule 70 (exp9 -> NUMBER .)
    DMINUS          reduce using rule 70 (exp9 -> NUMBER .)
    TIMES           reduce using rule 70 (exp9 -> NUMBER .)
    DIVIDE          reduce using rule 70 (exp9 -> NUMBER .)
    MOD             reduce using rule 70 (exp9 -> NUMBER .)
    PLUS            reduce using rule 70 (exp9 -> NUMBER .)
    MINUS           reduce using rule 70 (exp9 -> NUMBER .)
    LESS            reduce using rule 70 (exp9 -> NUMBER .)
    GREATER         reduce using rule 70 (exp9 -> NUMBER .)
    LESS_EQUAL      reduce using rule 70 (exp9 -> NUMBER .)
    GREATER_EQUAL   reduce using rule 70 (exp9 -> NUMBER .)
    EQUALS          reduce using rule 70 (exp9 -> NUMBER .)
    DIFFERENT       reduce using rule 70 (exp9 -> NUMBER .)
    AND             reduce using rule 70 (exp9 -> NUMBER .)
    OR              reduce using rule 70 (exp9 -> NUMBER .)
    ASSIGN          reduce using rule 70 (exp9 -> NUMBER .)
    COLONEQ         reduce using rule 70 (exp9 -> NUMBER .)
    SEMICOLON       reduce using rule 70 (exp9 -> NUMBER .)
    NEWLINE         reduce using rule 70 (exp9 -> NUMBER .)
    RCHAVES         reduce using rule 70 (exp9 -> NUMBER .)
    ELSE            reduce using rule 70 (exp9 -> NUMBER .)
    RPAREN          reduce using rule 70 (exp9 -> NUMBER .)
    COMMA           reduce using rule 70 (exp9 -> NUMBER .)


state 59

    (71) exp9 -> STRING .

    IF              reduce using rule 71 (exp9 -> STRING .)
    LCHAVES         reduce using rule 71 (exp9 -> STRING .)
    VAR             reduce using rule 71 (exp9 -> STRING .)
    FOR             reduce using rule 71 (exp9 -> STRING .)
    ID              reduce using rule 71 (exp9 -> STRING .)
    RETURN          reduce using rule 71 (exp9 -> STRING .)
    BREAK           reduce using rule 71 (exp9 -> STRING .)
    DPLUS           reduce using rule 71 (exp9 -> STRING .)
    DMINUS          reduce using rule 71 (exp9 -> STRING .)
    TIMES           reduce using rule 71 (exp9 -> STRING .)
    DIVIDE          reduce using rule 71 (exp9 -> STRING .)
    MOD             reduce using rule 71 (exp9 -> STRING .)
    PLUS            reduce using rule 71 (exp9 -> STRING .)
    MINUS           reduce using rule 71 (exp9 -> STRING .)
    LESS            reduce using rule 71 (exp9 -> STRING .)
    GREATER         reduce using rule 71 (exp9 -> STRING .)
    LESS_EQUAL      reduce using rule 71 (exp9 -> STRING .)
    GREATER_EQUAL   reduce using rule 71 (exp9 -> STRING .)
    EQUALS          reduce using rule 71 (exp9 -> STRING .)
    DIFFERENT       reduce using rule 71 (exp9 -> STRING .)
    AND             reduce using rule 71 (exp9 -> STRING .)
    OR              reduce using rule 71 (exp9 -> STRING .)
    ASSIGN          reduce using rule 71 (exp9 -> STRING .)
    COLONEQ         reduce using rule 71 (exp9 -> STRING .)
    SEMICOLON       reduce using rule 71 (exp9 -> STRING .)
    NEWLINE         reduce using rule 71 (exp9 -> STRING .)
    RCHAVES         reduce using rule 71 (exp9 -> STRING .)
    ELSE            reduce using rule 71 (exp9 -> STRING .)
    RPAREN          reduce using rule 71 (exp9 -> STRING .)
    COMMA           reduce using rule 71 (exp9 -> STRING .)


state 60

    (72) exp9 -> ID .

    IF              reduce using rule 72 (exp9 -> ID .)
    LCHAVES         reduce using rule 72 (exp9 -> ID .)
    VAR             reduce using rule 72 (exp9 -> ID .)
    FOR             reduce using rule 72 (exp9 -> ID .)
    ID              reduce using rule 72 (exp9 -> ID .)
    RETURN          reduce using rule 72 (exp9 -> ID .)
    BREAK           reduce using rule 72 (exp9 -> ID .)
    DPLUS           reduce using rule 72 (exp9 -> ID .)
    DMINUS          reduce using rule 72 (exp9 -> ID .)
    TIMES           reduce using rule 72 (exp9 -> ID .)
    DIVIDE          reduce using rule 72 (exp9 -> ID .)
    MOD             reduce using rule 72 (exp9 -> ID .)
    PLUS            reduce using rule 72 (exp9 -> ID .)
    MINUS           reduce using rule 72 (exp9 -> ID .)
    LESS            reduce using rule 72 (exp9 -> ID .)
    GREATER         reduce using rule 72 (exp9 -> ID .)
    LESS_EQUAL      reduce using rule 72 (exp9 -> ID .)
    GREATER_EQUAL   reduce using rule 72 (exp9 -> ID .)
    EQUALS          reduce using rule 72 (exp9 -> ID .)
    DIFFERENT       reduce using rule 72 (exp9 -> ID .)
    AND             reduce using rule 72 (exp9 -> ID .)
    OR              reduce using rule 72 (exp9 -> ID .)
    ASSIGN          reduce using rule 72 (exp9 -> ID .)
    COLONEQ         reduce using rule 72 (exp9 -> ID .)
    SEMICOLON       reduce using rule 72 (exp9 -> ID .)
    NEWLINE         reduce using rule 72 (exp9 -> ID .)
    RCHAVES         reduce using rule 72 (exp9 -> ID .)
    ELSE            reduce using rule 72 (exp9 -> ID .)
    RPAREN          reduce using rule 72 (exp9 -> ID .)
    COMMA           reduce using rule 72 (exp9 -> ID .)


state 61

    (73) exp9 -> TRUE .

    IF              reduce using rule 73 (exp9 -> TRUE .)
    LCHAVES         reduce using rule 73 (exp9 -> TRUE .)
    VAR             reduce using rule 73 (exp9 -> TRUE .)
    FOR             reduce using rule 73 (exp9 -> TRUE .)
    ID              reduce using rule 73 (exp9 -> TRUE .)
    RETURN          reduce using rule 73 (exp9 -> TRUE .)
    BREAK           reduce using rule 73 (exp9 -> TRUE .)
    DPLUS           reduce using rule 73 (exp9 -> TRUE .)
    DMINUS          reduce using rule 73 (exp9 -> TRUE .)
    TIMES           reduce using rule 73 (exp9 -> TRUE .)
    DIVIDE          reduce using rule 73 (exp9 -> TRUE .)
    MOD             reduce using rule 73 (exp9 -> TRUE .)
    PLUS            reduce using rule 73 (exp9 -> TRUE .)
    MINUS           reduce using rule 73 (exp9 -> TRUE .)
    LESS            reduce using rule 73 (exp9 -> TRUE .)
    GREATER         reduce using rule 73 (exp9 -> TRUE .)
    LESS_EQUAL      reduce using rule 73 (exp9 -> TRUE .)
    GREATER_EQUAL   reduce using rule 73 (exp9 -> TRUE .)
    EQUALS          reduce using rule 73 (exp9 -> TRUE .)
    DIFFERENT       reduce using rule 73 (exp9 -> TRUE .)
    AND             reduce using rule 73 (exp9 -> TRUE .)
    OR              reduce using rule 73 (exp9 -> TRUE .)
    ASSIGN          reduce using rule 73 (exp9 -> TRUE .)
    COLONEQ         reduce using rule 73 (exp9 -> TRUE .)
    SEMICOLON       reduce using rule 73 (exp9 -> TRUE .)
    NEWLINE         reduce using rule 73 (exp9 -> TRUE .)
    RCHAVES         reduce using rule 73 (exp9 -> TRUE .)
    ELSE            reduce using rule 73 (exp9 -> TRUE .)
    RPAREN          reduce using rule 73 (exp9 -> TRUE .)
    COMMA           reduce using rule 73 (exp9 -> TRUE .)


state 62

    (74) exp9 -> FALSE .

    IF              reduce using rule 74 (exp9 -> FALSE .)
    LCHAVES         reduce using rule 74 (exp9 -> FALSE .)
    VAR             reduce using rule 74 (exp9 -> FALSE .)
    FOR             reduce using rule 74 (exp9 -> FALSE .)
    ID              reduce using rule 74 (exp9 -> FALSE .)
    RETURN          reduce using rule 74 (exp9 -> FALSE .)
    BREAK           reduce using rule 74 (exp9 -> FALSE .)
    DPLUS           reduce using rule 74 (exp9 -> FALSE .)
    DMINUS          reduce using rule 74 (exp9 -> FALSE .)
    TIMES           reduce using rule 74 (exp9 -> FALSE .)
    DIVIDE          reduce using rule 74 (exp9 -> FALSE .)
    MOD             reduce using rule 74 (exp9 -> FALSE .)
    PLUS            reduce using rule 74 (exp9 -> FALSE .)
    MINUS           reduce using rule 74 (exp9 -> FALSE .)
    LESS            reduce using rule 74 (exp9 -> FALSE .)
    GREATER         reduce using rule 74 (exp9 -> FALSE .)
    LESS_EQUAL      reduce using rule 74 (exp9 -> FALSE .)
    GREATER_EQUAL   reduce using rule 74 (exp9 -> FALSE .)
    EQUALS          reduce using rule 74 (exp9 -> FALSE .)
    DIFFERENT       reduce using rule 74 (exp9 -> FALSE .)
    AND             reduce using rule 74 (exp9 -> FALSE .)
    OR              reduce using rule 74 (exp9 -> FALSE .)
    ASSIGN          reduce using rule 74 (exp9 -> FALSE .)
    COLONEQ         reduce using rule 74 (exp9 -> FALSE .)
    SEMICOLON       reduce using rule 74 (exp9 -> FALSE .)
    NEWLINE         reduce using rule 74 (exp9 -> FALSE .)
    RCHAVES         reduce using rule 74 (exp9 -> FALSE .)
    ELSE            reduce using rule 74 (exp9 -> FALSE .)
    RPAREN          reduce using rule 74 (exp9 -> FALSE .)
    COMMA           reduce using rule 74 (exp9 -> FALSE .)


state 63

    (34) declaration -> VAR ID . type
    (35) declaration -> VAR ID . type ASSIGN exp
    (36) declaration -> VAR ID . type COLONEQ exp
    (37) declaration -> VAR ID . type SEMICOLON
    (38) declaration -> VAR ID . type ASSIGN exp SEMICOLON
    (39) declaration -> VAR ID . type COLONEQ exp SEMICOLON
    (40) type -> . INT
    (41) type -> . STRING
    (42) type -> . BOOL

    INT             shift and go to state 40
    STRING          shift and go to state 41
    BOOL            shift and go to state 42

    type                           shift and go to state 98

state 64

    (83) callFunc -> ID LPAREN . params RPAREN
    (84) callFunc -> ID LPAREN . RPAREN
    (85) callFunc -> ID LPAREN . params RPAREN SEMICOLON
    (86) callFunc -> ID LPAREN . RPAREN SEMICOLON
    (91) params -> . exp COMMA params
    (92) params -> . exp
    (43) exp -> . exp1
    (44) exp1 -> . exp1 ASSIGN exp2
    (45) exp1 -> . exp1 COLONEQ exp2
    (46) exp1 -> . exp2
    (47) exp2 -> . exp2 OR exp3
    (48) exp2 -> . exp3
    (49) exp3 -> . exp3 AND exp4
    (50) exp3 -> . exp4
    (51) exp4 -> . exp4 EQUALS exp5
    (52) exp4 -> . exp4 DIFFERENT exp5
    (53) exp4 -> . exp5
    (54) exp5 -> . exp5 LESS exp6
    (55) exp5 -> . exp5 GREATER exp6
    (56) exp5 -> . exp5 LESS_EQUAL exp6
    (57) exp5 -> . exp5 GREATER_EQUAL exp6
    (58) exp5 -> . exp6
    (59) exp6 -> . exp6 PLUS exp7
    (60) exp6 -> . exp6 MINUS exp7
    (61) exp6 -> . exp7
    (62) exp7 -> . exp7 TIMES exp8
    (63) exp7 -> . exp7 DIVIDE exp8
    (64) exp7 -> . exp7 MOD exp8
    (65) exp7 -> . exp8
    (66) exp8 -> . exp8 DPLUS
    (67) exp8 -> . exp8 DMINUS
    (68) exp8 -> . NOT exp8
    (69) exp8 -> . exp9
    (70) exp9 -> . NUMBER
    (71) exp9 -> . STRING
    (72) exp9 -> . ID
    (73) exp9 -> . TRUE
    (74) exp9 -> . FALSE
    (75) exp9 -> . LPAREN exp RPAREN
    (76) exp9 -> . exp

    RPAREN          shift and go to state 100
    NOT             shift and go to state 56
    NUMBER          shift and go to state 58
    STRING          shift and go to state 59
    ID              shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    LPAREN          shift and go to state 68

    params                         shift and go to state 99
    exp                            shift and go to state 101
    exp1                           shift and go to state 48
    exp2                           shift and go to state 49
    exp3                           shift and go to state 50
    exp4                           shift and go to state 51
    exp5                           shift and go to state 52
    exp6                           shift and go to state 53
    exp7                           shift and go to state 54
    exp8                           shift and go to state 55
    exp9                           shift and go to state 57

state 65

    (87) callFuncP -> ID DOT . ID LPAREN params RPAREN
    (88) callFuncP -> ID DOT . ID LPAREN RPAREN
    (89) callFuncP -> ID DOT . ID LPAREN params RPAREN SEMICOLON
    (90) callFuncP -> ID DOT . ID LPAREN RPAREN SEMICOLON

    ID              shift and go to state 102


state 66

    (31) for -> FOR body .

    NEWLINE         reduce using rule 31 (for -> FOR body .)
    RCHAVES         reduce using rule 31 (for -> FOR body .)
    ELSE            reduce using rule 31 (for -> FOR body .)


state 67

    (32) for -> FOR exp . body
    (33) for -> FOR exp . SEMICOLON exp SEMICOLON exp body
    (76) exp9 -> exp .
    (15) body -> . LCHAVES stms RCHAVES
    (16) body -> . LCHAVES RCHAVES

  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for LCHAVES resolved as shift
    SEMICOLON       shift and go to state 104
    DPLUS           reduce using rule 76 (exp9 -> exp .)
    DMINUS          reduce using rule 76 (exp9 -> exp .)
    TIMES           reduce using rule 76 (exp9 -> exp .)
    DIVIDE          reduce using rule 76 (exp9 -> exp .)
    MOD             reduce using rule 76 (exp9 -> exp .)
    PLUS            reduce using rule 76 (exp9 -> exp .)
    MINUS           reduce using rule 76 (exp9 -> exp .)
    LESS            reduce using rule 76 (exp9 -> exp .)
    GREATER         reduce using rule 76 (exp9 -> exp .)
    LESS_EQUAL      reduce using rule 76 (exp9 -> exp .)
    GREATER_EQUAL   reduce using rule 76 (exp9 -> exp .)
    EQUALS          reduce using rule 76 (exp9 -> exp .)
    DIFFERENT       reduce using rule 76 (exp9 -> exp .)
    AND             reduce using rule 76 (exp9 -> exp .)
    OR              reduce using rule 76 (exp9 -> exp .)
    ASSIGN          reduce using rule 76 (exp9 -> exp .)
    COLONEQ         reduce using rule 76 (exp9 -> exp .)
    LCHAVES         shift and go to state 16

  ! SEMICOLON       [ reduce using rule 76 (exp9 -> exp .) ]
  ! LCHAVES         [ reduce using rule 76 (exp9 -> exp .) ]

    body                           shift and go to state 103

state 68

    (75) exp9 -> LPAREN . exp RPAREN
    (43) exp -> . exp1
    (44) exp1 -> . exp1 ASSIGN exp2
    (45) exp1 -> . exp1 COLONEQ exp2
    (46) exp1 -> . exp2
    (47) exp2 -> . exp2 OR exp3
    (48) exp2 -> . exp3
    (49) exp3 -> . exp3 AND exp4
    (50) exp3 -> . exp4
    (51) exp4 -> . exp4 EQUALS exp5
    (52) exp4 -> . exp4 DIFFERENT exp5
    (53) exp4 -> . exp5
    (54) exp5 -> . exp5 LESS exp6
    (55) exp5 -> . exp5 GREATER exp6
    (56) exp5 -> . exp5 LESS_EQUAL exp6
    (57) exp5 -> . exp5 GREATER_EQUAL exp6
    (58) exp5 -> . exp6
    (59) exp6 -> . exp6 PLUS exp7
    (60) exp6 -> . exp6 MINUS exp7
    (61) exp6 -> . exp7
    (62) exp7 -> . exp7 TIMES exp8
    (63) exp7 -> . exp7 DIVIDE exp8
    (64) exp7 -> . exp7 MOD exp8
    (65) exp7 -> . exp8
    (66) exp8 -> . exp8 DPLUS
    (67) exp8 -> . exp8 DMINUS
    (68) exp8 -> . NOT exp8
    (69) exp8 -> . exp9
    (70) exp9 -> . NUMBER
    (71) exp9 -> . STRING
    (72) exp9 -> . ID
    (73) exp9 -> . TRUE
    (74) exp9 -> . FALSE
    (75) exp9 -> . LPAREN exp RPAREN
    (76) exp9 -> . exp

    NOT             shift and go to state 56
    NUMBER          shift and go to state 58
    STRING          shift and go to state 59
    ID              shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    LPAREN          shift and go to state 68

    exp                            shift and go to state 105
    exp1                           shift and go to state 48
    exp2                           shift and go to state 49
    exp3                           shift and go to state 50
    exp4                           shift and go to state 51
    exp5                           shift and go to state 52
    exp6                           shift and go to state 53
    exp7                           shift and go to state 54
    exp8                           shift and go to state 55
    exp9                           shift and go to state 57

state 69

    (77) return -> RETURN exp .
    (79) return -> RETURN exp . SEMICOLON
    (76) exp9 -> exp .

  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! reduce/reduce conflict for NEWLINE resolved using rule 76 (exp9 -> exp .)
  ! reduce/reduce conflict for RCHAVES resolved using rule 76 (exp9 -> exp .)
  ! reduce/reduce conflict for ELSE resolved using rule 76 (exp9 -> exp .)
    SEMICOLON       shift and go to state 106
    NEWLINE         reduce using rule 76 (exp9 -> exp .)
    RCHAVES         reduce using rule 76 (exp9 -> exp .)
    DPLUS           reduce using rule 76 (exp9 -> exp .)
    DMINUS          reduce using rule 76 (exp9 -> exp .)
    TIMES           reduce using rule 76 (exp9 -> exp .)
    DIVIDE          reduce using rule 76 (exp9 -> exp .)
    MOD             reduce using rule 76 (exp9 -> exp .)
    PLUS            reduce using rule 76 (exp9 -> exp .)
    MINUS           reduce using rule 76 (exp9 -> exp .)
    LESS            reduce using rule 76 (exp9 -> exp .)
    GREATER         reduce using rule 76 (exp9 -> exp .)
    LESS_EQUAL      reduce using rule 76 (exp9 -> exp .)
    GREATER_EQUAL   reduce using rule 76 (exp9 -> exp .)
    EQUALS          reduce using rule 76 (exp9 -> exp .)
    DIFFERENT       reduce using rule 76 (exp9 -> exp .)
    AND             reduce using rule 76 (exp9 -> exp .)
    OR              reduce using rule 76 (exp9 -> exp .)
    ASSIGN          reduce using rule 76 (exp9 -> exp .)
    COLONEQ         reduce using rule 76 (exp9 -> exp .)
    ELSE            reduce using rule 76 (exp9 -> exp .)

  ! NEWLINE         [ reduce using rule 77 (return -> RETURN exp .) ]
  ! RCHAVES         [ reduce using rule 77 (return -> RETURN exp .) ]
  ! ELSE            [ reduce using rule 77 (return -> RETURN exp .) ]
  ! SEMICOLON       [ reduce using rule 76 (exp9 -> exp .) ]


state 70

    (80) return -> RETURN SEMICOLON .

    NEWLINE         reduce using rule 80 (return -> RETURN SEMICOLON .)
    RCHAVES         reduce using rule 80 (return -> RETURN SEMICOLON .)
    ELSE            reduce using rule 80 (return -> RETURN SEMICOLON .)


state 71

    (82) break -> BREAK SEMICOLON .

    NEWLINE         reduce using rule 82 (break -> BREAK SEMICOLON .)
    RCHAVES         reduce using rule 82 (break -> BREAK SEMICOLON .)
    ELSE            reduce using rule 82 (break -> BREAK SEMICOLON .)


state 72

    (8) signature -> LPAREN sigparams RPAREN funcreturn .

    LCHAVES         reduce using rule 8 (signature -> LPAREN sigparams RPAREN funcreturn .)


state 73

    (14) funcreturn -> LPAREN type . RPAREN

    RPAREN          shift and go to state 107


state 74

    (12) sigparams -> ID type COMMA . sigparams
    (11) sigparams -> . ID type
    (12) sigparams -> . ID type COMMA sigparams

    ID              shift and go to state 19

    sigparams                      shift and go to state 108

state 75

    (18) stms -> statement NEWLINE stms .

    RCHAVES         reduce using rule 18 (stms -> statement NEWLINE stms .)


state 76

    (21) statement1 -> IF LPAREN exp . RPAREN body ELSE body
    (24) statement1 -> IF LPAREN exp . RPAREN body
    (75) exp9 -> LPAREN exp . RPAREN
    (76) exp9 -> exp .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 109
    DPLUS           reduce using rule 76 (exp9 -> exp .)
    DMINUS          reduce using rule 76 (exp9 -> exp .)
    TIMES           reduce using rule 76 (exp9 -> exp .)
    DIVIDE          reduce using rule 76 (exp9 -> exp .)
    MOD             reduce using rule 76 (exp9 -> exp .)
    PLUS            reduce using rule 76 (exp9 -> exp .)
    MINUS           reduce using rule 76 (exp9 -> exp .)
    LESS            reduce using rule 76 (exp9 -> exp .)
    GREATER         reduce using rule 76 (exp9 -> exp .)
    LESS_EQUAL      reduce using rule 76 (exp9 -> exp .)
    GREATER_EQUAL   reduce using rule 76 (exp9 -> exp .)
    EQUALS          reduce using rule 76 (exp9 -> exp .)
    DIFFERENT       reduce using rule 76 (exp9 -> exp .)
    AND             reduce using rule 76 (exp9 -> exp .)
    OR              reduce using rule 76 (exp9 -> exp .)
    ASSIGN          reduce using rule 76 (exp9 -> exp .)
    COLONEQ         reduce using rule 76 (exp9 -> exp .)

  ! RPAREN          [ reduce using rule 76 (exp9 -> exp .) ]


state 77

    (22) statement1 -> IF exp statement1 . ELSE body

    ELSE            shift and go to state 110


state 78

    (23) statement1 -> IF exp body .

    NEWLINE         reduce using rule 23 (statement1 -> IF exp body .)
    RCHAVES         reduce using rule 23 (statement1 -> IF exp body .)
    ELSE            reduce using rule 23 (statement1 -> IF exp body .)


state 79

    (44) exp1 -> exp1 ASSIGN . exp2
    (47) exp2 -> . exp2 OR exp3
    (48) exp2 -> . exp3
    (49) exp3 -> . exp3 AND exp4
    (50) exp3 -> . exp4
    (51) exp4 -> . exp4 EQUALS exp5
    (52) exp4 -> . exp4 DIFFERENT exp5
    (53) exp4 -> . exp5
    (54) exp5 -> . exp5 LESS exp6
    (55) exp5 -> . exp5 GREATER exp6
    (56) exp5 -> . exp5 LESS_EQUAL exp6
    (57) exp5 -> . exp5 GREATER_EQUAL exp6
    (58) exp5 -> . exp6
    (59) exp6 -> . exp6 PLUS exp7
    (60) exp6 -> . exp6 MINUS exp7
    (61) exp6 -> . exp7
    (62) exp7 -> . exp7 TIMES exp8
    (63) exp7 -> . exp7 DIVIDE exp8
    (64) exp7 -> . exp7 MOD exp8
    (65) exp7 -> . exp8
    (66) exp8 -> . exp8 DPLUS
    (67) exp8 -> . exp8 DMINUS
    (68) exp8 -> . NOT exp8
    (69) exp8 -> . exp9
    (70) exp9 -> . NUMBER
    (71) exp9 -> . STRING
    (72) exp9 -> . ID
    (73) exp9 -> . TRUE
    (74) exp9 -> . FALSE
    (75) exp9 -> . LPAREN exp RPAREN
    (76) exp9 -> . exp
    (43) exp -> . exp1
    (44) exp1 -> . exp1 ASSIGN exp2
    (45) exp1 -> . exp1 COLONEQ exp2
    (46) exp1 -> . exp2

    NOT             shift and go to state 56
    NUMBER          shift and go to state 58
    STRING          shift and go to state 59
    ID              shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    LPAREN          shift and go to state 68

    exp1                           shift and go to state 48
    exp2                           shift and go to state 111
    exp3                           shift and go to state 50
    exp4                           shift and go to state 51
    exp5                           shift and go to state 52
    exp6                           shift and go to state 53
    exp7                           shift and go to state 54
    exp8                           shift and go to state 55
    exp9                           shift and go to state 57
    exp                            shift and go to state 97

state 80

    (45) exp1 -> exp1 COLONEQ . exp2
    (47) exp2 -> . exp2 OR exp3
    (48) exp2 -> . exp3
    (49) exp3 -> . exp3 AND exp4
    (50) exp3 -> . exp4
    (51) exp4 -> . exp4 EQUALS exp5
    (52) exp4 -> . exp4 DIFFERENT exp5
    (53) exp4 -> . exp5
    (54) exp5 -> . exp5 LESS exp6
    (55) exp5 -> . exp5 GREATER exp6
    (56) exp5 -> . exp5 LESS_EQUAL exp6
    (57) exp5 -> . exp5 GREATER_EQUAL exp6
    (58) exp5 -> . exp6
    (59) exp6 -> . exp6 PLUS exp7
    (60) exp6 -> . exp6 MINUS exp7
    (61) exp6 -> . exp7
    (62) exp7 -> . exp7 TIMES exp8
    (63) exp7 -> . exp7 DIVIDE exp8
    (64) exp7 -> . exp7 MOD exp8
    (65) exp7 -> . exp8
    (66) exp8 -> . exp8 DPLUS
    (67) exp8 -> . exp8 DMINUS
    (68) exp8 -> . NOT exp8
    (69) exp8 -> . exp9
    (70) exp9 -> . NUMBER
    (71) exp9 -> . STRING
    (72) exp9 -> . ID
    (73) exp9 -> . TRUE
    (74) exp9 -> . FALSE
    (75) exp9 -> . LPAREN exp RPAREN
    (76) exp9 -> . exp
    (43) exp -> . exp1
    (44) exp1 -> . exp1 ASSIGN exp2
    (45) exp1 -> . exp1 COLONEQ exp2
    (46) exp1 -> . exp2

    NOT             shift and go to state 56
    NUMBER          shift and go to state 58
    STRING          shift and go to state 59
    ID              shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    LPAREN          shift and go to state 68

    exp1                           shift and go to state 48
    exp2                           shift and go to state 112
    exp3                           shift and go to state 50
    exp4                           shift and go to state 51
    exp5                           shift and go to state 52
    exp6                           shift and go to state 53
    exp7                           shift and go to state 54
    exp8                           shift and go to state 55
    exp9                           shift and go to state 57
    exp                            shift and go to state 97

state 81

    (47) exp2 -> exp2 OR . exp3
    (49) exp3 -> . exp3 AND exp4
    (50) exp3 -> . exp4
    (51) exp4 -> . exp4 EQUALS exp5
    (52) exp4 -> . exp4 DIFFERENT exp5
    (53) exp4 -> . exp5
    (54) exp5 -> . exp5 LESS exp6
    (55) exp5 -> . exp5 GREATER exp6
    (56) exp5 -> . exp5 LESS_EQUAL exp6
    (57) exp5 -> . exp5 GREATER_EQUAL exp6
    (58) exp5 -> . exp6
    (59) exp6 -> . exp6 PLUS exp7
    (60) exp6 -> . exp6 MINUS exp7
    (61) exp6 -> . exp7
    (62) exp7 -> . exp7 TIMES exp8
    (63) exp7 -> . exp7 DIVIDE exp8
    (64) exp7 -> . exp7 MOD exp8
    (65) exp7 -> . exp8
    (66) exp8 -> . exp8 DPLUS
    (67) exp8 -> . exp8 DMINUS
    (68) exp8 -> . NOT exp8
    (69) exp8 -> . exp9
    (70) exp9 -> . NUMBER
    (71) exp9 -> . STRING
    (72) exp9 -> . ID
    (73) exp9 -> . TRUE
    (74) exp9 -> . FALSE
    (75) exp9 -> . LPAREN exp RPAREN
    (76) exp9 -> . exp
    (43) exp -> . exp1
    (44) exp1 -> . exp1 ASSIGN exp2
    (45) exp1 -> . exp1 COLONEQ exp2
    (46) exp1 -> . exp2
    (47) exp2 -> . exp2 OR exp3
    (48) exp2 -> . exp3

    NOT             shift and go to state 56
    NUMBER          shift and go to state 58
    STRING          shift and go to state 59
    ID              shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    LPAREN          shift and go to state 68

    exp2                           shift and go to state 49
    exp3                           shift and go to state 113
    exp4                           shift and go to state 51
    exp5                           shift and go to state 52
    exp6                           shift and go to state 53
    exp7                           shift and go to state 54
    exp8                           shift and go to state 55
    exp9                           shift and go to state 57
    exp                            shift and go to state 97
    exp1                           shift and go to state 48

state 82

    (49) exp3 -> exp3 AND . exp4
    (51) exp4 -> . exp4 EQUALS exp5
    (52) exp4 -> . exp4 DIFFERENT exp5
    (53) exp4 -> . exp5
    (54) exp5 -> . exp5 LESS exp6
    (55) exp5 -> . exp5 GREATER exp6
    (56) exp5 -> . exp5 LESS_EQUAL exp6
    (57) exp5 -> . exp5 GREATER_EQUAL exp6
    (58) exp5 -> . exp6
    (59) exp6 -> . exp6 PLUS exp7
    (60) exp6 -> . exp6 MINUS exp7
    (61) exp6 -> . exp7
    (62) exp7 -> . exp7 TIMES exp8
    (63) exp7 -> . exp7 DIVIDE exp8
    (64) exp7 -> . exp7 MOD exp8
    (65) exp7 -> . exp8
    (66) exp8 -> . exp8 DPLUS
    (67) exp8 -> . exp8 DMINUS
    (68) exp8 -> . NOT exp8
    (69) exp8 -> . exp9
    (70) exp9 -> . NUMBER
    (71) exp9 -> . STRING
    (72) exp9 -> . ID
    (73) exp9 -> . TRUE
    (74) exp9 -> . FALSE
    (75) exp9 -> . LPAREN exp RPAREN
    (76) exp9 -> . exp
    (43) exp -> . exp1
    (44) exp1 -> . exp1 ASSIGN exp2
    (45) exp1 -> . exp1 COLONEQ exp2
    (46) exp1 -> . exp2
    (47) exp2 -> . exp2 OR exp3
    (48) exp2 -> . exp3
    (49) exp3 -> . exp3 AND exp4
    (50) exp3 -> . exp4

    NOT             shift and go to state 56
    NUMBER          shift and go to state 58
    STRING          shift and go to state 59
    ID              shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    LPAREN          shift and go to state 68

    exp3                           shift and go to state 50
    exp4                           shift and go to state 114
    exp5                           shift and go to state 52
    exp6                           shift and go to state 53
    exp7                           shift and go to state 54
    exp8                           shift and go to state 55
    exp9                           shift and go to state 57
    exp                            shift and go to state 97
    exp1                           shift and go to state 48
    exp2                           shift and go to state 49

state 83

    (51) exp4 -> exp4 EQUALS . exp5
    (54) exp5 -> . exp5 LESS exp6
    (55) exp5 -> . exp5 GREATER exp6
    (56) exp5 -> . exp5 LESS_EQUAL exp6
    (57) exp5 -> . exp5 GREATER_EQUAL exp6
    (58) exp5 -> . exp6
    (59) exp6 -> . exp6 PLUS exp7
    (60) exp6 -> . exp6 MINUS exp7
    (61) exp6 -> . exp7
    (62) exp7 -> . exp7 TIMES exp8
    (63) exp7 -> . exp7 DIVIDE exp8
    (64) exp7 -> . exp7 MOD exp8
    (65) exp7 -> . exp8
    (66) exp8 -> . exp8 DPLUS
    (67) exp8 -> . exp8 DMINUS
    (68) exp8 -> . NOT exp8
    (69) exp8 -> . exp9
    (70) exp9 -> . NUMBER
    (71) exp9 -> . STRING
    (72) exp9 -> . ID
    (73) exp9 -> . TRUE
    (74) exp9 -> . FALSE
    (75) exp9 -> . LPAREN exp RPAREN
    (76) exp9 -> . exp
    (43) exp -> . exp1
    (44) exp1 -> . exp1 ASSIGN exp2
    (45) exp1 -> . exp1 COLONEQ exp2
    (46) exp1 -> . exp2
    (47) exp2 -> . exp2 OR exp3
    (48) exp2 -> . exp3
    (49) exp3 -> . exp3 AND exp4
    (50) exp3 -> . exp4
    (51) exp4 -> . exp4 EQUALS exp5
    (52) exp4 -> . exp4 DIFFERENT exp5
    (53) exp4 -> . exp5

    NOT             shift and go to state 56
    NUMBER          shift and go to state 58
    STRING          shift and go to state 59
    ID              shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    LPAREN          shift and go to state 68

    exp4                           shift and go to state 51
    exp5                           shift and go to state 115
    exp6                           shift and go to state 53
    exp7                           shift and go to state 54
    exp8                           shift and go to state 55
    exp9                           shift and go to state 57
    exp                            shift and go to state 97
    exp1                           shift and go to state 48
    exp2                           shift and go to state 49
    exp3                           shift and go to state 50

state 84

    (52) exp4 -> exp4 DIFFERENT . exp5
    (54) exp5 -> . exp5 LESS exp6
    (55) exp5 -> . exp5 GREATER exp6
    (56) exp5 -> . exp5 LESS_EQUAL exp6
    (57) exp5 -> . exp5 GREATER_EQUAL exp6
    (58) exp5 -> . exp6
    (59) exp6 -> . exp6 PLUS exp7
    (60) exp6 -> . exp6 MINUS exp7
    (61) exp6 -> . exp7
    (62) exp7 -> . exp7 TIMES exp8
    (63) exp7 -> . exp7 DIVIDE exp8
    (64) exp7 -> . exp7 MOD exp8
    (65) exp7 -> . exp8
    (66) exp8 -> . exp8 DPLUS
    (67) exp8 -> . exp8 DMINUS
    (68) exp8 -> . NOT exp8
    (69) exp8 -> . exp9
    (70) exp9 -> . NUMBER
    (71) exp9 -> . STRING
    (72) exp9 -> . ID
    (73) exp9 -> . TRUE
    (74) exp9 -> . FALSE
    (75) exp9 -> . LPAREN exp RPAREN
    (76) exp9 -> . exp
    (43) exp -> . exp1
    (44) exp1 -> . exp1 ASSIGN exp2
    (45) exp1 -> . exp1 COLONEQ exp2
    (46) exp1 -> . exp2
    (47) exp2 -> . exp2 OR exp3
    (48) exp2 -> . exp3
    (49) exp3 -> . exp3 AND exp4
    (50) exp3 -> . exp4
    (51) exp4 -> . exp4 EQUALS exp5
    (52) exp4 -> . exp4 DIFFERENT exp5
    (53) exp4 -> . exp5

    NOT             shift and go to state 56
    NUMBER          shift and go to state 58
    STRING          shift and go to state 59
    ID              shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    LPAREN          shift and go to state 68

    exp4                           shift and go to state 51
    exp5                           shift and go to state 116
    exp6                           shift and go to state 53
    exp7                           shift and go to state 54
    exp8                           shift and go to state 55
    exp9                           shift and go to state 57
    exp                            shift and go to state 97
    exp1                           shift and go to state 48
    exp2                           shift and go to state 49
    exp3                           shift and go to state 50

state 85

    (54) exp5 -> exp5 LESS . exp6
    (59) exp6 -> . exp6 PLUS exp7
    (60) exp6 -> . exp6 MINUS exp7
    (61) exp6 -> . exp7
    (62) exp7 -> . exp7 TIMES exp8
    (63) exp7 -> . exp7 DIVIDE exp8
    (64) exp7 -> . exp7 MOD exp8
    (65) exp7 -> . exp8
    (66) exp8 -> . exp8 DPLUS
    (67) exp8 -> . exp8 DMINUS
    (68) exp8 -> . NOT exp8
    (69) exp8 -> . exp9
    (70) exp9 -> . NUMBER
    (71) exp9 -> . STRING
    (72) exp9 -> . ID
    (73) exp9 -> . TRUE
    (74) exp9 -> . FALSE
    (75) exp9 -> . LPAREN exp RPAREN
    (76) exp9 -> . exp
    (43) exp -> . exp1
    (44) exp1 -> . exp1 ASSIGN exp2
    (45) exp1 -> . exp1 COLONEQ exp2
    (46) exp1 -> . exp2
    (47) exp2 -> . exp2 OR exp3
    (48) exp2 -> . exp3
    (49) exp3 -> . exp3 AND exp4
    (50) exp3 -> . exp4
    (51) exp4 -> . exp4 EQUALS exp5
    (52) exp4 -> . exp4 DIFFERENT exp5
    (53) exp4 -> . exp5
    (54) exp5 -> . exp5 LESS exp6
    (55) exp5 -> . exp5 GREATER exp6
    (56) exp5 -> . exp5 LESS_EQUAL exp6
    (57) exp5 -> . exp5 GREATER_EQUAL exp6
    (58) exp5 -> . exp6

    NOT             shift and go to state 56
    NUMBER          shift and go to state 58
    STRING          shift and go to state 59
    ID              shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    LPAREN          shift and go to state 68

    exp5                           shift and go to state 52
    exp6                           shift and go to state 117
    exp7                           shift and go to state 54
    exp8                           shift and go to state 55
    exp9                           shift and go to state 57
    exp                            shift and go to state 97
    exp1                           shift and go to state 48
    exp2                           shift and go to state 49
    exp3                           shift and go to state 50
    exp4                           shift and go to state 51

state 86

    (55) exp5 -> exp5 GREATER . exp6
    (59) exp6 -> . exp6 PLUS exp7
    (60) exp6 -> . exp6 MINUS exp7
    (61) exp6 -> . exp7
    (62) exp7 -> . exp7 TIMES exp8
    (63) exp7 -> . exp7 DIVIDE exp8
    (64) exp7 -> . exp7 MOD exp8
    (65) exp7 -> . exp8
    (66) exp8 -> . exp8 DPLUS
    (67) exp8 -> . exp8 DMINUS
    (68) exp8 -> . NOT exp8
    (69) exp8 -> . exp9
    (70) exp9 -> . NUMBER
    (71) exp9 -> . STRING
    (72) exp9 -> . ID
    (73) exp9 -> . TRUE
    (74) exp9 -> . FALSE
    (75) exp9 -> . LPAREN exp RPAREN
    (76) exp9 -> . exp
    (43) exp -> . exp1
    (44) exp1 -> . exp1 ASSIGN exp2
    (45) exp1 -> . exp1 COLONEQ exp2
    (46) exp1 -> . exp2
    (47) exp2 -> . exp2 OR exp3
    (48) exp2 -> . exp3
    (49) exp3 -> . exp3 AND exp4
    (50) exp3 -> . exp4
    (51) exp4 -> . exp4 EQUALS exp5
    (52) exp4 -> . exp4 DIFFERENT exp5
    (53) exp4 -> . exp5
    (54) exp5 -> . exp5 LESS exp6
    (55) exp5 -> . exp5 GREATER exp6
    (56) exp5 -> . exp5 LESS_EQUAL exp6
    (57) exp5 -> . exp5 GREATER_EQUAL exp6
    (58) exp5 -> . exp6

    NOT             shift and go to state 56
    NUMBER          shift and go to state 58
    STRING          shift and go to state 59
    ID              shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    LPAREN          shift and go to state 68

    exp5                           shift and go to state 52
    exp6                           shift and go to state 118
    exp7                           shift and go to state 54
    exp8                           shift and go to state 55
    exp9                           shift and go to state 57
    exp                            shift and go to state 97
    exp1                           shift and go to state 48
    exp2                           shift and go to state 49
    exp3                           shift and go to state 50
    exp4                           shift and go to state 51

state 87

    (56) exp5 -> exp5 LESS_EQUAL . exp6
    (59) exp6 -> . exp6 PLUS exp7
    (60) exp6 -> . exp6 MINUS exp7
    (61) exp6 -> . exp7
    (62) exp7 -> . exp7 TIMES exp8
    (63) exp7 -> . exp7 DIVIDE exp8
    (64) exp7 -> . exp7 MOD exp8
    (65) exp7 -> . exp8
    (66) exp8 -> . exp8 DPLUS
    (67) exp8 -> . exp8 DMINUS
    (68) exp8 -> . NOT exp8
    (69) exp8 -> . exp9
    (70) exp9 -> . NUMBER
    (71) exp9 -> . STRING
    (72) exp9 -> . ID
    (73) exp9 -> . TRUE
    (74) exp9 -> . FALSE
    (75) exp9 -> . LPAREN exp RPAREN
    (76) exp9 -> . exp
    (43) exp -> . exp1
    (44) exp1 -> . exp1 ASSIGN exp2
    (45) exp1 -> . exp1 COLONEQ exp2
    (46) exp1 -> . exp2
    (47) exp2 -> . exp2 OR exp3
    (48) exp2 -> . exp3
    (49) exp3 -> . exp3 AND exp4
    (50) exp3 -> . exp4
    (51) exp4 -> . exp4 EQUALS exp5
    (52) exp4 -> . exp4 DIFFERENT exp5
    (53) exp4 -> . exp5
    (54) exp5 -> . exp5 LESS exp6
    (55) exp5 -> . exp5 GREATER exp6
    (56) exp5 -> . exp5 LESS_EQUAL exp6
    (57) exp5 -> . exp5 GREATER_EQUAL exp6
    (58) exp5 -> . exp6

    NOT             shift and go to state 56
    NUMBER          shift and go to state 58
    STRING          shift and go to state 59
    ID              shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    LPAREN          shift and go to state 68

    exp5                           shift and go to state 52
    exp6                           shift and go to state 119
    exp7                           shift and go to state 54
    exp8                           shift and go to state 55
    exp9                           shift and go to state 57
    exp                            shift and go to state 97
    exp1                           shift and go to state 48
    exp2                           shift and go to state 49
    exp3                           shift and go to state 50
    exp4                           shift and go to state 51

state 88

    (57) exp5 -> exp5 GREATER_EQUAL . exp6
    (59) exp6 -> . exp6 PLUS exp7
    (60) exp6 -> . exp6 MINUS exp7
    (61) exp6 -> . exp7
    (62) exp7 -> . exp7 TIMES exp8
    (63) exp7 -> . exp7 DIVIDE exp8
    (64) exp7 -> . exp7 MOD exp8
    (65) exp7 -> . exp8
    (66) exp8 -> . exp8 DPLUS
    (67) exp8 -> . exp8 DMINUS
    (68) exp8 -> . NOT exp8
    (69) exp8 -> . exp9
    (70) exp9 -> . NUMBER
    (71) exp9 -> . STRING
    (72) exp9 -> . ID
    (73) exp9 -> . TRUE
    (74) exp9 -> . FALSE
    (75) exp9 -> . LPAREN exp RPAREN
    (76) exp9 -> . exp
    (43) exp -> . exp1
    (44) exp1 -> . exp1 ASSIGN exp2
    (45) exp1 -> . exp1 COLONEQ exp2
    (46) exp1 -> . exp2
    (47) exp2 -> . exp2 OR exp3
    (48) exp2 -> . exp3
    (49) exp3 -> . exp3 AND exp4
    (50) exp3 -> . exp4
    (51) exp4 -> . exp4 EQUALS exp5
    (52) exp4 -> . exp4 DIFFERENT exp5
    (53) exp4 -> . exp5
    (54) exp5 -> . exp5 LESS exp6
    (55) exp5 -> . exp5 GREATER exp6
    (56) exp5 -> . exp5 LESS_EQUAL exp6
    (57) exp5 -> . exp5 GREATER_EQUAL exp6
    (58) exp5 -> . exp6

    NOT             shift and go to state 56
    NUMBER          shift and go to state 58
    STRING          shift and go to state 59
    ID              shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    LPAREN          shift and go to state 68

    exp5                           shift and go to state 52
    exp6                           shift and go to state 120
    exp7                           shift and go to state 54
    exp8                           shift and go to state 55
    exp9                           shift and go to state 57
    exp                            shift and go to state 97
    exp1                           shift and go to state 48
    exp2                           shift and go to state 49
    exp3                           shift and go to state 50
    exp4                           shift and go to state 51

state 89

    (59) exp6 -> exp6 PLUS . exp7
    (62) exp7 -> . exp7 TIMES exp8
    (63) exp7 -> . exp7 DIVIDE exp8
    (64) exp7 -> . exp7 MOD exp8
    (65) exp7 -> . exp8
    (66) exp8 -> . exp8 DPLUS
    (67) exp8 -> . exp8 DMINUS
    (68) exp8 -> . NOT exp8
    (69) exp8 -> . exp9
    (70) exp9 -> . NUMBER
    (71) exp9 -> . STRING
    (72) exp9 -> . ID
    (73) exp9 -> . TRUE
    (74) exp9 -> . FALSE
    (75) exp9 -> . LPAREN exp RPAREN
    (76) exp9 -> . exp
    (43) exp -> . exp1
    (44) exp1 -> . exp1 ASSIGN exp2
    (45) exp1 -> . exp1 COLONEQ exp2
    (46) exp1 -> . exp2
    (47) exp2 -> . exp2 OR exp3
    (48) exp2 -> . exp3
    (49) exp3 -> . exp3 AND exp4
    (50) exp3 -> . exp4
    (51) exp4 -> . exp4 EQUALS exp5
    (52) exp4 -> . exp4 DIFFERENT exp5
    (53) exp4 -> . exp5
    (54) exp5 -> . exp5 LESS exp6
    (55) exp5 -> . exp5 GREATER exp6
    (56) exp5 -> . exp5 LESS_EQUAL exp6
    (57) exp5 -> . exp5 GREATER_EQUAL exp6
    (58) exp5 -> . exp6
    (59) exp6 -> . exp6 PLUS exp7
    (60) exp6 -> . exp6 MINUS exp7
    (61) exp6 -> . exp7

    NOT             shift and go to state 56
    NUMBER          shift and go to state 58
    STRING          shift and go to state 59
    ID              shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    LPAREN          shift and go to state 68

    exp6                           shift and go to state 53
    exp7                           shift and go to state 121
    exp8                           shift and go to state 55
    exp9                           shift and go to state 57
    exp                            shift and go to state 97
    exp1                           shift and go to state 48
    exp2                           shift and go to state 49
    exp3                           shift and go to state 50
    exp4                           shift and go to state 51
    exp5                           shift and go to state 52

state 90

    (60) exp6 -> exp6 MINUS . exp7
    (62) exp7 -> . exp7 TIMES exp8
    (63) exp7 -> . exp7 DIVIDE exp8
    (64) exp7 -> . exp7 MOD exp8
    (65) exp7 -> . exp8
    (66) exp8 -> . exp8 DPLUS
    (67) exp8 -> . exp8 DMINUS
    (68) exp8 -> . NOT exp8
    (69) exp8 -> . exp9
    (70) exp9 -> . NUMBER
    (71) exp9 -> . STRING
    (72) exp9 -> . ID
    (73) exp9 -> . TRUE
    (74) exp9 -> . FALSE
    (75) exp9 -> . LPAREN exp RPAREN
    (76) exp9 -> . exp
    (43) exp -> . exp1
    (44) exp1 -> . exp1 ASSIGN exp2
    (45) exp1 -> . exp1 COLONEQ exp2
    (46) exp1 -> . exp2
    (47) exp2 -> . exp2 OR exp3
    (48) exp2 -> . exp3
    (49) exp3 -> . exp3 AND exp4
    (50) exp3 -> . exp4
    (51) exp4 -> . exp4 EQUALS exp5
    (52) exp4 -> . exp4 DIFFERENT exp5
    (53) exp4 -> . exp5
    (54) exp5 -> . exp5 LESS exp6
    (55) exp5 -> . exp5 GREATER exp6
    (56) exp5 -> . exp5 LESS_EQUAL exp6
    (57) exp5 -> . exp5 GREATER_EQUAL exp6
    (58) exp5 -> . exp6
    (59) exp6 -> . exp6 PLUS exp7
    (60) exp6 -> . exp6 MINUS exp7
    (61) exp6 -> . exp7

    NOT             shift and go to state 56
    NUMBER          shift and go to state 58
    STRING          shift and go to state 59
    ID              shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    LPAREN          shift and go to state 68

    exp6                           shift and go to state 53
    exp7                           shift and go to state 122
    exp8                           shift and go to state 55
    exp9                           shift and go to state 57
    exp                            shift and go to state 97
    exp1                           shift and go to state 48
    exp2                           shift and go to state 49
    exp3                           shift and go to state 50
    exp4                           shift and go to state 51
    exp5                           shift and go to state 52

state 91

    (62) exp7 -> exp7 TIMES . exp8
    (66) exp8 -> . exp8 DPLUS
    (67) exp8 -> . exp8 DMINUS
    (68) exp8 -> . NOT exp8
    (69) exp8 -> . exp9
    (70) exp9 -> . NUMBER
    (71) exp9 -> . STRING
    (72) exp9 -> . ID
    (73) exp9 -> . TRUE
    (74) exp9 -> . FALSE
    (75) exp9 -> . LPAREN exp RPAREN
    (76) exp9 -> . exp
    (43) exp -> . exp1
    (44) exp1 -> . exp1 ASSIGN exp2
    (45) exp1 -> . exp1 COLONEQ exp2
    (46) exp1 -> . exp2
    (47) exp2 -> . exp2 OR exp3
    (48) exp2 -> . exp3
    (49) exp3 -> . exp3 AND exp4
    (50) exp3 -> . exp4
    (51) exp4 -> . exp4 EQUALS exp5
    (52) exp4 -> . exp4 DIFFERENT exp5
    (53) exp4 -> . exp5
    (54) exp5 -> . exp5 LESS exp6
    (55) exp5 -> . exp5 GREATER exp6
    (56) exp5 -> . exp5 LESS_EQUAL exp6
    (57) exp5 -> . exp5 GREATER_EQUAL exp6
    (58) exp5 -> . exp6
    (59) exp6 -> . exp6 PLUS exp7
    (60) exp6 -> . exp6 MINUS exp7
    (61) exp6 -> . exp7
    (62) exp7 -> . exp7 TIMES exp8
    (63) exp7 -> . exp7 DIVIDE exp8
    (64) exp7 -> . exp7 MOD exp8
    (65) exp7 -> . exp8

    NOT             shift and go to state 56
    NUMBER          shift and go to state 58
    STRING          shift and go to state 59
    ID              shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    LPAREN          shift and go to state 68

    exp7                           shift and go to state 54
    exp8                           shift and go to state 123
    exp9                           shift and go to state 57
    exp                            shift and go to state 97
    exp1                           shift and go to state 48
    exp2                           shift and go to state 49
    exp3                           shift and go to state 50
    exp4                           shift and go to state 51
    exp5                           shift and go to state 52
    exp6                           shift and go to state 53

state 92

    (63) exp7 -> exp7 DIVIDE . exp8
    (66) exp8 -> . exp8 DPLUS
    (67) exp8 -> . exp8 DMINUS
    (68) exp8 -> . NOT exp8
    (69) exp8 -> . exp9
    (70) exp9 -> . NUMBER
    (71) exp9 -> . STRING
    (72) exp9 -> . ID
    (73) exp9 -> . TRUE
    (74) exp9 -> . FALSE
    (75) exp9 -> . LPAREN exp RPAREN
    (76) exp9 -> . exp
    (43) exp -> . exp1
    (44) exp1 -> . exp1 ASSIGN exp2
    (45) exp1 -> . exp1 COLONEQ exp2
    (46) exp1 -> . exp2
    (47) exp2 -> . exp2 OR exp3
    (48) exp2 -> . exp3
    (49) exp3 -> . exp3 AND exp4
    (50) exp3 -> . exp4
    (51) exp4 -> . exp4 EQUALS exp5
    (52) exp4 -> . exp4 DIFFERENT exp5
    (53) exp4 -> . exp5
    (54) exp5 -> . exp5 LESS exp6
    (55) exp5 -> . exp5 GREATER exp6
    (56) exp5 -> . exp5 LESS_EQUAL exp6
    (57) exp5 -> . exp5 GREATER_EQUAL exp6
    (58) exp5 -> . exp6
    (59) exp6 -> . exp6 PLUS exp7
    (60) exp6 -> . exp6 MINUS exp7
    (61) exp6 -> . exp7
    (62) exp7 -> . exp7 TIMES exp8
    (63) exp7 -> . exp7 DIVIDE exp8
    (64) exp7 -> . exp7 MOD exp8
    (65) exp7 -> . exp8

    NOT             shift and go to state 56
    NUMBER          shift and go to state 58
    STRING          shift and go to state 59
    ID              shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    LPAREN          shift and go to state 68

    exp7                           shift and go to state 54
    exp8                           shift and go to state 124
    exp9                           shift and go to state 57
    exp                            shift and go to state 97
    exp1                           shift and go to state 48
    exp2                           shift and go to state 49
    exp3                           shift and go to state 50
    exp4                           shift and go to state 51
    exp5                           shift and go to state 52
    exp6                           shift and go to state 53

state 93

    (64) exp7 -> exp7 MOD . exp8
    (66) exp8 -> . exp8 DPLUS
    (67) exp8 -> . exp8 DMINUS
    (68) exp8 -> . NOT exp8
    (69) exp8 -> . exp9
    (70) exp9 -> . NUMBER
    (71) exp9 -> . STRING
    (72) exp9 -> . ID
    (73) exp9 -> . TRUE
    (74) exp9 -> . FALSE
    (75) exp9 -> . LPAREN exp RPAREN
    (76) exp9 -> . exp
    (43) exp -> . exp1
    (44) exp1 -> . exp1 ASSIGN exp2
    (45) exp1 -> . exp1 COLONEQ exp2
    (46) exp1 -> . exp2
    (47) exp2 -> . exp2 OR exp3
    (48) exp2 -> . exp3
    (49) exp3 -> . exp3 AND exp4
    (50) exp3 -> . exp4
    (51) exp4 -> . exp4 EQUALS exp5
    (52) exp4 -> . exp4 DIFFERENT exp5
    (53) exp4 -> . exp5
    (54) exp5 -> . exp5 LESS exp6
    (55) exp5 -> . exp5 GREATER exp6
    (56) exp5 -> . exp5 LESS_EQUAL exp6
    (57) exp5 -> . exp5 GREATER_EQUAL exp6
    (58) exp5 -> . exp6
    (59) exp6 -> . exp6 PLUS exp7
    (60) exp6 -> . exp6 MINUS exp7
    (61) exp6 -> . exp7
    (62) exp7 -> . exp7 TIMES exp8
    (63) exp7 -> . exp7 DIVIDE exp8
    (64) exp7 -> . exp7 MOD exp8
    (65) exp7 -> . exp8

    NOT             shift and go to state 56
    NUMBER          shift and go to state 58
    STRING          shift and go to state 59
    ID              shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    LPAREN          shift and go to state 68

    exp7                           shift and go to state 54
    exp8                           shift and go to state 125
    exp9                           shift and go to state 57
    exp                            shift and go to state 97
    exp1                           shift and go to state 48
    exp2                           shift and go to state 49
    exp3                           shift and go to state 50
    exp4                           shift and go to state 51
    exp5                           shift and go to state 52
    exp6                           shift and go to state 53

state 94

    (66) exp8 -> exp8 DPLUS .

    IF              reduce using rule 66 (exp8 -> exp8 DPLUS .)
    LCHAVES         reduce using rule 66 (exp8 -> exp8 DPLUS .)
    VAR             reduce using rule 66 (exp8 -> exp8 DPLUS .)
    FOR             reduce using rule 66 (exp8 -> exp8 DPLUS .)
    ID              reduce using rule 66 (exp8 -> exp8 DPLUS .)
    RETURN          reduce using rule 66 (exp8 -> exp8 DPLUS .)
    BREAK           reduce using rule 66 (exp8 -> exp8 DPLUS .)
    DPLUS           reduce using rule 66 (exp8 -> exp8 DPLUS .)
    DMINUS          reduce using rule 66 (exp8 -> exp8 DPLUS .)
    TIMES           reduce using rule 66 (exp8 -> exp8 DPLUS .)
    DIVIDE          reduce using rule 66 (exp8 -> exp8 DPLUS .)
    MOD             reduce using rule 66 (exp8 -> exp8 DPLUS .)
    PLUS            reduce using rule 66 (exp8 -> exp8 DPLUS .)
    MINUS           reduce using rule 66 (exp8 -> exp8 DPLUS .)
    LESS            reduce using rule 66 (exp8 -> exp8 DPLUS .)
    GREATER         reduce using rule 66 (exp8 -> exp8 DPLUS .)
    LESS_EQUAL      reduce using rule 66 (exp8 -> exp8 DPLUS .)
    GREATER_EQUAL   reduce using rule 66 (exp8 -> exp8 DPLUS .)
    EQUALS          reduce using rule 66 (exp8 -> exp8 DPLUS .)
    DIFFERENT       reduce using rule 66 (exp8 -> exp8 DPLUS .)
    AND             reduce using rule 66 (exp8 -> exp8 DPLUS .)
    OR              reduce using rule 66 (exp8 -> exp8 DPLUS .)
    ASSIGN          reduce using rule 66 (exp8 -> exp8 DPLUS .)
    COLONEQ         reduce using rule 66 (exp8 -> exp8 DPLUS .)
    SEMICOLON       reduce using rule 66 (exp8 -> exp8 DPLUS .)
    NEWLINE         reduce using rule 66 (exp8 -> exp8 DPLUS .)
    RCHAVES         reduce using rule 66 (exp8 -> exp8 DPLUS .)
    ELSE            reduce using rule 66 (exp8 -> exp8 DPLUS .)
    RPAREN          reduce using rule 66 (exp8 -> exp8 DPLUS .)
    COMMA           reduce using rule 66 (exp8 -> exp8 DPLUS .)


state 95

    (67) exp8 -> exp8 DMINUS .

    IF              reduce using rule 67 (exp8 -> exp8 DMINUS .)
    LCHAVES         reduce using rule 67 (exp8 -> exp8 DMINUS .)
    VAR             reduce using rule 67 (exp8 -> exp8 DMINUS .)
    FOR             reduce using rule 67 (exp8 -> exp8 DMINUS .)
    ID              reduce using rule 67 (exp8 -> exp8 DMINUS .)
    RETURN          reduce using rule 67 (exp8 -> exp8 DMINUS .)
    BREAK           reduce using rule 67 (exp8 -> exp8 DMINUS .)
    DPLUS           reduce using rule 67 (exp8 -> exp8 DMINUS .)
    DMINUS          reduce using rule 67 (exp8 -> exp8 DMINUS .)
    TIMES           reduce using rule 67 (exp8 -> exp8 DMINUS .)
    DIVIDE          reduce using rule 67 (exp8 -> exp8 DMINUS .)
    MOD             reduce using rule 67 (exp8 -> exp8 DMINUS .)
    PLUS            reduce using rule 67 (exp8 -> exp8 DMINUS .)
    MINUS           reduce using rule 67 (exp8 -> exp8 DMINUS .)
    LESS            reduce using rule 67 (exp8 -> exp8 DMINUS .)
    GREATER         reduce using rule 67 (exp8 -> exp8 DMINUS .)
    LESS_EQUAL      reduce using rule 67 (exp8 -> exp8 DMINUS .)
    GREATER_EQUAL   reduce using rule 67 (exp8 -> exp8 DMINUS .)
    EQUALS          reduce using rule 67 (exp8 -> exp8 DMINUS .)
    DIFFERENT       reduce using rule 67 (exp8 -> exp8 DMINUS .)
    AND             reduce using rule 67 (exp8 -> exp8 DMINUS .)
    OR              reduce using rule 67 (exp8 -> exp8 DMINUS .)
    ASSIGN          reduce using rule 67 (exp8 -> exp8 DMINUS .)
    COLONEQ         reduce using rule 67 (exp8 -> exp8 DMINUS .)
    SEMICOLON       reduce using rule 67 (exp8 -> exp8 DMINUS .)
    NEWLINE         reduce using rule 67 (exp8 -> exp8 DMINUS .)
    RCHAVES         reduce using rule 67 (exp8 -> exp8 DMINUS .)
    ELSE            reduce using rule 67 (exp8 -> exp8 DMINUS .)
    RPAREN          reduce using rule 67 (exp8 -> exp8 DMINUS .)
    COMMA           reduce using rule 67 (exp8 -> exp8 DMINUS .)


state 96

    (68) exp8 -> NOT exp8 .
    (66) exp8 -> exp8 . DPLUS
    (67) exp8 -> exp8 . DMINUS
    (65) exp7 -> exp8 .

  ! shift/reduce conflict for DPLUS resolved as shift
  ! shift/reduce conflict for DMINUS resolved as shift
  ! shift/reduce conflict for DPLUS resolved as shift
  ! shift/reduce conflict for DMINUS resolved as shift
  ! reduce/reduce conflict for IF resolved using rule 65 (exp7 -> exp8 .)
  ! reduce/reduce conflict for LCHAVES resolved using rule 65 (exp7 -> exp8 .)
  ! reduce/reduce conflict for VAR resolved using rule 65 (exp7 -> exp8 .)
  ! reduce/reduce conflict for FOR resolved using rule 65 (exp7 -> exp8 .)
  ! reduce/reduce conflict for ID resolved using rule 65 (exp7 -> exp8 .)
  ! reduce/reduce conflict for RETURN resolved using rule 65 (exp7 -> exp8 .)
  ! reduce/reduce conflict for BREAK resolved using rule 65 (exp7 -> exp8 .)
  ! reduce/reduce conflict for TIMES resolved using rule 65 (exp7 -> exp8 .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 65 (exp7 -> exp8 .)
  ! reduce/reduce conflict for MOD resolved using rule 65 (exp7 -> exp8 .)
  ! reduce/reduce conflict for PLUS resolved using rule 65 (exp7 -> exp8 .)
  ! reduce/reduce conflict for MINUS resolved using rule 65 (exp7 -> exp8 .)
  ! reduce/reduce conflict for LESS resolved using rule 65 (exp7 -> exp8 .)
  ! reduce/reduce conflict for GREATER resolved using rule 65 (exp7 -> exp8 .)
  ! reduce/reduce conflict for LESS_EQUAL resolved using rule 65 (exp7 -> exp8 .)
  ! reduce/reduce conflict for GREATER_EQUAL resolved using rule 65 (exp7 -> exp8 .)
  ! reduce/reduce conflict for EQUALS resolved using rule 65 (exp7 -> exp8 .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 65 (exp7 -> exp8 .)
  ! reduce/reduce conflict for AND resolved using rule 65 (exp7 -> exp8 .)
  ! reduce/reduce conflict for OR resolved using rule 65 (exp7 -> exp8 .)
  ! reduce/reduce conflict for ASSIGN resolved using rule 65 (exp7 -> exp8 .)
  ! reduce/reduce conflict for COLONEQ resolved using rule 65 (exp7 -> exp8 .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 65 (exp7 -> exp8 .)
  ! reduce/reduce conflict for NEWLINE resolved using rule 65 (exp7 -> exp8 .)
  ! reduce/reduce conflict for RCHAVES resolved using rule 65 (exp7 -> exp8 .)
  ! reduce/reduce conflict for ELSE resolved using rule 65 (exp7 -> exp8 .)
  ! reduce/reduce conflict for RPAREN resolved using rule 65 (exp7 -> exp8 .)
  ! reduce/reduce conflict for COMMA resolved using rule 65 (exp7 -> exp8 .)
    DPLUS           shift and go to state 94
    DMINUS          shift and go to state 95
    IF              reduce using rule 65 (exp7 -> exp8 .)
    LCHAVES         reduce using rule 65 (exp7 -> exp8 .)
    VAR             reduce using rule 65 (exp7 -> exp8 .)
    FOR             reduce using rule 65 (exp7 -> exp8 .)
    ID              reduce using rule 65 (exp7 -> exp8 .)
    RETURN          reduce using rule 65 (exp7 -> exp8 .)
    BREAK           reduce using rule 65 (exp7 -> exp8 .)
    TIMES           reduce using rule 65 (exp7 -> exp8 .)
    DIVIDE          reduce using rule 65 (exp7 -> exp8 .)
    MOD             reduce using rule 65 (exp7 -> exp8 .)
    PLUS            reduce using rule 65 (exp7 -> exp8 .)
    MINUS           reduce using rule 65 (exp7 -> exp8 .)
    LESS            reduce using rule 65 (exp7 -> exp8 .)
    GREATER         reduce using rule 65 (exp7 -> exp8 .)
    LESS_EQUAL      reduce using rule 65 (exp7 -> exp8 .)
    GREATER_EQUAL   reduce using rule 65 (exp7 -> exp8 .)
    EQUALS          reduce using rule 65 (exp7 -> exp8 .)
    DIFFERENT       reduce using rule 65 (exp7 -> exp8 .)
    AND             reduce using rule 65 (exp7 -> exp8 .)
    OR              reduce using rule 65 (exp7 -> exp8 .)
    ASSIGN          reduce using rule 65 (exp7 -> exp8 .)
    COLONEQ         reduce using rule 65 (exp7 -> exp8 .)
    SEMICOLON       reduce using rule 65 (exp7 -> exp8 .)
    NEWLINE         reduce using rule 65 (exp7 -> exp8 .)
    RCHAVES         reduce using rule 65 (exp7 -> exp8 .)
    ELSE            reduce using rule 65 (exp7 -> exp8 .)
    RPAREN          reduce using rule 65 (exp7 -> exp8 .)
    COMMA           reduce using rule 65 (exp7 -> exp8 .)

  ! IF              [ reduce using rule 68 (exp8 -> NOT exp8 .) ]
  ! LCHAVES         [ reduce using rule 68 (exp8 -> NOT exp8 .) ]
  ! VAR             [ reduce using rule 68 (exp8 -> NOT exp8 .) ]
  ! FOR             [ reduce using rule 68 (exp8 -> NOT exp8 .) ]
  ! ID              [ reduce using rule 68 (exp8 -> NOT exp8 .) ]
  ! RETURN          [ reduce using rule 68 (exp8 -> NOT exp8 .) ]
  ! BREAK           [ reduce using rule 68 (exp8 -> NOT exp8 .) ]
  ! DPLUS           [ reduce using rule 68 (exp8 -> NOT exp8 .) ]
  ! DMINUS          [ reduce using rule 68 (exp8 -> NOT exp8 .) ]
  ! TIMES           [ reduce using rule 68 (exp8 -> NOT exp8 .) ]
  ! DIVIDE          [ reduce using rule 68 (exp8 -> NOT exp8 .) ]
  ! MOD             [ reduce using rule 68 (exp8 -> NOT exp8 .) ]
  ! PLUS            [ reduce using rule 68 (exp8 -> NOT exp8 .) ]
  ! MINUS           [ reduce using rule 68 (exp8 -> NOT exp8 .) ]
  ! LESS            [ reduce using rule 68 (exp8 -> NOT exp8 .) ]
  ! GREATER         [ reduce using rule 68 (exp8 -> NOT exp8 .) ]
  ! LESS_EQUAL      [ reduce using rule 68 (exp8 -> NOT exp8 .) ]
  ! GREATER_EQUAL   [ reduce using rule 68 (exp8 -> NOT exp8 .) ]
  ! EQUALS          [ reduce using rule 68 (exp8 -> NOT exp8 .) ]
  ! DIFFERENT       [ reduce using rule 68 (exp8 -> NOT exp8 .) ]
  ! AND             [ reduce using rule 68 (exp8 -> NOT exp8 .) ]
  ! OR              [ reduce using rule 68 (exp8 -> NOT exp8 .) ]
  ! ASSIGN          [ reduce using rule 68 (exp8 -> NOT exp8 .) ]
  ! COLONEQ         [ reduce using rule 68 (exp8 -> NOT exp8 .) ]
  ! SEMICOLON       [ reduce using rule 68 (exp8 -> NOT exp8 .) ]
  ! NEWLINE         [ reduce using rule 68 (exp8 -> NOT exp8 .) ]
  ! RCHAVES         [ reduce using rule 68 (exp8 -> NOT exp8 .) ]
  ! ELSE            [ reduce using rule 68 (exp8 -> NOT exp8 .) ]
  ! RPAREN          [ reduce using rule 68 (exp8 -> NOT exp8 .) ]
  ! COMMA           [ reduce using rule 68 (exp8 -> NOT exp8 .) ]
  ! DPLUS           [ reduce using rule 65 (exp7 -> exp8 .) ]
  ! DMINUS          [ reduce using rule 65 (exp7 -> exp8 .) ]


state 97

    (76) exp9 -> exp .

    DPLUS           reduce using rule 76 (exp9 -> exp .)
    DMINUS          reduce using rule 76 (exp9 -> exp .)
    IF              reduce using rule 76 (exp9 -> exp .)
    LCHAVES         reduce using rule 76 (exp9 -> exp .)
    VAR             reduce using rule 76 (exp9 -> exp .)
    FOR             reduce using rule 76 (exp9 -> exp .)
    ID              reduce using rule 76 (exp9 -> exp .)
    RETURN          reduce using rule 76 (exp9 -> exp .)
    BREAK           reduce using rule 76 (exp9 -> exp .)
    TIMES           reduce using rule 76 (exp9 -> exp .)
    DIVIDE          reduce using rule 76 (exp9 -> exp .)
    MOD             reduce using rule 76 (exp9 -> exp .)
    PLUS            reduce using rule 76 (exp9 -> exp .)
    MINUS           reduce using rule 76 (exp9 -> exp .)
    LESS            reduce using rule 76 (exp9 -> exp .)
    GREATER         reduce using rule 76 (exp9 -> exp .)
    LESS_EQUAL      reduce using rule 76 (exp9 -> exp .)
    GREATER_EQUAL   reduce using rule 76 (exp9 -> exp .)
    EQUALS          reduce using rule 76 (exp9 -> exp .)
    DIFFERENT       reduce using rule 76 (exp9 -> exp .)
    AND             reduce using rule 76 (exp9 -> exp .)
    OR              reduce using rule 76 (exp9 -> exp .)
    ASSIGN          reduce using rule 76 (exp9 -> exp .)
    COLONEQ         reduce using rule 76 (exp9 -> exp .)
    SEMICOLON       reduce using rule 76 (exp9 -> exp .)
    NEWLINE         reduce using rule 76 (exp9 -> exp .)
    RCHAVES         reduce using rule 76 (exp9 -> exp .)
    ELSE            reduce using rule 76 (exp9 -> exp .)
    RPAREN          reduce using rule 76 (exp9 -> exp .)
    COMMA           reduce using rule 76 (exp9 -> exp .)


state 98

    (34) declaration -> VAR ID type .
    (35) declaration -> VAR ID type . ASSIGN exp
    (36) declaration -> VAR ID type . COLONEQ exp
    (37) declaration -> VAR ID type . SEMICOLON
    (38) declaration -> VAR ID type . ASSIGN exp SEMICOLON
    (39) declaration -> VAR ID type . COLONEQ exp SEMICOLON

    NEWLINE         reduce using rule 34 (declaration -> VAR ID type .)
    RCHAVES         reduce using rule 34 (declaration -> VAR ID type .)
    ELSE            reduce using rule 34 (declaration -> VAR ID type .)
    ASSIGN          shift and go to state 126
    COLONEQ         shift and go to state 127
    SEMICOLON       shift and go to state 128


state 99

    (83) callFunc -> ID LPAREN params . RPAREN
    (85) callFunc -> ID LPAREN params . RPAREN SEMICOLON

    RPAREN          shift and go to state 129


state 100

    (84) callFunc -> ID LPAREN RPAREN .
    (86) callFunc -> ID LPAREN RPAREN . SEMICOLON

    NEWLINE         reduce using rule 84 (callFunc -> ID LPAREN RPAREN .)
    RCHAVES         reduce using rule 84 (callFunc -> ID LPAREN RPAREN .)
    ELSE            reduce using rule 84 (callFunc -> ID LPAREN RPAREN .)
    SEMICOLON       shift and go to state 130


state 101

    (91) params -> exp . COMMA params
    (92) params -> exp .
    (76) exp9 -> exp .

  ! shift/reduce conflict for COMMA resolved as shift
  ! reduce/reduce conflict for RPAREN resolved using rule 76 (exp9 -> exp .)
    COMMA           shift and go to state 131
    DPLUS           reduce using rule 76 (exp9 -> exp .)
    DMINUS          reduce using rule 76 (exp9 -> exp .)
    TIMES           reduce using rule 76 (exp9 -> exp .)
    DIVIDE          reduce using rule 76 (exp9 -> exp .)
    MOD             reduce using rule 76 (exp9 -> exp .)
    PLUS            reduce using rule 76 (exp9 -> exp .)
    MINUS           reduce using rule 76 (exp9 -> exp .)
    LESS            reduce using rule 76 (exp9 -> exp .)
    GREATER         reduce using rule 76 (exp9 -> exp .)
    LESS_EQUAL      reduce using rule 76 (exp9 -> exp .)
    GREATER_EQUAL   reduce using rule 76 (exp9 -> exp .)
    EQUALS          reduce using rule 76 (exp9 -> exp .)
    DIFFERENT       reduce using rule 76 (exp9 -> exp .)
    AND             reduce using rule 76 (exp9 -> exp .)
    OR              reduce using rule 76 (exp9 -> exp .)
    ASSIGN          reduce using rule 76 (exp9 -> exp .)
    COLONEQ         reduce using rule 76 (exp9 -> exp .)
    RPAREN          reduce using rule 76 (exp9 -> exp .)

  ! RPAREN          [ reduce using rule 92 (params -> exp .) ]
  ! COMMA           [ reduce using rule 76 (exp9 -> exp .) ]


state 102

    (87) callFuncP -> ID DOT ID . LPAREN params RPAREN
    (88) callFuncP -> ID DOT ID . LPAREN RPAREN
    (89) callFuncP -> ID DOT ID . LPAREN params RPAREN SEMICOLON
    (90) callFuncP -> ID DOT ID . LPAREN RPAREN SEMICOLON

    LPAREN          shift and go to state 132


state 103

    (32) for -> FOR exp body .

    NEWLINE         reduce using rule 32 (for -> FOR exp body .)
    RCHAVES         reduce using rule 32 (for -> FOR exp body .)
    ELSE            reduce using rule 32 (for -> FOR exp body .)


state 104

    (33) for -> FOR exp SEMICOLON . exp SEMICOLON exp body
    (43) exp -> . exp1
    (44) exp1 -> . exp1 ASSIGN exp2
    (45) exp1 -> . exp1 COLONEQ exp2
    (46) exp1 -> . exp2
    (47) exp2 -> . exp2 OR exp3
    (48) exp2 -> . exp3
    (49) exp3 -> . exp3 AND exp4
    (50) exp3 -> . exp4
    (51) exp4 -> . exp4 EQUALS exp5
    (52) exp4 -> . exp4 DIFFERENT exp5
    (53) exp4 -> . exp5
    (54) exp5 -> . exp5 LESS exp6
    (55) exp5 -> . exp5 GREATER exp6
    (56) exp5 -> . exp5 LESS_EQUAL exp6
    (57) exp5 -> . exp5 GREATER_EQUAL exp6
    (58) exp5 -> . exp6
    (59) exp6 -> . exp6 PLUS exp7
    (60) exp6 -> . exp6 MINUS exp7
    (61) exp6 -> . exp7
    (62) exp7 -> . exp7 TIMES exp8
    (63) exp7 -> . exp7 DIVIDE exp8
    (64) exp7 -> . exp7 MOD exp8
    (65) exp7 -> . exp8
    (66) exp8 -> . exp8 DPLUS
    (67) exp8 -> . exp8 DMINUS
    (68) exp8 -> . NOT exp8
    (69) exp8 -> . exp9
    (70) exp9 -> . NUMBER
    (71) exp9 -> . STRING
    (72) exp9 -> . ID
    (73) exp9 -> . TRUE
    (74) exp9 -> . FALSE
    (75) exp9 -> . LPAREN exp RPAREN
    (76) exp9 -> . exp

    NOT             shift and go to state 56
    NUMBER          shift and go to state 58
    STRING          shift and go to state 59
    ID              shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    LPAREN          shift and go to state 68

    exp                            shift and go to state 133
    exp1                           shift and go to state 48
    exp2                           shift and go to state 49
    exp3                           shift and go to state 50
    exp4                           shift and go to state 51
    exp5                           shift and go to state 52
    exp6                           shift and go to state 53
    exp7                           shift and go to state 54
    exp8                           shift and go to state 55
    exp9                           shift and go to state 57

state 105

    (75) exp9 -> LPAREN exp . RPAREN
    (76) exp9 -> exp .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 134
    DPLUS           reduce using rule 76 (exp9 -> exp .)
    DMINUS          reduce using rule 76 (exp9 -> exp .)
    TIMES           reduce using rule 76 (exp9 -> exp .)
    DIVIDE          reduce using rule 76 (exp9 -> exp .)
    MOD             reduce using rule 76 (exp9 -> exp .)
    PLUS            reduce using rule 76 (exp9 -> exp .)
    MINUS           reduce using rule 76 (exp9 -> exp .)
    LESS            reduce using rule 76 (exp9 -> exp .)
    GREATER         reduce using rule 76 (exp9 -> exp .)
    LESS_EQUAL      reduce using rule 76 (exp9 -> exp .)
    GREATER_EQUAL   reduce using rule 76 (exp9 -> exp .)
    EQUALS          reduce using rule 76 (exp9 -> exp .)
    DIFFERENT       reduce using rule 76 (exp9 -> exp .)
    AND             reduce using rule 76 (exp9 -> exp .)
    OR              reduce using rule 76 (exp9 -> exp .)
    ASSIGN          reduce using rule 76 (exp9 -> exp .)
    COLONEQ         reduce using rule 76 (exp9 -> exp .)

  ! RPAREN          [ reduce using rule 76 (exp9 -> exp .) ]


state 106

    (79) return -> RETURN exp SEMICOLON .

    NEWLINE         reduce using rule 79 (return -> RETURN exp SEMICOLON .)
    RCHAVES         reduce using rule 79 (return -> RETURN exp SEMICOLON .)
    ELSE            reduce using rule 79 (return -> RETURN exp SEMICOLON .)


state 107

    (14) funcreturn -> LPAREN type RPAREN .

    LCHAVES         reduce using rule 14 (funcreturn -> LPAREN type RPAREN .)


state 108

    (12) sigparams -> ID type COMMA sigparams .

    RPAREN          reduce using rule 12 (sigparams -> ID type COMMA sigparams .)


state 109

    (21) statement1 -> IF LPAREN exp RPAREN . body ELSE body
    (24) statement1 -> IF LPAREN exp RPAREN . body
    (75) exp9 -> LPAREN exp RPAREN .
    (15) body -> . LCHAVES stms RCHAVES
    (16) body -> . LCHAVES RCHAVES

  ! shift/reduce conflict for LCHAVES resolved as shift
    IF              reduce using rule 75 (exp9 -> LPAREN exp RPAREN .)
    VAR             reduce using rule 75 (exp9 -> LPAREN exp RPAREN .)
    FOR             reduce using rule 75 (exp9 -> LPAREN exp RPAREN .)
    ID              reduce using rule 75 (exp9 -> LPAREN exp RPAREN .)
    RETURN          reduce using rule 75 (exp9 -> LPAREN exp RPAREN .)
    BREAK           reduce using rule 75 (exp9 -> LPAREN exp RPAREN .)
    DPLUS           reduce using rule 75 (exp9 -> LPAREN exp RPAREN .)
    DMINUS          reduce using rule 75 (exp9 -> LPAREN exp RPAREN .)
    TIMES           reduce using rule 75 (exp9 -> LPAREN exp RPAREN .)
    DIVIDE          reduce using rule 75 (exp9 -> LPAREN exp RPAREN .)
    MOD             reduce using rule 75 (exp9 -> LPAREN exp RPAREN .)
    PLUS            reduce using rule 75 (exp9 -> LPAREN exp RPAREN .)
    MINUS           reduce using rule 75 (exp9 -> LPAREN exp RPAREN .)
    LESS            reduce using rule 75 (exp9 -> LPAREN exp RPAREN .)
    GREATER         reduce using rule 75 (exp9 -> LPAREN exp RPAREN .)
    LESS_EQUAL      reduce using rule 75 (exp9 -> LPAREN exp RPAREN .)
    GREATER_EQUAL   reduce using rule 75 (exp9 -> LPAREN exp RPAREN .)
    EQUALS          reduce using rule 75 (exp9 -> LPAREN exp RPAREN .)
    DIFFERENT       reduce using rule 75 (exp9 -> LPAREN exp RPAREN .)
    AND             reduce using rule 75 (exp9 -> LPAREN exp RPAREN .)
    OR              reduce using rule 75 (exp9 -> LPAREN exp RPAREN .)
    ASSIGN          reduce using rule 75 (exp9 -> LPAREN exp RPAREN .)
    COLONEQ         reduce using rule 75 (exp9 -> LPAREN exp RPAREN .)
    LCHAVES         shift and go to state 16

  ! LCHAVES         [ reduce using rule 75 (exp9 -> LPAREN exp RPAREN .) ]

    body                           shift and go to state 135

state 110

    (22) statement1 -> IF exp statement1 ELSE . body
    (15) body -> . LCHAVES stms RCHAVES
    (16) body -> . LCHAVES RCHAVES

    LCHAVES         shift and go to state 16

    body                           shift and go to state 136

state 111

    (44) exp1 -> exp1 ASSIGN exp2 .
    (47) exp2 -> exp2 . OR exp3
    (46) exp1 -> exp2 .

  ! shift/reduce conflict for OR resolved as shift
  ! reduce/reduce conflict for DPLUS resolved using rule 44 (exp1 -> exp1 ASSIGN exp2 .)
  ! reduce/reduce conflict for DMINUS resolved using rule 44 (exp1 -> exp1 ASSIGN exp2 .)
  ! reduce/reduce conflict for IF resolved using rule 44 (exp1 -> exp1 ASSIGN exp2 .)
  ! reduce/reduce conflict for LCHAVES resolved using rule 44 (exp1 -> exp1 ASSIGN exp2 .)
  ! reduce/reduce conflict for VAR resolved using rule 44 (exp1 -> exp1 ASSIGN exp2 .)
  ! reduce/reduce conflict for FOR resolved using rule 44 (exp1 -> exp1 ASSIGN exp2 .)
  ! reduce/reduce conflict for ID resolved using rule 44 (exp1 -> exp1 ASSIGN exp2 .)
  ! reduce/reduce conflict for RETURN resolved using rule 44 (exp1 -> exp1 ASSIGN exp2 .)
  ! reduce/reduce conflict for BREAK resolved using rule 44 (exp1 -> exp1 ASSIGN exp2 .)
  ! reduce/reduce conflict for TIMES resolved using rule 44 (exp1 -> exp1 ASSIGN exp2 .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 44 (exp1 -> exp1 ASSIGN exp2 .)
  ! reduce/reduce conflict for MOD resolved using rule 44 (exp1 -> exp1 ASSIGN exp2 .)
  ! reduce/reduce conflict for PLUS resolved using rule 44 (exp1 -> exp1 ASSIGN exp2 .)
  ! reduce/reduce conflict for MINUS resolved using rule 44 (exp1 -> exp1 ASSIGN exp2 .)
  ! reduce/reduce conflict for LESS resolved using rule 44 (exp1 -> exp1 ASSIGN exp2 .)
  ! reduce/reduce conflict for GREATER resolved using rule 44 (exp1 -> exp1 ASSIGN exp2 .)
  ! reduce/reduce conflict for LESS_EQUAL resolved using rule 44 (exp1 -> exp1 ASSIGN exp2 .)
  ! reduce/reduce conflict for GREATER_EQUAL resolved using rule 44 (exp1 -> exp1 ASSIGN exp2 .)
  ! reduce/reduce conflict for EQUALS resolved using rule 44 (exp1 -> exp1 ASSIGN exp2 .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 44 (exp1 -> exp1 ASSIGN exp2 .)
  ! reduce/reduce conflict for AND resolved using rule 44 (exp1 -> exp1 ASSIGN exp2 .)
  ! shift/reduce conflict for OR resolved as shift
  ! reduce/reduce conflict for ASSIGN resolved using rule 44 (exp1 -> exp1 ASSIGN exp2 .)
  ! reduce/reduce conflict for COLONEQ resolved using rule 44 (exp1 -> exp1 ASSIGN exp2 .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 44 (exp1 -> exp1 ASSIGN exp2 .)
  ! reduce/reduce conflict for NEWLINE resolved using rule 44 (exp1 -> exp1 ASSIGN exp2 .)
  ! reduce/reduce conflict for RCHAVES resolved using rule 44 (exp1 -> exp1 ASSIGN exp2 .)
  ! reduce/reduce conflict for ELSE resolved using rule 44 (exp1 -> exp1 ASSIGN exp2 .)
  ! reduce/reduce conflict for RPAREN resolved using rule 44 (exp1 -> exp1 ASSIGN exp2 .)
  ! reduce/reduce conflict for COMMA resolved using rule 44 (exp1 -> exp1 ASSIGN exp2 .)
    IF              reduce using rule 44 (exp1 -> exp1 ASSIGN exp2 .)
    LCHAVES         reduce using rule 44 (exp1 -> exp1 ASSIGN exp2 .)
    VAR             reduce using rule 44 (exp1 -> exp1 ASSIGN exp2 .)
    FOR             reduce using rule 44 (exp1 -> exp1 ASSIGN exp2 .)
    ID              reduce using rule 44 (exp1 -> exp1 ASSIGN exp2 .)
    RETURN          reduce using rule 44 (exp1 -> exp1 ASSIGN exp2 .)
    BREAK           reduce using rule 44 (exp1 -> exp1 ASSIGN exp2 .)
    DPLUS           reduce using rule 44 (exp1 -> exp1 ASSIGN exp2 .)
    DMINUS          reduce using rule 44 (exp1 -> exp1 ASSIGN exp2 .)
    TIMES           reduce using rule 44 (exp1 -> exp1 ASSIGN exp2 .)
    DIVIDE          reduce using rule 44 (exp1 -> exp1 ASSIGN exp2 .)
    MOD             reduce using rule 44 (exp1 -> exp1 ASSIGN exp2 .)
    PLUS            reduce using rule 44 (exp1 -> exp1 ASSIGN exp2 .)
    MINUS           reduce using rule 44 (exp1 -> exp1 ASSIGN exp2 .)
    LESS            reduce using rule 44 (exp1 -> exp1 ASSIGN exp2 .)
    GREATER         reduce using rule 44 (exp1 -> exp1 ASSIGN exp2 .)
    LESS_EQUAL      reduce using rule 44 (exp1 -> exp1 ASSIGN exp2 .)
    GREATER_EQUAL   reduce using rule 44 (exp1 -> exp1 ASSIGN exp2 .)
    EQUALS          reduce using rule 44 (exp1 -> exp1 ASSIGN exp2 .)
    DIFFERENT       reduce using rule 44 (exp1 -> exp1 ASSIGN exp2 .)
    AND             reduce using rule 44 (exp1 -> exp1 ASSIGN exp2 .)
    ASSIGN          reduce using rule 44 (exp1 -> exp1 ASSIGN exp2 .)
    COLONEQ         reduce using rule 44 (exp1 -> exp1 ASSIGN exp2 .)
    SEMICOLON       reduce using rule 44 (exp1 -> exp1 ASSIGN exp2 .)
    NEWLINE         reduce using rule 44 (exp1 -> exp1 ASSIGN exp2 .)
    RCHAVES         reduce using rule 44 (exp1 -> exp1 ASSIGN exp2 .)
    ELSE            reduce using rule 44 (exp1 -> exp1 ASSIGN exp2 .)
    RPAREN          reduce using rule 44 (exp1 -> exp1 ASSIGN exp2 .)
    COMMA           reduce using rule 44 (exp1 -> exp1 ASSIGN exp2 .)
    OR              shift and go to state 81

  ! OR              [ reduce using rule 44 (exp1 -> exp1 ASSIGN exp2 .) ]
  ! DPLUS           [ reduce using rule 46 (exp1 -> exp2 .) ]
  ! DMINUS          [ reduce using rule 46 (exp1 -> exp2 .) ]
  ! IF              [ reduce using rule 46 (exp1 -> exp2 .) ]
  ! LCHAVES         [ reduce using rule 46 (exp1 -> exp2 .) ]
  ! VAR             [ reduce using rule 46 (exp1 -> exp2 .) ]
  ! FOR             [ reduce using rule 46 (exp1 -> exp2 .) ]
  ! ID              [ reduce using rule 46 (exp1 -> exp2 .) ]
  ! RETURN          [ reduce using rule 46 (exp1 -> exp2 .) ]
  ! BREAK           [ reduce using rule 46 (exp1 -> exp2 .) ]
  ! TIMES           [ reduce using rule 46 (exp1 -> exp2 .) ]
  ! DIVIDE          [ reduce using rule 46 (exp1 -> exp2 .) ]
  ! MOD             [ reduce using rule 46 (exp1 -> exp2 .) ]
  ! PLUS            [ reduce using rule 46 (exp1 -> exp2 .) ]
  ! MINUS           [ reduce using rule 46 (exp1 -> exp2 .) ]
  ! LESS            [ reduce using rule 46 (exp1 -> exp2 .) ]
  ! GREATER         [ reduce using rule 46 (exp1 -> exp2 .) ]
  ! LESS_EQUAL      [ reduce using rule 46 (exp1 -> exp2 .) ]
  ! GREATER_EQUAL   [ reduce using rule 46 (exp1 -> exp2 .) ]
  ! EQUALS          [ reduce using rule 46 (exp1 -> exp2 .) ]
  ! DIFFERENT       [ reduce using rule 46 (exp1 -> exp2 .) ]
  ! AND             [ reduce using rule 46 (exp1 -> exp2 .) ]
  ! OR              [ reduce using rule 46 (exp1 -> exp2 .) ]
  ! ASSIGN          [ reduce using rule 46 (exp1 -> exp2 .) ]
  ! COLONEQ         [ reduce using rule 46 (exp1 -> exp2 .) ]
  ! SEMICOLON       [ reduce using rule 46 (exp1 -> exp2 .) ]
  ! NEWLINE         [ reduce using rule 46 (exp1 -> exp2 .) ]
  ! RCHAVES         [ reduce using rule 46 (exp1 -> exp2 .) ]
  ! ELSE            [ reduce using rule 46 (exp1 -> exp2 .) ]
  ! RPAREN          [ reduce using rule 46 (exp1 -> exp2 .) ]
  ! COMMA           [ reduce using rule 46 (exp1 -> exp2 .) ]


state 112

    (45) exp1 -> exp1 COLONEQ exp2 .
    (47) exp2 -> exp2 . OR exp3
    (46) exp1 -> exp2 .

  ! shift/reduce conflict for OR resolved as shift
  ! reduce/reduce conflict for DPLUS resolved using rule 45 (exp1 -> exp1 COLONEQ exp2 .)
  ! reduce/reduce conflict for DMINUS resolved using rule 45 (exp1 -> exp1 COLONEQ exp2 .)
  ! reduce/reduce conflict for IF resolved using rule 45 (exp1 -> exp1 COLONEQ exp2 .)
  ! reduce/reduce conflict for LCHAVES resolved using rule 45 (exp1 -> exp1 COLONEQ exp2 .)
  ! reduce/reduce conflict for VAR resolved using rule 45 (exp1 -> exp1 COLONEQ exp2 .)
  ! reduce/reduce conflict for FOR resolved using rule 45 (exp1 -> exp1 COLONEQ exp2 .)
  ! reduce/reduce conflict for ID resolved using rule 45 (exp1 -> exp1 COLONEQ exp2 .)
  ! reduce/reduce conflict for RETURN resolved using rule 45 (exp1 -> exp1 COLONEQ exp2 .)
  ! reduce/reduce conflict for BREAK resolved using rule 45 (exp1 -> exp1 COLONEQ exp2 .)
  ! reduce/reduce conflict for TIMES resolved using rule 45 (exp1 -> exp1 COLONEQ exp2 .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 45 (exp1 -> exp1 COLONEQ exp2 .)
  ! reduce/reduce conflict for MOD resolved using rule 45 (exp1 -> exp1 COLONEQ exp2 .)
  ! reduce/reduce conflict for PLUS resolved using rule 45 (exp1 -> exp1 COLONEQ exp2 .)
  ! reduce/reduce conflict for MINUS resolved using rule 45 (exp1 -> exp1 COLONEQ exp2 .)
  ! reduce/reduce conflict for LESS resolved using rule 45 (exp1 -> exp1 COLONEQ exp2 .)
  ! reduce/reduce conflict for GREATER resolved using rule 45 (exp1 -> exp1 COLONEQ exp2 .)
  ! reduce/reduce conflict for LESS_EQUAL resolved using rule 45 (exp1 -> exp1 COLONEQ exp2 .)
  ! reduce/reduce conflict for GREATER_EQUAL resolved using rule 45 (exp1 -> exp1 COLONEQ exp2 .)
  ! reduce/reduce conflict for EQUALS resolved using rule 45 (exp1 -> exp1 COLONEQ exp2 .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 45 (exp1 -> exp1 COLONEQ exp2 .)
  ! reduce/reduce conflict for AND resolved using rule 45 (exp1 -> exp1 COLONEQ exp2 .)
  ! shift/reduce conflict for OR resolved as shift
  ! reduce/reduce conflict for ASSIGN resolved using rule 45 (exp1 -> exp1 COLONEQ exp2 .)
  ! reduce/reduce conflict for COLONEQ resolved using rule 45 (exp1 -> exp1 COLONEQ exp2 .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 45 (exp1 -> exp1 COLONEQ exp2 .)
  ! reduce/reduce conflict for NEWLINE resolved using rule 45 (exp1 -> exp1 COLONEQ exp2 .)
  ! reduce/reduce conflict for RCHAVES resolved using rule 45 (exp1 -> exp1 COLONEQ exp2 .)
  ! reduce/reduce conflict for ELSE resolved using rule 45 (exp1 -> exp1 COLONEQ exp2 .)
  ! reduce/reduce conflict for RPAREN resolved using rule 45 (exp1 -> exp1 COLONEQ exp2 .)
  ! reduce/reduce conflict for COMMA resolved using rule 45 (exp1 -> exp1 COLONEQ exp2 .)
    IF              reduce using rule 45 (exp1 -> exp1 COLONEQ exp2 .)
    LCHAVES         reduce using rule 45 (exp1 -> exp1 COLONEQ exp2 .)
    VAR             reduce using rule 45 (exp1 -> exp1 COLONEQ exp2 .)
    FOR             reduce using rule 45 (exp1 -> exp1 COLONEQ exp2 .)
    ID              reduce using rule 45 (exp1 -> exp1 COLONEQ exp2 .)
    RETURN          reduce using rule 45 (exp1 -> exp1 COLONEQ exp2 .)
    BREAK           reduce using rule 45 (exp1 -> exp1 COLONEQ exp2 .)
    DPLUS           reduce using rule 45 (exp1 -> exp1 COLONEQ exp2 .)
    DMINUS          reduce using rule 45 (exp1 -> exp1 COLONEQ exp2 .)
    TIMES           reduce using rule 45 (exp1 -> exp1 COLONEQ exp2 .)
    DIVIDE          reduce using rule 45 (exp1 -> exp1 COLONEQ exp2 .)
    MOD             reduce using rule 45 (exp1 -> exp1 COLONEQ exp2 .)
    PLUS            reduce using rule 45 (exp1 -> exp1 COLONEQ exp2 .)
    MINUS           reduce using rule 45 (exp1 -> exp1 COLONEQ exp2 .)
    LESS            reduce using rule 45 (exp1 -> exp1 COLONEQ exp2 .)
    GREATER         reduce using rule 45 (exp1 -> exp1 COLONEQ exp2 .)
    LESS_EQUAL      reduce using rule 45 (exp1 -> exp1 COLONEQ exp2 .)
    GREATER_EQUAL   reduce using rule 45 (exp1 -> exp1 COLONEQ exp2 .)
    EQUALS          reduce using rule 45 (exp1 -> exp1 COLONEQ exp2 .)
    DIFFERENT       reduce using rule 45 (exp1 -> exp1 COLONEQ exp2 .)
    AND             reduce using rule 45 (exp1 -> exp1 COLONEQ exp2 .)
    ASSIGN          reduce using rule 45 (exp1 -> exp1 COLONEQ exp2 .)
    COLONEQ         reduce using rule 45 (exp1 -> exp1 COLONEQ exp2 .)
    SEMICOLON       reduce using rule 45 (exp1 -> exp1 COLONEQ exp2 .)
    NEWLINE         reduce using rule 45 (exp1 -> exp1 COLONEQ exp2 .)
    RCHAVES         reduce using rule 45 (exp1 -> exp1 COLONEQ exp2 .)
    ELSE            reduce using rule 45 (exp1 -> exp1 COLONEQ exp2 .)
    RPAREN          reduce using rule 45 (exp1 -> exp1 COLONEQ exp2 .)
    COMMA           reduce using rule 45 (exp1 -> exp1 COLONEQ exp2 .)
    OR              shift and go to state 81

  ! OR              [ reduce using rule 45 (exp1 -> exp1 COLONEQ exp2 .) ]
  ! DPLUS           [ reduce using rule 46 (exp1 -> exp2 .) ]
  ! DMINUS          [ reduce using rule 46 (exp1 -> exp2 .) ]
  ! IF              [ reduce using rule 46 (exp1 -> exp2 .) ]
  ! LCHAVES         [ reduce using rule 46 (exp1 -> exp2 .) ]
  ! VAR             [ reduce using rule 46 (exp1 -> exp2 .) ]
  ! FOR             [ reduce using rule 46 (exp1 -> exp2 .) ]
  ! ID              [ reduce using rule 46 (exp1 -> exp2 .) ]
  ! RETURN          [ reduce using rule 46 (exp1 -> exp2 .) ]
  ! BREAK           [ reduce using rule 46 (exp1 -> exp2 .) ]
  ! TIMES           [ reduce using rule 46 (exp1 -> exp2 .) ]
  ! DIVIDE          [ reduce using rule 46 (exp1 -> exp2 .) ]
  ! MOD             [ reduce using rule 46 (exp1 -> exp2 .) ]
  ! PLUS            [ reduce using rule 46 (exp1 -> exp2 .) ]
  ! MINUS           [ reduce using rule 46 (exp1 -> exp2 .) ]
  ! LESS            [ reduce using rule 46 (exp1 -> exp2 .) ]
  ! GREATER         [ reduce using rule 46 (exp1 -> exp2 .) ]
  ! LESS_EQUAL      [ reduce using rule 46 (exp1 -> exp2 .) ]
  ! GREATER_EQUAL   [ reduce using rule 46 (exp1 -> exp2 .) ]
  ! EQUALS          [ reduce using rule 46 (exp1 -> exp2 .) ]
  ! DIFFERENT       [ reduce using rule 46 (exp1 -> exp2 .) ]
  ! AND             [ reduce using rule 46 (exp1 -> exp2 .) ]
  ! OR              [ reduce using rule 46 (exp1 -> exp2 .) ]
  ! ASSIGN          [ reduce using rule 46 (exp1 -> exp2 .) ]
  ! COLONEQ         [ reduce using rule 46 (exp1 -> exp2 .) ]
  ! SEMICOLON       [ reduce using rule 46 (exp1 -> exp2 .) ]
  ! NEWLINE         [ reduce using rule 46 (exp1 -> exp2 .) ]
  ! RCHAVES         [ reduce using rule 46 (exp1 -> exp2 .) ]
  ! ELSE            [ reduce using rule 46 (exp1 -> exp2 .) ]
  ! RPAREN          [ reduce using rule 46 (exp1 -> exp2 .) ]
  ! COMMA           [ reduce using rule 46 (exp1 -> exp2 .) ]


state 113

    (47) exp2 -> exp2 OR exp3 .
    (49) exp3 -> exp3 . AND exp4
    (48) exp2 -> exp3 .

  ! shift/reduce conflict for AND resolved as shift
  ! reduce/reduce conflict for DPLUS resolved using rule 47 (exp2 -> exp2 OR exp3 .)
  ! reduce/reduce conflict for DMINUS resolved using rule 47 (exp2 -> exp2 OR exp3 .)
  ! reduce/reduce conflict for IF resolved using rule 47 (exp2 -> exp2 OR exp3 .)
  ! reduce/reduce conflict for LCHAVES resolved using rule 47 (exp2 -> exp2 OR exp3 .)
  ! reduce/reduce conflict for VAR resolved using rule 47 (exp2 -> exp2 OR exp3 .)
  ! reduce/reduce conflict for FOR resolved using rule 47 (exp2 -> exp2 OR exp3 .)
  ! reduce/reduce conflict for ID resolved using rule 47 (exp2 -> exp2 OR exp3 .)
  ! reduce/reduce conflict for RETURN resolved using rule 47 (exp2 -> exp2 OR exp3 .)
  ! reduce/reduce conflict for BREAK resolved using rule 47 (exp2 -> exp2 OR exp3 .)
  ! reduce/reduce conflict for TIMES resolved using rule 47 (exp2 -> exp2 OR exp3 .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 47 (exp2 -> exp2 OR exp3 .)
  ! reduce/reduce conflict for MOD resolved using rule 47 (exp2 -> exp2 OR exp3 .)
  ! reduce/reduce conflict for PLUS resolved using rule 47 (exp2 -> exp2 OR exp3 .)
  ! reduce/reduce conflict for MINUS resolved using rule 47 (exp2 -> exp2 OR exp3 .)
  ! reduce/reduce conflict for LESS resolved using rule 47 (exp2 -> exp2 OR exp3 .)
  ! reduce/reduce conflict for GREATER resolved using rule 47 (exp2 -> exp2 OR exp3 .)
  ! reduce/reduce conflict for LESS_EQUAL resolved using rule 47 (exp2 -> exp2 OR exp3 .)
  ! reduce/reduce conflict for GREATER_EQUAL resolved using rule 47 (exp2 -> exp2 OR exp3 .)
  ! reduce/reduce conflict for EQUALS resolved using rule 47 (exp2 -> exp2 OR exp3 .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 47 (exp2 -> exp2 OR exp3 .)
  ! shift/reduce conflict for AND resolved as shift
  ! reduce/reduce conflict for OR resolved using rule 47 (exp2 -> exp2 OR exp3 .)
  ! reduce/reduce conflict for ASSIGN resolved using rule 47 (exp2 -> exp2 OR exp3 .)
  ! reduce/reduce conflict for COLONEQ resolved using rule 47 (exp2 -> exp2 OR exp3 .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 47 (exp2 -> exp2 OR exp3 .)
  ! reduce/reduce conflict for NEWLINE resolved using rule 47 (exp2 -> exp2 OR exp3 .)
  ! reduce/reduce conflict for RCHAVES resolved using rule 47 (exp2 -> exp2 OR exp3 .)
  ! reduce/reduce conflict for ELSE resolved using rule 47 (exp2 -> exp2 OR exp3 .)
  ! reduce/reduce conflict for RPAREN resolved using rule 47 (exp2 -> exp2 OR exp3 .)
  ! reduce/reduce conflict for COMMA resolved using rule 47 (exp2 -> exp2 OR exp3 .)
    IF              reduce using rule 47 (exp2 -> exp2 OR exp3 .)
    LCHAVES         reduce using rule 47 (exp2 -> exp2 OR exp3 .)
    VAR             reduce using rule 47 (exp2 -> exp2 OR exp3 .)
    FOR             reduce using rule 47 (exp2 -> exp2 OR exp3 .)
    ID              reduce using rule 47 (exp2 -> exp2 OR exp3 .)
    RETURN          reduce using rule 47 (exp2 -> exp2 OR exp3 .)
    BREAK           reduce using rule 47 (exp2 -> exp2 OR exp3 .)
    DPLUS           reduce using rule 47 (exp2 -> exp2 OR exp3 .)
    DMINUS          reduce using rule 47 (exp2 -> exp2 OR exp3 .)
    TIMES           reduce using rule 47 (exp2 -> exp2 OR exp3 .)
    DIVIDE          reduce using rule 47 (exp2 -> exp2 OR exp3 .)
    MOD             reduce using rule 47 (exp2 -> exp2 OR exp3 .)
    PLUS            reduce using rule 47 (exp2 -> exp2 OR exp3 .)
    MINUS           reduce using rule 47 (exp2 -> exp2 OR exp3 .)
    LESS            reduce using rule 47 (exp2 -> exp2 OR exp3 .)
    GREATER         reduce using rule 47 (exp2 -> exp2 OR exp3 .)
    LESS_EQUAL      reduce using rule 47 (exp2 -> exp2 OR exp3 .)
    GREATER_EQUAL   reduce using rule 47 (exp2 -> exp2 OR exp3 .)
    EQUALS          reduce using rule 47 (exp2 -> exp2 OR exp3 .)
    DIFFERENT       reduce using rule 47 (exp2 -> exp2 OR exp3 .)
    OR              reduce using rule 47 (exp2 -> exp2 OR exp3 .)
    ASSIGN          reduce using rule 47 (exp2 -> exp2 OR exp3 .)
    COLONEQ         reduce using rule 47 (exp2 -> exp2 OR exp3 .)
    SEMICOLON       reduce using rule 47 (exp2 -> exp2 OR exp3 .)
    NEWLINE         reduce using rule 47 (exp2 -> exp2 OR exp3 .)
    RCHAVES         reduce using rule 47 (exp2 -> exp2 OR exp3 .)
    ELSE            reduce using rule 47 (exp2 -> exp2 OR exp3 .)
    RPAREN          reduce using rule 47 (exp2 -> exp2 OR exp3 .)
    COMMA           reduce using rule 47 (exp2 -> exp2 OR exp3 .)
    AND             shift and go to state 82

  ! AND             [ reduce using rule 47 (exp2 -> exp2 OR exp3 .) ]
  ! DPLUS           [ reduce using rule 48 (exp2 -> exp3 .) ]
  ! DMINUS          [ reduce using rule 48 (exp2 -> exp3 .) ]
  ! IF              [ reduce using rule 48 (exp2 -> exp3 .) ]
  ! LCHAVES         [ reduce using rule 48 (exp2 -> exp3 .) ]
  ! VAR             [ reduce using rule 48 (exp2 -> exp3 .) ]
  ! FOR             [ reduce using rule 48 (exp2 -> exp3 .) ]
  ! ID              [ reduce using rule 48 (exp2 -> exp3 .) ]
  ! RETURN          [ reduce using rule 48 (exp2 -> exp3 .) ]
  ! BREAK           [ reduce using rule 48 (exp2 -> exp3 .) ]
  ! TIMES           [ reduce using rule 48 (exp2 -> exp3 .) ]
  ! DIVIDE          [ reduce using rule 48 (exp2 -> exp3 .) ]
  ! MOD             [ reduce using rule 48 (exp2 -> exp3 .) ]
  ! PLUS            [ reduce using rule 48 (exp2 -> exp3 .) ]
  ! MINUS           [ reduce using rule 48 (exp2 -> exp3 .) ]
  ! LESS            [ reduce using rule 48 (exp2 -> exp3 .) ]
  ! GREATER         [ reduce using rule 48 (exp2 -> exp3 .) ]
  ! LESS_EQUAL      [ reduce using rule 48 (exp2 -> exp3 .) ]
  ! GREATER_EQUAL   [ reduce using rule 48 (exp2 -> exp3 .) ]
  ! EQUALS          [ reduce using rule 48 (exp2 -> exp3 .) ]
  ! DIFFERENT       [ reduce using rule 48 (exp2 -> exp3 .) ]
  ! AND             [ reduce using rule 48 (exp2 -> exp3 .) ]
  ! OR              [ reduce using rule 48 (exp2 -> exp3 .) ]
  ! ASSIGN          [ reduce using rule 48 (exp2 -> exp3 .) ]
  ! COLONEQ         [ reduce using rule 48 (exp2 -> exp3 .) ]
  ! SEMICOLON       [ reduce using rule 48 (exp2 -> exp3 .) ]
  ! NEWLINE         [ reduce using rule 48 (exp2 -> exp3 .) ]
  ! RCHAVES         [ reduce using rule 48 (exp2 -> exp3 .) ]
  ! ELSE            [ reduce using rule 48 (exp2 -> exp3 .) ]
  ! RPAREN          [ reduce using rule 48 (exp2 -> exp3 .) ]
  ! COMMA           [ reduce using rule 48 (exp2 -> exp3 .) ]


state 114

    (49) exp3 -> exp3 AND exp4 .
    (51) exp4 -> exp4 . EQUALS exp5
    (52) exp4 -> exp4 . DIFFERENT exp5
    (50) exp3 -> exp4 .

  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for DIFFERENT resolved as shift
  ! reduce/reduce conflict for DPLUS resolved using rule 49 (exp3 -> exp3 AND exp4 .)
  ! reduce/reduce conflict for DMINUS resolved using rule 49 (exp3 -> exp3 AND exp4 .)
  ! reduce/reduce conflict for IF resolved using rule 49 (exp3 -> exp3 AND exp4 .)
  ! reduce/reduce conflict for LCHAVES resolved using rule 49 (exp3 -> exp3 AND exp4 .)
  ! reduce/reduce conflict for VAR resolved using rule 49 (exp3 -> exp3 AND exp4 .)
  ! reduce/reduce conflict for FOR resolved using rule 49 (exp3 -> exp3 AND exp4 .)
  ! reduce/reduce conflict for ID resolved using rule 49 (exp3 -> exp3 AND exp4 .)
  ! reduce/reduce conflict for RETURN resolved using rule 49 (exp3 -> exp3 AND exp4 .)
  ! reduce/reduce conflict for BREAK resolved using rule 49 (exp3 -> exp3 AND exp4 .)
  ! reduce/reduce conflict for TIMES resolved using rule 49 (exp3 -> exp3 AND exp4 .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 49 (exp3 -> exp3 AND exp4 .)
  ! reduce/reduce conflict for MOD resolved using rule 49 (exp3 -> exp3 AND exp4 .)
  ! reduce/reduce conflict for PLUS resolved using rule 49 (exp3 -> exp3 AND exp4 .)
  ! reduce/reduce conflict for MINUS resolved using rule 49 (exp3 -> exp3 AND exp4 .)
  ! reduce/reduce conflict for LESS resolved using rule 49 (exp3 -> exp3 AND exp4 .)
  ! reduce/reduce conflict for GREATER resolved using rule 49 (exp3 -> exp3 AND exp4 .)
  ! reduce/reduce conflict for LESS_EQUAL resolved using rule 49 (exp3 -> exp3 AND exp4 .)
  ! reduce/reduce conflict for GREATER_EQUAL resolved using rule 49 (exp3 -> exp3 AND exp4 .)
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for DIFFERENT resolved as shift
  ! reduce/reduce conflict for AND resolved using rule 49 (exp3 -> exp3 AND exp4 .)
  ! reduce/reduce conflict for OR resolved using rule 49 (exp3 -> exp3 AND exp4 .)
  ! reduce/reduce conflict for ASSIGN resolved using rule 49 (exp3 -> exp3 AND exp4 .)
  ! reduce/reduce conflict for COLONEQ resolved using rule 49 (exp3 -> exp3 AND exp4 .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 49 (exp3 -> exp3 AND exp4 .)
  ! reduce/reduce conflict for NEWLINE resolved using rule 49 (exp3 -> exp3 AND exp4 .)
  ! reduce/reduce conflict for RCHAVES resolved using rule 49 (exp3 -> exp3 AND exp4 .)
  ! reduce/reduce conflict for ELSE resolved using rule 49 (exp3 -> exp3 AND exp4 .)
  ! reduce/reduce conflict for RPAREN resolved using rule 49 (exp3 -> exp3 AND exp4 .)
  ! reduce/reduce conflict for COMMA resolved using rule 49 (exp3 -> exp3 AND exp4 .)
    IF              reduce using rule 49 (exp3 -> exp3 AND exp4 .)
    LCHAVES         reduce using rule 49 (exp3 -> exp3 AND exp4 .)
    VAR             reduce using rule 49 (exp3 -> exp3 AND exp4 .)
    FOR             reduce using rule 49 (exp3 -> exp3 AND exp4 .)
    ID              reduce using rule 49 (exp3 -> exp3 AND exp4 .)
    RETURN          reduce using rule 49 (exp3 -> exp3 AND exp4 .)
    BREAK           reduce using rule 49 (exp3 -> exp3 AND exp4 .)
    DPLUS           reduce using rule 49 (exp3 -> exp3 AND exp4 .)
    DMINUS          reduce using rule 49 (exp3 -> exp3 AND exp4 .)
    TIMES           reduce using rule 49 (exp3 -> exp3 AND exp4 .)
    DIVIDE          reduce using rule 49 (exp3 -> exp3 AND exp4 .)
    MOD             reduce using rule 49 (exp3 -> exp3 AND exp4 .)
    PLUS            reduce using rule 49 (exp3 -> exp3 AND exp4 .)
    MINUS           reduce using rule 49 (exp3 -> exp3 AND exp4 .)
    LESS            reduce using rule 49 (exp3 -> exp3 AND exp4 .)
    GREATER         reduce using rule 49 (exp3 -> exp3 AND exp4 .)
    LESS_EQUAL      reduce using rule 49 (exp3 -> exp3 AND exp4 .)
    GREATER_EQUAL   reduce using rule 49 (exp3 -> exp3 AND exp4 .)
    AND             reduce using rule 49 (exp3 -> exp3 AND exp4 .)
    OR              reduce using rule 49 (exp3 -> exp3 AND exp4 .)
    ASSIGN          reduce using rule 49 (exp3 -> exp3 AND exp4 .)
    COLONEQ         reduce using rule 49 (exp3 -> exp3 AND exp4 .)
    SEMICOLON       reduce using rule 49 (exp3 -> exp3 AND exp4 .)
    NEWLINE         reduce using rule 49 (exp3 -> exp3 AND exp4 .)
    RCHAVES         reduce using rule 49 (exp3 -> exp3 AND exp4 .)
    ELSE            reduce using rule 49 (exp3 -> exp3 AND exp4 .)
    RPAREN          reduce using rule 49 (exp3 -> exp3 AND exp4 .)
    COMMA           reduce using rule 49 (exp3 -> exp3 AND exp4 .)
    EQUALS          shift and go to state 83
    DIFFERENT       shift and go to state 84

  ! EQUALS          [ reduce using rule 49 (exp3 -> exp3 AND exp4 .) ]
  ! DIFFERENT       [ reduce using rule 49 (exp3 -> exp3 AND exp4 .) ]
  ! DPLUS           [ reduce using rule 50 (exp3 -> exp4 .) ]
  ! DMINUS          [ reduce using rule 50 (exp3 -> exp4 .) ]
  ! IF              [ reduce using rule 50 (exp3 -> exp4 .) ]
  ! LCHAVES         [ reduce using rule 50 (exp3 -> exp4 .) ]
  ! VAR             [ reduce using rule 50 (exp3 -> exp4 .) ]
  ! FOR             [ reduce using rule 50 (exp3 -> exp4 .) ]
  ! ID              [ reduce using rule 50 (exp3 -> exp4 .) ]
  ! RETURN          [ reduce using rule 50 (exp3 -> exp4 .) ]
  ! BREAK           [ reduce using rule 50 (exp3 -> exp4 .) ]
  ! TIMES           [ reduce using rule 50 (exp3 -> exp4 .) ]
  ! DIVIDE          [ reduce using rule 50 (exp3 -> exp4 .) ]
  ! MOD             [ reduce using rule 50 (exp3 -> exp4 .) ]
  ! PLUS            [ reduce using rule 50 (exp3 -> exp4 .) ]
  ! MINUS           [ reduce using rule 50 (exp3 -> exp4 .) ]
  ! LESS            [ reduce using rule 50 (exp3 -> exp4 .) ]
  ! GREATER         [ reduce using rule 50 (exp3 -> exp4 .) ]
  ! LESS_EQUAL      [ reduce using rule 50 (exp3 -> exp4 .) ]
  ! GREATER_EQUAL   [ reduce using rule 50 (exp3 -> exp4 .) ]
  ! EQUALS          [ reduce using rule 50 (exp3 -> exp4 .) ]
  ! DIFFERENT       [ reduce using rule 50 (exp3 -> exp4 .) ]
  ! AND             [ reduce using rule 50 (exp3 -> exp4 .) ]
  ! OR              [ reduce using rule 50 (exp3 -> exp4 .) ]
  ! ASSIGN          [ reduce using rule 50 (exp3 -> exp4 .) ]
  ! COLONEQ         [ reduce using rule 50 (exp3 -> exp4 .) ]
  ! SEMICOLON       [ reduce using rule 50 (exp3 -> exp4 .) ]
  ! NEWLINE         [ reduce using rule 50 (exp3 -> exp4 .) ]
  ! RCHAVES         [ reduce using rule 50 (exp3 -> exp4 .) ]
  ! ELSE            [ reduce using rule 50 (exp3 -> exp4 .) ]
  ! RPAREN          [ reduce using rule 50 (exp3 -> exp4 .) ]
  ! COMMA           [ reduce using rule 50 (exp3 -> exp4 .) ]


state 115

    (51) exp4 -> exp4 EQUALS exp5 .
    (54) exp5 -> exp5 . LESS exp6
    (55) exp5 -> exp5 . GREATER exp6
    (56) exp5 -> exp5 . LESS_EQUAL exp6
    (57) exp5 -> exp5 . GREATER_EQUAL exp6
    (53) exp4 -> exp5 .

  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! reduce/reduce conflict for DPLUS resolved using rule 51 (exp4 -> exp4 EQUALS exp5 .)
  ! reduce/reduce conflict for DMINUS resolved using rule 51 (exp4 -> exp4 EQUALS exp5 .)
  ! reduce/reduce conflict for IF resolved using rule 51 (exp4 -> exp4 EQUALS exp5 .)
  ! reduce/reduce conflict for LCHAVES resolved using rule 51 (exp4 -> exp4 EQUALS exp5 .)
  ! reduce/reduce conflict for VAR resolved using rule 51 (exp4 -> exp4 EQUALS exp5 .)
  ! reduce/reduce conflict for FOR resolved using rule 51 (exp4 -> exp4 EQUALS exp5 .)
  ! reduce/reduce conflict for ID resolved using rule 51 (exp4 -> exp4 EQUALS exp5 .)
  ! reduce/reduce conflict for RETURN resolved using rule 51 (exp4 -> exp4 EQUALS exp5 .)
  ! reduce/reduce conflict for BREAK resolved using rule 51 (exp4 -> exp4 EQUALS exp5 .)
  ! reduce/reduce conflict for TIMES resolved using rule 51 (exp4 -> exp4 EQUALS exp5 .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 51 (exp4 -> exp4 EQUALS exp5 .)
  ! reduce/reduce conflict for MOD resolved using rule 51 (exp4 -> exp4 EQUALS exp5 .)
  ! reduce/reduce conflict for PLUS resolved using rule 51 (exp4 -> exp4 EQUALS exp5 .)
  ! reduce/reduce conflict for MINUS resolved using rule 51 (exp4 -> exp4 EQUALS exp5 .)
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! reduce/reduce conflict for EQUALS resolved using rule 51 (exp4 -> exp4 EQUALS exp5 .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 51 (exp4 -> exp4 EQUALS exp5 .)
  ! reduce/reduce conflict for AND resolved using rule 51 (exp4 -> exp4 EQUALS exp5 .)
  ! reduce/reduce conflict for OR resolved using rule 51 (exp4 -> exp4 EQUALS exp5 .)
  ! reduce/reduce conflict for ASSIGN resolved using rule 51 (exp4 -> exp4 EQUALS exp5 .)
  ! reduce/reduce conflict for COLONEQ resolved using rule 51 (exp4 -> exp4 EQUALS exp5 .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 51 (exp4 -> exp4 EQUALS exp5 .)
  ! reduce/reduce conflict for NEWLINE resolved using rule 51 (exp4 -> exp4 EQUALS exp5 .)
  ! reduce/reduce conflict for RCHAVES resolved using rule 51 (exp4 -> exp4 EQUALS exp5 .)
  ! reduce/reduce conflict for ELSE resolved using rule 51 (exp4 -> exp4 EQUALS exp5 .)
  ! reduce/reduce conflict for RPAREN resolved using rule 51 (exp4 -> exp4 EQUALS exp5 .)
  ! reduce/reduce conflict for COMMA resolved using rule 51 (exp4 -> exp4 EQUALS exp5 .)
    IF              reduce using rule 51 (exp4 -> exp4 EQUALS exp5 .)
    LCHAVES         reduce using rule 51 (exp4 -> exp4 EQUALS exp5 .)
    VAR             reduce using rule 51 (exp4 -> exp4 EQUALS exp5 .)
    FOR             reduce using rule 51 (exp4 -> exp4 EQUALS exp5 .)
    ID              reduce using rule 51 (exp4 -> exp4 EQUALS exp5 .)
    RETURN          reduce using rule 51 (exp4 -> exp4 EQUALS exp5 .)
    BREAK           reduce using rule 51 (exp4 -> exp4 EQUALS exp5 .)
    DPLUS           reduce using rule 51 (exp4 -> exp4 EQUALS exp5 .)
    DMINUS          reduce using rule 51 (exp4 -> exp4 EQUALS exp5 .)
    TIMES           reduce using rule 51 (exp4 -> exp4 EQUALS exp5 .)
    DIVIDE          reduce using rule 51 (exp4 -> exp4 EQUALS exp5 .)
    MOD             reduce using rule 51 (exp4 -> exp4 EQUALS exp5 .)
    PLUS            reduce using rule 51 (exp4 -> exp4 EQUALS exp5 .)
    MINUS           reduce using rule 51 (exp4 -> exp4 EQUALS exp5 .)
    EQUALS          reduce using rule 51 (exp4 -> exp4 EQUALS exp5 .)
    DIFFERENT       reduce using rule 51 (exp4 -> exp4 EQUALS exp5 .)
    AND             reduce using rule 51 (exp4 -> exp4 EQUALS exp5 .)
    OR              reduce using rule 51 (exp4 -> exp4 EQUALS exp5 .)
    ASSIGN          reduce using rule 51 (exp4 -> exp4 EQUALS exp5 .)
    COLONEQ         reduce using rule 51 (exp4 -> exp4 EQUALS exp5 .)
    SEMICOLON       reduce using rule 51 (exp4 -> exp4 EQUALS exp5 .)
    NEWLINE         reduce using rule 51 (exp4 -> exp4 EQUALS exp5 .)
    RCHAVES         reduce using rule 51 (exp4 -> exp4 EQUALS exp5 .)
    ELSE            reduce using rule 51 (exp4 -> exp4 EQUALS exp5 .)
    RPAREN          reduce using rule 51 (exp4 -> exp4 EQUALS exp5 .)
    COMMA           reduce using rule 51 (exp4 -> exp4 EQUALS exp5 .)
    LESS            shift and go to state 85
    GREATER         shift and go to state 86
    LESS_EQUAL      shift and go to state 87
    GREATER_EQUAL   shift and go to state 88

  ! LESS            [ reduce using rule 51 (exp4 -> exp4 EQUALS exp5 .) ]
  ! GREATER         [ reduce using rule 51 (exp4 -> exp4 EQUALS exp5 .) ]
  ! LESS_EQUAL      [ reduce using rule 51 (exp4 -> exp4 EQUALS exp5 .) ]
  ! GREATER_EQUAL   [ reduce using rule 51 (exp4 -> exp4 EQUALS exp5 .) ]
  ! DPLUS           [ reduce using rule 53 (exp4 -> exp5 .) ]
  ! DMINUS          [ reduce using rule 53 (exp4 -> exp5 .) ]
  ! IF              [ reduce using rule 53 (exp4 -> exp5 .) ]
  ! LCHAVES         [ reduce using rule 53 (exp4 -> exp5 .) ]
  ! VAR             [ reduce using rule 53 (exp4 -> exp5 .) ]
  ! FOR             [ reduce using rule 53 (exp4 -> exp5 .) ]
  ! ID              [ reduce using rule 53 (exp4 -> exp5 .) ]
  ! RETURN          [ reduce using rule 53 (exp4 -> exp5 .) ]
  ! BREAK           [ reduce using rule 53 (exp4 -> exp5 .) ]
  ! TIMES           [ reduce using rule 53 (exp4 -> exp5 .) ]
  ! DIVIDE          [ reduce using rule 53 (exp4 -> exp5 .) ]
  ! MOD             [ reduce using rule 53 (exp4 -> exp5 .) ]
  ! PLUS            [ reduce using rule 53 (exp4 -> exp5 .) ]
  ! MINUS           [ reduce using rule 53 (exp4 -> exp5 .) ]
  ! LESS            [ reduce using rule 53 (exp4 -> exp5 .) ]
  ! GREATER         [ reduce using rule 53 (exp4 -> exp5 .) ]
  ! LESS_EQUAL      [ reduce using rule 53 (exp4 -> exp5 .) ]
  ! GREATER_EQUAL   [ reduce using rule 53 (exp4 -> exp5 .) ]
  ! EQUALS          [ reduce using rule 53 (exp4 -> exp5 .) ]
  ! DIFFERENT       [ reduce using rule 53 (exp4 -> exp5 .) ]
  ! AND             [ reduce using rule 53 (exp4 -> exp5 .) ]
  ! OR              [ reduce using rule 53 (exp4 -> exp5 .) ]
  ! ASSIGN          [ reduce using rule 53 (exp4 -> exp5 .) ]
  ! COLONEQ         [ reduce using rule 53 (exp4 -> exp5 .) ]
  ! SEMICOLON       [ reduce using rule 53 (exp4 -> exp5 .) ]
  ! NEWLINE         [ reduce using rule 53 (exp4 -> exp5 .) ]
  ! RCHAVES         [ reduce using rule 53 (exp4 -> exp5 .) ]
  ! ELSE            [ reduce using rule 53 (exp4 -> exp5 .) ]
  ! RPAREN          [ reduce using rule 53 (exp4 -> exp5 .) ]
  ! COMMA           [ reduce using rule 53 (exp4 -> exp5 .) ]


state 116

    (52) exp4 -> exp4 DIFFERENT exp5 .
    (54) exp5 -> exp5 . LESS exp6
    (55) exp5 -> exp5 . GREATER exp6
    (56) exp5 -> exp5 . LESS_EQUAL exp6
    (57) exp5 -> exp5 . GREATER_EQUAL exp6
    (53) exp4 -> exp5 .

  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! reduce/reduce conflict for DPLUS resolved using rule 52 (exp4 -> exp4 DIFFERENT exp5 .)
  ! reduce/reduce conflict for DMINUS resolved using rule 52 (exp4 -> exp4 DIFFERENT exp5 .)
  ! reduce/reduce conflict for IF resolved using rule 52 (exp4 -> exp4 DIFFERENT exp5 .)
  ! reduce/reduce conflict for LCHAVES resolved using rule 52 (exp4 -> exp4 DIFFERENT exp5 .)
  ! reduce/reduce conflict for VAR resolved using rule 52 (exp4 -> exp4 DIFFERENT exp5 .)
  ! reduce/reduce conflict for FOR resolved using rule 52 (exp4 -> exp4 DIFFERENT exp5 .)
  ! reduce/reduce conflict for ID resolved using rule 52 (exp4 -> exp4 DIFFERENT exp5 .)
  ! reduce/reduce conflict for RETURN resolved using rule 52 (exp4 -> exp4 DIFFERENT exp5 .)
  ! reduce/reduce conflict for BREAK resolved using rule 52 (exp4 -> exp4 DIFFERENT exp5 .)
  ! reduce/reduce conflict for TIMES resolved using rule 52 (exp4 -> exp4 DIFFERENT exp5 .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 52 (exp4 -> exp4 DIFFERENT exp5 .)
  ! reduce/reduce conflict for MOD resolved using rule 52 (exp4 -> exp4 DIFFERENT exp5 .)
  ! reduce/reduce conflict for PLUS resolved using rule 52 (exp4 -> exp4 DIFFERENT exp5 .)
  ! reduce/reduce conflict for MINUS resolved using rule 52 (exp4 -> exp4 DIFFERENT exp5 .)
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! reduce/reduce conflict for EQUALS resolved using rule 52 (exp4 -> exp4 DIFFERENT exp5 .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 52 (exp4 -> exp4 DIFFERENT exp5 .)
  ! reduce/reduce conflict for AND resolved using rule 52 (exp4 -> exp4 DIFFERENT exp5 .)
  ! reduce/reduce conflict for OR resolved using rule 52 (exp4 -> exp4 DIFFERENT exp5 .)
  ! reduce/reduce conflict for ASSIGN resolved using rule 52 (exp4 -> exp4 DIFFERENT exp5 .)
  ! reduce/reduce conflict for COLONEQ resolved using rule 52 (exp4 -> exp4 DIFFERENT exp5 .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 52 (exp4 -> exp4 DIFFERENT exp5 .)
  ! reduce/reduce conflict for NEWLINE resolved using rule 52 (exp4 -> exp4 DIFFERENT exp5 .)
  ! reduce/reduce conflict for RCHAVES resolved using rule 52 (exp4 -> exp4 DIFFERENT exp5 .)
  ! reduce/reduce conflict for ELSE resolved using rule 52 (exp4 -> exp4 DIFFERENT exp5 .)
  ! reduce/reduce conflict for RPAREN resolved using rule 52 (exp4 -> exp4 DIFFERENT exp5 .)
  ! reduce/reduce conflict for COMMA resolved using rule 52 (exp4 -> exp4 DIFFERENT exp5 .)
    IF              reduce using rule 52 (exp4 -> exp4 DIFFERENT exp5 .)
    LCHAVES         reduce using rule 52 (exp4 -> exp4 DIFFERENT exp5 .)
    VAR             reduce using rule 52 (exp4 -> exp4 DIFFERENT exp5 .)
    FOR             reduce using rule 52 (exp4 -> exp4 DIFFERENT exp5 .)
    ID              reduce using rule 52 (exp4 -> exp4 DIFFERENT exp5 .)
    RETURN          reduce using rule 52 (exp4 -> exp4 DIFFERENT exp5 .)
    BREAK           reduce using rule 52 (exp4 -> exp4 DIFFERENT exp5 .)
    DPLUS           reduce using rule 52 (exp4 -> exp4 DIFFERENT exp5 .)
    DMINUS          reduce using rule 52 (exp4 -> exp4 DIFFERENT exp5 .)
    TIMES           reduce using rule 52 (exp4 -> exp4 DIFFERENT exp5 .)
    DIVIDE          reduce using rule 52 (exp4 -> exp4 DIFFERENT exp5 .)
    MOD             reduce using rule 52 (exp4 -> exp4 DIFFERENT exp5 .)
    PLUS            reduce using rule 52 (exp4 -> exp4 DIFFERENT exp5 .)
    MINUS           reduce using rule 52 (exp4 -> exp4 DIFFERENT exp5 .)
    EQUALS          reduce using rule 52 (exp4 -> exp4 DIFFERENT exp5 .)
    DIFFERENT       reduce using rule 52 (exp4 -> exp4 DIFFERENT exp5 .)
    AND             reduce using rule 52 (exp4 -> exp4 DIFFERENT exp5 .)
    OR              reduce using rule 52 (exp4 -> exp4 DIFFERENT exp5 .)
    ASSIGN          reduce using rule 52 (exp4 -> exp4 DIFFERENT exp5 .)
    COLONEQ         reduce using rule 52 (exp4 -> exp4 DIFFERENT exp5 .)
    SEMICOLON       reduce using rule 52 (exp4 -> exp4 DIFFERENT exp5 .)
    NEWLINE         reduce using rule 52 (exp4 -> exp4 DIFFERENT exp5 .)
    RCHAVES         reduce using rule 52 (exp4 -> exp4 DIFFERENT exp5 .)
    ELSE            reduce using rule 52 (exp4 -> exp4 DIFFERENT exp5 .)
    RPAREN          reduce using rule 52 (exp4 -> exp4 DIFFERENT exp5 .)
    COMMA           reduce using rule 52 (exp4 -> exp4 DIFFERENT exp5 .)
    LESS            shift and go to state 85
    GREATER         shift and go to state 86
    LESS_EQUAL      shift and go to state 87
    GREATER_EQUAL   shift and go to state 88

  ! LESS            [ reduce using rule 52 (exp4 -> exp4 DIFFERENT exp5 .) ]
  ! GREATER         [ reduce using rule 52 (exp4 -> exp4 DIFFERENT exp5 .) ]
  ! LESS_EQUAL      [ reduce using rule 52 (exp4 -> exp4 DIFFERENT exp5 .) ]
  ! GREATER_EQUAL   [ reduce using rule 52 (exp4 -> exp4 DIFFERENT exp5 .) ]
  ! DPLUS           [ reduce using rule 53 (exp4 -> exp5 .) ]
  ! DMINUS          [ reduce using rule 53 (exp4 -> exp5 .) ]
  ! IF              [ reduce using rule 53 (exp4 -> exp5 .) ]
  ! LCHAVES         [ reduce using rule 53 (exp4 -> exp5 .) ]
  ! VAR             [ reduce using rule 53 (exp4 -> exp5 .) ]
  ! FOR             [ reduce using rule 53 (exp4 -> exp5 .) ]
  ! ID              [ reduce using rule 53 (exp4 -> exp5 .) ]
  ! RETURN          [ reduce using rule 53 (exp4 -> exp5 .) ]
  ! BREAK           [ reduce using rule 53 (exp4 -> exp5 .) ]
  ! TIMES           [ reduce using rule 53 (exp4 -> exp5 .) ]
  ! DIVIDE          [ reduce using rule 53 (exp4 -> exp5 .) ]
  ! MOD             [ reduce using rule 53 (exp4 -> exp5 .) ]
  ! PLUS            [ reduce using rule 53 (exp4 -> exp5 .) ]
  ! MINUS           [ reduce using rule 53 (exp4 -> exp5 .) ]
  ! LESS            [ reduce using rule 53 (exp4 -> exp5 .) ]
  ! GREATER         [ reduce using rule 53 (exp4 -> exp5 .) ]
  ! LESS_EQUAL      [ reduce using rule 53 (exp4 -> exp5 .) ]
  ! GREATER_EQUAL   [ reduce using rule 53 (exp4 -> exp5 .) ]
  ! EQUALS          [ reduce using rule 53 (exp4 -> exp5 .) ]
  ! DIFFERENT       [ reduce using rule 53 (exp4 -> exp5 .) ]
  ! AND             [ reduce using rule 53 (exp4 -> exp5 .) ]
  ! OR              [ reduce using rule 53 (exp4 -> exp5 .) ]
  ! ASSIGN          [ reduce using rule 53 (exp4 -> exp5 .) ]
  ! COLONEQ         [ reduce using rule 53 (exp4 -> exp5 .) ]
  ! SEMICOLON       [ reduce using rule 53 (exp4 -> exp5 .) ]
  ! NEWLINE         [ reduce using rule 53 (exp4 -> exp5 .) ]
  ! RCHAVES         [ reduce using rule 53 (exp4 -> exp5 .) ]
  ! ELSE            [ reduce using rule 53 (exp4 -> exp5 .) ]
  ! RPAREN          [ reduce using rule 53 (exp4 -> exp5 .) ]
  ! COMMA           [ reduce using rule 53 (exp4 -> exp5 .) ]


state 117

    (54) exp5 -> exp5 LESS exp6 .
    (59) exp6 -> exp6 . PLUS exp7
    (60) exp6 -> exp6 . MINUS exp7
    (58) exp5 -> exp6 .

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! reduce/reduce conflict for DPLUS resolved using rule 54 (exp5 -> exp5 LESS exp6 .)
  ! reduce/reduce conflict for DMINUS resolved using rule 54 (exp5 -> exp5 LESS exp6 .)
  ! reduce/reduce conflict for IF resolved using rule 54 (exp5 -> exp5 LESS exp6 .)
  ! reduce/reduce conflict for LCHAVES resolved using rule 54 (exp5 -> exp5 LESS exp6 .)
  ! reduce/reduce conflict for VAR resolved using rule 54 (exp5 -> exp5 LESS exp6 .)
  ! reduce/reduce conflict for FOR resolved using rule 54 (exp5 -> exp5 LESS exp6 .)
  ! reduce/reduce conflict for ID resolved using rule 54 (exp5 -> exp5 LESS exp6 .)
  ! reduce/reduce conflict for RETURN resolved using rule 54 (exp5 -> exp5 LESS exp6 .)
  ! reduce/reduce conflict for BREAK resolved using rule 54 (exp5 -> exp5 LESS exp6 .)
  ! reduce/reduce conflict for TIMES resolved using rule 54 (exp5 -> exp5 LESS exp6 .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 54 (exp5 -> exp5 LESS exp6 .)
  ! reduce/reduce conflict for MOD resolved using rule 54 (exp5 -> exp5 LESS exp6 .)
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! reduce/reduce conflict for LESS resolved using rule 54 (exp5 -> exp5 LESS exp6 .)
  ! reduce/reduce conflict for GREATER resolved using rule 54 (exp5 -> exp5 LESS exp6 .)
  ! reduce/reduce conflict for LESS_EQUAL resolved using rule 54 (exp5 -> exp5 LESS exp6 .)
  ! reduce/reduce conflict for GREATER_EQUAL resolved using rule 54 (exp5 -> exp5 LESS exp6 .)
  ! reduce/reduce conflict for EQUALS resolved using rule 54 (exp5 -> exp5 LESS exp6 .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 54 (exp5 -> exp5 LESS exp6 .)
  ! reduce/reduce conflict for AND resolved using rule 54 (exp5 -> exp5 LESS exp6 .)
  ! reduce/reduce conflict for OR resolved using rule 54 (exp5 -> exp5 LESS exp6 .)
  ! reduce/reduce conflict for ASSIGN resolved using rule 54 (exp5 -> exp5 LESS exp6 .)
  ! reduce/reduce conflict for COLONEQ resolved using rule 54 (exp5 -> exp5 LESS exp6 .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 54 (exp5 -> exp5 LESS exp6 .)
  ! reduce/reduce conflict for NEWLINE resolved using rule 54 (exp5 -> exp5 LESS exp6 .)
  ! reduce/reduce conflict for RCHAVES resolved using rule 54 (exp5 -> exp5 LESS exp6 .)
  ! reduce/reduce conflict for ELSE resolved using rule 54 (exp5 -> exp5 LESS exp6 .)
  ! reduce/reduce conflict for RPAREN resolved using rule 54 (exp5 -> exp5 LESS exp6 .)
  ! reduce/reduce conflict for COMMA resolved using rule 54 (exp5 -> exp5 LESS exp6 .)
    IF              reduce using rule 54 (exp5 -> exp5 LESS exp6 .)
    LCHAVES         reduce using rule 54 (exp5 -> exp5 LESS exp6 .)
    VAR             reduce using rule 54 (exp5 -> exp5 LESS exp6 .)
    FOR             reduce using rule 54 (exp5 -> exp5 LESS exp6 .)
    ID              reduce using rule 54 (exp5 -> exp5 LESS exp6 .)
    RETURN          reduce using rule 54 (exp5 -> exp5 LESS exp6 .)
    BREAK           reduce using rule 54 (exp5 -> exp5 LESS exp6 .)
    DPLUS           reduce using rule 54 (exp5 -> exp5 LESS exp6 .)
    DMINUS          reduce using rule 54 (exp5 -> exp5 LESS exp6 .)
    TIMES           reduce using rule 54 (exp5 -> exp5 LESS exp6 .)
    DIVIDE          reduce using rule 54 (exp5 -> exp5 LESS exp6 .)
    MOD             reduce using rule 54 (exp5 -> exp5 LESS exp6 .)
    LESS            reduce using rule 54 (exp5 -> exp5 LESS exp6 .)
    GREATER         reduce using rule 54 (exp5 -> exp5 LESS exp6 .)
    LESS_EQUAL      reduce using rule 54 (exp5 -> exp5 LESS exp6 .)
    GREATER_EQUAL   reduce using rule 54 (exp5 -> exp5 LESS exp6 .)
    EQUALS          reduce using rule 54 (exp5 -> exp5 LESS exp6 .)
    DIFFERENT       reduce using rule 54 (exp5 -> exp5 LESS exp6 .)
    AND             reduce using rule 54 (exp5 -> exp5 LESS exp6 .)
    OR              reduce using rule 54 (exp5 -> exp5 LESS exp6 .)
    ASSIGN          reduce using rule 54 (exp5 -> exp5 LESS exp6 .)
    COLONEQ         reduce using rule 54 (exp5 -> exp5 LESS exp6 .)
    SEMICOLON       reduce using rule 54 (exp5 -> exp5 LESS exp6 .)
    NEWLINE         reduce using rule 54 (exp5 -> exp5 LESS exp6 .)
    RCHAVES         reduce using rule 54 (exp5 -> exp5 LESS exp6 .)
    ELSE            reduce using rule 54 (exp5 -> exp5 LESS exp6 .)
    RPAREN          reduce using rule 54 (exp5 -> exp5 LESS exp6 .)
    COMMA           reduce using rule 54 (exp5 -> exp5 LESS exp6 .)
    PLUS            shift and go to state 89
    MINUS           shift and go to state 90

  ! PLUS            [ reduce using rule 54 (exp5 -> exp5 LESS exp6 .) ]
  ! MINUS           [ reduce using rule 54 (exp5 -> exp5 LESS exp6 .) ]
  ! DPLUS           [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! DMINUS          [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! IF              [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! LCHAVES         [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! VAR             [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! FOR             [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! ID              [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! RETURN          [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! BREAK           [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! TIMES           [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! DIVIDE          [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! MOD             [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! PLUS            [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! MINUS           [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! LESS            [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! GREATER         [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! LESS_EQUAL      [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! GREATER_EQUAL   [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! EQUALS          [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! DIFFERENT       [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! AND             [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! OR              [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! ASSIGN          [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! COLONEQ         [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! SEMICOLON       [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! NEWLINE         [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! RCHAVES         [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! ELSE            [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! RPAREN          [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! COMMA           [ reduce using rule 58 (exp5 -> exp6 .) ]


state 118

    (55) exp5 -> exp5 GREATER exp6 .
    (59) exp6 -> exp6 . PLUS exp7
    (60) exp6 -> exp6 . MINUS exp7
    (58) exp5 -> exp6 .

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! reduce/reduce conflict for DPLUS resolved using rule 55 (exp5 -> exp5 GREATER exp6 .)
  ! reduce/reduce conflict for DMINUS resolved using rule 55 (exp5 -> exp5 GREATER exp6 .)
  ! reduce/reduce conflict for IF resolved using rule 55 (exp5 -> exp5 GREATER exp6 .)
  ! reduce/reduce conflict for LCHAVES resolved using rule 55 (exp5 -> exp5 GREATER exp6 .)
  ! reduce/reduce conflict for VAR resolved using rule 55 (exp5 -> exp5 GREATER exp6 .)
  ! reduce/reduce conflict for FOR resolved using rule 55 (exp5 -> exp5 GREATER exp6 .)
  ! reduce/reduce conflict for ID resolved using rule 55 (exp5 -> exp5 GREATER exp6 .)
  ! reduce/reduce conflict for RETURN resolved using rule 55 (exp5 -> exp5 GREATER exp6 .)
  ! reduce/reduce conflict for BREAK resolved using rule 55 (exp5 -> exp5 GREATER exp6 .)
  ! reduce/reduce conflict for TIMES resolved using rule 55 (exp5 -> exp5 GREATER exp6 .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 55 (exp5 -> exp5 GREATER exp6 .)
  ! reduce/reduce conflict for MOD resolved using rule 55 (exp5 -> exp5 GREATER exp6 .)
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! reduce/reduce conflict for LESS resolved using rule 55 (exp5 -> exp5 GREATER exp6 .)
  ! reduce/reduce conflict for GREATER resolved using rule 55 (exp5 -> exp5 GREATER exp6 .)
  ! reduce/reduce conflict for LESS_EQUAL resolved using rule 55 (exp5 -> exp5 GREATER exp6 .)
  ! reduce/reduce conflict for GREATER_EQUAL resolved using rule 55 (exp5 -> exp5 GREATER exp6 .)
  ! reduce/reduce conflict for EQUALS resolved using rule 55 (exp5 -> exp5 GREATER exp6 .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 55 (exp5 -> exp5 GREATER exp6 .)
  ! reduce/reduce conflict for AND resolved using rule 55 (exp5 -> exp5 GREATER exp6 .)
  ! reduce/reduce conflict for OR resolved using rule 55 (exp5 -> exp5 GREATER exp6 .)
  ! reduce/reduce conflict for ASSIGN resolved using rule 55 (exp5 -> exp5 GREATER exp6 .)
  ! reduce/reduce conflict for COLONEQ resolved using rule 55 (exp5 -> exp5 GREATER exp6 .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 55 (exp5 -> exp5 GREATER exp6 .)
  ! reduce/reduce conflict for NEWLINE resolved using rule 55 (exp5 -> exp5 GREATER exp6 .)
  ! reduce/reduce conflict for RCHAVES resolved using rule 55 (exp5 -> exp5 GREATER exp6 .)
  ! reduce/reduce conflict for ELSE resolved using rule 55 (exp5 -> exp5 GREATER exp6 .)
  ! reduce/reduce conflict for RPAREN resolved using rule 55 (exp5 -> exp5 GREATER exp6 .)
  ! reduce/reduce conflict for COMMA resolved using rule 55 (exp5 -> exp5 GREATER exp6 .)
    IF              reduce using rule 55 (exp5 -> exp5 GREATER exp6 .)
    LCHAVES         reduce using rule 55 (exp5 -> exp5 GREATER exp6 .)
    VAR             reduce using rule 55 (exp5 -> exp5 GREATER exp6 .)
    FOR             reduce using rule 55 (exp5 -> exp5 GREATER exp6 .)
    ID              reduce using rule 55 (exp5 -> exp5 GREATER exp6 .)
    RETURN          reduce using rule 55 (exp5 -> exp5 GREATER exp6 .)
    BREAK           reduce using rule 55 (exp5 -> exp5 GREATER exp6 .)
    DPLUS           reduce using rule 55 (exp5 -> exp5 GREATER exp6 .)
    DMINUS          reduce using rule 55 (exp5 -> exp5 GREATER exp6 .)
    TIMES           reduce using rule 55 (exp5 -> exp5 GREATER exp6 .)
    DIVIDE          reduce using rule 55 (exp5 -> exp5 GREATER exp6 .)
    MOD             reduce using rule 55 (exp5 -> exp5 GREATER exp6 .)
    LESS            reduce using rule 55 (exp5 -> exp5 GREATER exp6 .)
    GREATER         reduce using rule 55 (exp5 -> exp5 GREATER exp6 .)
    LESS_EQUAL      reduce using rule 55 (exp5 -> exp5 GREATER exp6 .)
    GREATER_EQUAL   reduce using rule 55 (exp5 -> exp5 GREATER exp6 .)
    EQUALS          reduce using rule 55 (exp5 -> exp5 GREATER exp6 .)
    DIFFERENT       reduce using rule 55 (exp5 -> exp5 GREATER exp6 .)
    AND             reduce using rule 55 (exp5 -> exp5 GREATER exp6 .)
    OR              reduce using rule 55 (exp5 -> exp5 GREATER exp6 .)
    ASSIGN          reduce using rule 55 (exp5 -> exp5 GREATER exp6 .)
    COLONEQ         reduce using rule 55 (exp5 -> exp5 GREATER exp6 .)
    SEMICOLON       reduce using rule 55 (exp5 -> exp5 GREATER exp6 .)
    NEWLINE         reduce using rule 55 (exp5 -> exp5 GREATER exp6 .)
    RCHAVES         reduce using rule 55 (exp5 -> exp5 GREATER exp6 .)
    ELSE            reduce using rule 55 (exp5 -> exp5 GREATER exp6 .)
    RPAREN          reduce using rule 55 (exp5 -> exp5 GREATER exp6 .)
    COMMA           reduce using rule 55 (exp5 -> exp5 GREATER exp6 .)
    PLUS            shift and go to state 89
    MINUS           shift and go to state 90

  ! PLUS            [ reduce using rule 55 (exp5 -> exp5 GREATER exp6 .) ]
  ! MINUS           [ reduce using rule 55 (exp5 -> exp5 GREATER exp6 .) ]
  ! DPLUS           [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! DMINUS          [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! IF              [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! LCHAVES         [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! VAR             [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! FOR             [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! ID              [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! RETURN          [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! BREAK           [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! TIMES           [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! DIVIDE          [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! MOD             [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! PLUS            [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! MINUS           [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! LESS            [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! GREATER         [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! LESS_EQUAL      [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! GREATER_EQUAL   [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! EQUALS          [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! DIFFERENT       [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! AND             [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! OR              [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! ASSIGN          [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! COLONEQ         [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! SEMICOLON       [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! NEWLINE         [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! RCHAVES         [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! ELSE            [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! RPAREN          [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! COMMA           [ reduce using rule 58 (exp5 -> exp6 .) ]


state 119

    (56) exp5 -> exp5 LESS_EQUAL exp6 .
    (59) exp6 -> exp6 . PLUS exp7
    (60) exp6 -> exp6 . MINUS exp7
    (58) exp5 -> exp6 .

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! reduce/reduce conflict for DPLUS resolved using rule 56 (exp5 -> exp5 LESS_EQUAL exp6 .)
  ! reduce/reduce conflict for DMINUS resolved using rule 56 (exp5 -> exp5 LESS_EQUAL exp6 .)
  ! reduce/reduce conflict for IF resolved using rule 56 (exp5 -> exp5 LESS_EQUAL exp6 .)
  ! reduce/reduce conflict for LCHAVES resolved using rule 56 (exp5 -> exp5 LESS_EQUAL exp6 .)
  ! reduce/reduce conflict for VAR resolved using rule 56 (exp5 -> exp5 LESS_EQUAL exp6 .)
  ! reduce/reduce conflict for FOR resolved using rule 56 (exp5 -> exp5 LESS_EQUAL exp6 .)
  ! reduce/reduce conflict for ID resolved using rule 56 (exp5 -> exp5 LESS_EQUAL exp6 .)
  ! reduce/reduce conflict for RETURN resolved using rule 56 (exp5 -> exp5 LESS_EQUAL exp6 .)
  ! reduce/reduce conflict for BREAK resolved using rule 56 (exp5 -> exp5 LESS_EQUAL exp6 .)
  ! reduce/reduce conflict for TIMES resolved using rule 56 (exp5 -> exp5 LESS_EQUAL exp6 .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 56 (exp5 -> exp5 LESS_EQUAL exp6 .)
  ! reduce/reduce conflict for MOD resolved using rule 56 (exp5 -> exp5 LESS_EQUAL exp6 .)
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! reduce/reduce conflict for LESS resolved using rule 56 (exp5 -> exp5 LESS_EQUAL exp6 .)
  ! reduce/reduce conflict for GREATER resolved using rule 56 (exp5 -> exp5 LESS_EQUAL exp6 .)
  ! reduce/reduce conflict for LESS_EQUAL resolved using rule 56 (exp5 -> exp5 LESS_EQUAL exp6 .)
  ! reduce/reduce conflict for GREATER_EQUAL resolved using rule 56 (exp5 -> exp5 LESS_EQUAL exp6 .)
  ! reduce/reduce conflict for EQUALS resolved using rule 56 (exp5 -> exp5 LESS_EQUAL exp6 .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 56 (exp5 -> exp5 LESS_EQUAL exp6 .)
  ! reduce/reduce conflict for AND resolved using rule 56 (exp5 -> exp5 LESS_EQUAL exp6 .)
  ! reduce/reduce conflict for OR resolved using rule 56 (exp5 -> exp5 LESS_EQUAL exp6 .)
  ! reduce/reduce conflict for ASSIGN resolved using rule 56 (exp5 -> exp5 LESS_EQUAL exp6 .)
  ! reduce/reduce conflict for COLONEQ resolved using rule 56 (exp5 -> exp5 LESS_EQUAL exp6 .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 56 (exp5 -> exp5 LESS_EQUAL exp6 .)
  ! reduce/reduce conflict for NEWLINE resolved using rule 56 (exp5 -> exp5 LESS_EQUAL exp6 .)
  ! reduce/reduce conflict for RCHAVES resolved using rule 56 (exp5 -> exp5 LESS_EQUAL exp6 .)
  ! reduce/reduce conflict for ELSE resolved using rule 56 (exp5 -> exp5 LESS_EQUAL exp6 .)
  ! reduce/reduce conflict for RPAREN resolved using rule 56 (exp5 -> exp5 LESS_EQUAL exp6 .)
  ! reduce/reduce conflict for COMMA resolved using rule 56 (exp5 -> exp5 LESS_EQUAL exp6 .)
    IF              reduce using rule 56 (exp5 -> exp5 LESS_EQUAL exp6 .)
    LCHAVES         reduce using rule 56 (exp5 -> exp5 LESS_EQUAL exp6 .)
    VAR             reduce using rule 56 (exp5 -> exp5 LESS_EQUAL exp6 .)
    FOR             reduce using rule 56 (exp5 -> exp5 LESS_EQUAL exp6 .)
    ID              reduce using rule 56 (exp5 -> exp5 LESS_EQUAL exp6 .)
    RETURN          reduce using rule 56 (exp5 -> exp5 LESS_EQUAL exp6 .)
    BREAK           reduce using rule 56 (exp5 -> exp5 LESS_EQUAL exp6 .)
    DPLUS           reduce using rule 56 (exp5 -> exp5 LESS_EQUAL exp6 .)
    DMINUS          reduce using rule 56 (exp5 -> exp5 LESS_EQUAL exp6 .)
    TIMES           reduce using rule 56 (exp5 -> exp5 LESS_EQUAL exp6 .)
    DIVIDE          reduce using rule 56 (exp5 -> exp5 LESS_EQUAL exp6 .)
    MOD             reduce using rule 56 (exp5 -> exp5 LESS_EQUAL exp6 .)
    LESS            reduce using rule 56 (exp5 -> exp5 LESS_EQUAL exp6 .)
    GREATER         reduce using rule 56 (exp5 -> exp5 LESS_EQUAL exp6 .)
    LESS_EQUAL      reduce using rule 56 (exp5 -> exp5 LESS_EQUAL exp6 .)
    GREATER_EQUAL   reduce using rule 56 (exp5 -> exp5 LESS_EQUAL exp6 .)
    EQUALS          reduce using rule 56 (exp5 -> exp5 LESS_EQUAL exp6 .)
    DIFFERENT       reduce using rule 56 (exp5 -> exp5 LESS_EQUAL exp6 .)
    AND             reduce using rule 56 (exp5 -> exp5 LESS_EQUAL exp6 .)
    OR              reduce using rule 56 (exp5 -> exp5 LESS_EQUAL exp6 .)
    ASSIGN          reduce using rule 56 (exp5 -> exp5 LESS_EQUAL exp6 .)
    COLONEQ         reduce using rule 56 (exp5 -> exp5 LESS_EQUAL exp6 .)
    SEMICOLON       reduce using rule 56 (exp5 -> exp5 LESS_EQUAL exp6 .)
    NEWLINE         reduce using rule 56 (exp5 -> exp5 LESS_EQUAL exp6 .)
    RCHAVES         reduce using rule 56 (exp5 -> exp5 LESS_EQUAL exp6 .)
    ELSE            reduce using rule 56 (exp5 -> exp5 LESS_EQUAL exp6 .)
    RPAREN          reduce using rule 56 (exp5 -> exp5 LESS_EQUAL exp6 .)
    COMMA           reduce using rule 56 (exp5 -> exp5 LESS_EQUAL exp6 .)
    PLUS            shift and go to state 89
    MINUS           shift and go to state 90

  ! PLUS            [ reduce using rule 56 (exp5 -> exp5 LESS_EQUAL exp6 .) ]
  ! MINUS           [ reduce using rule 56 (exp5 -> exp5 LESS_EQUAL exp6 .) ]
  ! DPLUS           [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! DMINUS          [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! IF              [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! LCHAVES         [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! VAR             [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! FOR             [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! ID              [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! RETURN          [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! BREAK           [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! TIMES           [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! DIVIDE          [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! MOD             [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! PLUS            [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! MINUS           [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! LESS            [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! GREATER         [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! LESS_EQUAL      [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! GREATER_EQUAL   [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! EQUALS          [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! DIFFERENT       [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! AND             [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! OR              [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! ASSIGN          [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! COLONEQ         [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! SEMICOLON       [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! NEWLINE         [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! RCHAVES         [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! ELSE            [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! RPAREN          [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! COMMA           [ reduce using rule 58 (exp5 -> exp6 .) ]


state 120

    (57) exp5 -> exp5 GREATER_EQUAL exp6 .
    (59) exp6 -> exp6 . PLUS exp7
    (60) exp6 -> exp6 . MINUS exp7
    (58) exp5 -> exp6 .

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! reduce/reduce conflict for DPLUS resolved using rule 57 (exp5 -> exp5 GREATER_EQUAL exp6 .)
  ! reduce/reduce conflict for DMINUS resolved using rule 57 (exp5 -> exp5 GREATER_EQUAL exp6 .)
  ! reduce/reduce conflict for IF resolved using rule 57 (exp5 -> exp5 GREATER_EQUAL exp6 .)
  ! reduce/reduce conflict for LCHAVES resolved using rule 57 (exp5 -> exp5 GREATER_EQUAL exp6 .)
  ! reduce/reduce conflict for VAR resolved using rule 57 (exp5 -> exp5 GREATER_EQUAL exp6 .)
  ! reduce/reduce conflict for FOR resolved using rule 57 (exp5 -> exp5 GREATER_EQUAL exp6 .)
  ! reduce/reduce conflict for ID resolved using rule 57 (exp5 -> exp5 GREATER_EQUAL exp6 .)
  ! reduce/reduce conflict for RETURN resolved using rule 57 (exp5 -> exp5 GREATER_EQUAL exp6 .)
  ! reduce/reduce conflict for BREAK resolved using rule 57 (exp5 -> exp5 GREATER_EQUAL exp6 .)
  ! reduce/reduce conflict for TIMES resolved using rule 57 (exp5 -> exp5 GREATER_EQUAL exp6 .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 57 (exp5 -> exp5 GREATER_EQUAL exp6 .)
  ! reduce/reduce conflict for MOD resolved using rule 57 (exp5 -> exp5 GREATER_EQUAL exp6 .)
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! reduce/reduce conflict for LESS resolved using rule 57 (exp5 -> exp5 GREATER_EQUAL exp6 .)
  ! reduce/reduce conflict for GREATER resolved using rule 57 (exp5 -> exp5 GREATER_EQUAL exp6 .)
  ! reduce/reduce conflict for LESS_EQUAL resolved using rule 57 (exp5 -> exp5 GREATER_EQUAL exp6 .)
  ! reduce/reduce conflict for GREATER_EQUAL resolved using rule 57 (exp5 -> exp5 GREATER_EQUAL exp6 .)
  ! reduce/reduce conflict for EQUALS resolved using rule 57 (exp5 -> exp5 GREATER_EQUAL exp6 .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 57 (exp5 -> exp5 GREATER_EQUAL exp6 .)
  ! reduce/reduce conflict for AND resolved using rule 57 (exp5 -> exp5 GREATER_EQUAL exp6 .)
  ! reduce/reduce conflict for OR resolved using rule 57 (exp5 -> exp5 GREATER_EQUAL exp6 .)
  ! reduce/reduce conflict for ASSIGN resolved using rule 57 (exp5 -> exp5 GREATER_EQUAL exp6 .)
  ! reduce/reduce conflict for COLONEQ resolved using rule 57 (exp5 -> exp5 GREATER_EQUAL exp6 .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 57 (exp5 -> exp5 GREATER_EQUAL exp6 .)
  ! reduce/reduce conflict for NEWLINE resolved using rule 57 (exp5 -> exp5 GREATER_EQUAL exp6 .)
  ! reduce/reduce conflict for RCHAVES resolved using rule 57 (exp5 -> exp5 GREATER_EQUAL exp6 .)
  ! reduce/reduce conflict for ELSE resolved using rule 57 (exp5 -> exp5 GREATER_EQUAL exp6 .)
  ! reduce/reduce conflict for RPAREN resolved using rule 57 (exp5 -> exp5 GREATER_EQUAL exp6 .)
  ! reduce/reduce conflict for COMMA resolved using rule 57 (exp5 -> exp5 GREATER_EQUAL exp6 .)
    IF              reduce using rule 57 (exp5 -> exp5 GREATER_EQUAL exp6 .)
    LCHAVES         reduce using rule 57 (exp5 -> exp5 GREATER_EQUAL exp6 .)
    VAR             reduce using rule 57 (exp5 -> exp5 GREATER_EQUAL exp6 .)
    FOR             reduce using rule 57 (exp5 -> exp5 GREATER_EQUAL exp6 .)
    ID              reduce using rule 57 (exp5 -> exp5 GREATER_EQUAL exp6 .)
    RETURN          reduce using rule 57 (exp5 -> exp5 GREATER_EQUAL exp6 .)
    BREAK           reduce using rule 57 (exp5 -> exp5 GREATER_EQUAL exp6 .)
    DPLUS           reduce using rule 57 (exp5 -> exp5 GREATER_EQUAL exp6 .)
    DMINUS          reduce using rule 57 (exp5 -> exp5 GREATER_EQUAL exp6 .)
    TIMES           reduce using rule 57 (exp5 -> exp5 GREATER_EQUAL exp6 .)
    DIVIDE          reduce using rule 57 (exp5 -> exp5 GREATER_EQUAL exp6 .)
    MOD             reduce using rule 57 (exp5 -> exp5 GREATER_EQUAL exp6 .)
    LESS            reduce using rule 57 (exp5 -> exp5 GREATER_EQUAL exp6 .)
    GREATER         reduce using rule 57 (exp5 -> exp5 GREATER_EQUAL exp6 .)
    LESS_EQUAL      reduce using rule 57 (exp5 -> exp5 GREATER_EQUAL exp6 .)
    GREATER_EQUAL   reduce using rule 57 (exp5 -> exp5 GREATER_EQUAL exp6 .)
    EQUALS          reduce using rule 57 (exp5 -> exp5 GREATER_EQUAL exp6 .)
    DIFFERENT       reduce using rule 57 (exp5 -> exp5 GREATER_EQUAL exp6 .)
    AND             reduce using rule 57 (exp5 -> exp5 GREATER_EQUAL exp6 .)
    OR              reduce using rule 57 (exp5 -> exp5 GREATER_EQUAL exp6 .)
    ASSIGN          reduce using rule 57 (exp5 -> exp5 GREATER_EQUAL exp6 .)
    COLONEQ         reduce using rule 57 (exp5 -> exp5 GREATER_EQUAL exp6 .)
    SEMICOLON       reduce using rule 57 (exp5 -> exp5 GREATER_EQUAL exp6 .)
    NEWLINE         reduce using rule 57 (exp5 -> exp5 GREATER_EQUAL exp6 .)
    RCHAVES         reduce using rule 57 (exp5 -> exp5 GREATER_EQUAL exp6 .)
    ELSE            reduce using rule 57 (exp5 -> exp5 GREATER_EQUAL exp6 .)
    RPAREN          reduce using rule 57 (exp5 -> exp5 GREATER_EQUAL exp6 .)
    COMMA           reduce using rule 57 (exp5 -> exp5 GREATER_EQUAL exp6 .)
    PLUS            shift and go to state 89
    MINUS           shift and go to state 90

  ! PLUS            [ reduce using rule 57 (exp5 -> exp5 GREATER_EQUAL exp6 .) ]
  ! MINUS           [ reduce using rule 57 (exp5 -> exp5 GREATER_EQUAL exp6 .) ]
  ! DPLUS           [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! DMINUS          [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! IF              [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! LCHAVES         [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! VAR             [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! FOR             [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! ID              [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! RETURN          [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! BREAK           [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! TIMES           [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! DIVIDE          [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! MOD             [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! PLUS            [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! MINUS           [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! LESS            [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! GREATER         [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! LESS_EQUAL      [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! GREATER_EQUAL   [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! EQUALS          [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! DIFFERENT       [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! AND             [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! OR              [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! ASSIGN          [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! COLONEQ         [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! SEMICOLON       [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! NEWLINE         [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! RCHAVES         [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! ELSE            [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! RPAREN          [ reduce using rule 58 (exp5 -> exp6 .) ]
  ! COMMA           [ reduce using rule 58 (exp5 -> exp6 .) ]


state 121

    (59) exp6 -> exp6 PLUS exp7 .
    (62) exp7 -> exp7 . TIMES exp8
    (63) exp7 -> exp7 . DIVIDE exp8
    (64) exp7 -> exp7 . MOD exp8
    (61) exp6 -> exp7 .

  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! reduce/reduce conflict for DPLUS resolved using rule 59 (exp6 -> exp6 PLUS exp7 .)
  ! reduce/reduce conflict for DMINUS resolved using rule 59 (exp6 -> exp6 PLUS exp7 .)
  ! reduce/reduce conflict for IF resolved using rule 59 (exp6 -> exp6 PLUS exp7 .)
  ! reduce/reduce conflict for LCHAVES resolved using rule 59 (exp6 -> exp6 PLUS exp7 .)
  ! reduce/reduce conflict for VAR resolved using rule 59 (exp6 -> exp6 PLUS exp7 .)
  ! reduce/reduce conflict for FOR resolved using rule 59 (exp6 -> exp6 PLUS exp7 .)
  ! reduce/reduce conflict for ID resolved using rule 59 (exp6 -> exp6 PLUS exp7 .)
  ! reduce/reduce conflict for RETURN resolved using rule 59 (exp6 -> exp6 PLUS exp7 .)
  ! reduce/reduce conflict for BREAK resolved using rule 59 (exp6 -> exp6 PLUS exp7 .)
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! reduce/reduce conflict for PLUS resolved using rule 59 (exp6 -> exp6 PLUS exp7 .)
  ! reduce/reduce conflict for MINUS resolved using rule 59 (exp6 -> exp6 PLUS exp7 .)
  ! reduce/reduce conflict for LESS resolved using rule 59 (exp6 -> exp6 PLUS exp7 .)
  ! reduce/reduce conflict for GREATER resolved using rule 59 (exp6 -> exp6 PLUS exp7 .)
  ! reduce/reduce conflict for LESS_EQUAL resolved using rule 59 (exp6 -> exp6 PLUS exp7 .)
  ! reduce/reduce conflict for GREATER_EQUAL resolved using rule 59 (exp6 -> exp6 PLUS exp7 .)
  ! reduce/reduce conflict for EQUALS resolved using rule 59 (exp6 -> exp6 PLUS exp7 .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 59 (exp6 -> exp6 PLUS exp7 .)
  ! reduce/reduce conflict for AND resolved using rule 59 (exp6 -> exp6 PLUS exp7 .)
  ! reduce/reduce conflict for OR resolved using rule 59 (exp6 -> exp6 PLUS exp7 .)
  ! reduce/reduce conflict for ASSIGN resolved using rule 59 (exp6 -> exp6 PLUS exp7 .)
  ! reduce/reduce conflict for COLONEQ resolved using rule 59 (exp6 -> exp6 PLUS exp7 .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 59 (exp6 -> exp6 PLUS exp7 .)
  ! reduce/reduce conflict for NEWLINE resolved using rule 59 (exp6 -> exp6 PLUS exp7 .)
  ! reduce/reduce conflict for RCHAVES resolved using rule 59 (exp6 -> exp6 PLUS exp7 .)
  ! reduce/reduce conflict for ELSE resolved using rule 59 (exp6 -> exp6 PLUS exp7 .)
  ! reduce/reduce conflict for RPAREN resolved using rule 59 (exp6 -> exp6 PLUS exp7 .)
  ! reduce/reduce conflict for COMMA resolved using rule 59 (exp6 -> exp6 PLUS exp7 .)
    IF              reduce using rule 59 (exp6 -> exp6 PLUS exp7 .)
    LCHAVES         reduce using rule 59 (exp6 -> exp6 PLUS exp7 .)
    VAR             reduce using rule 59 (exp6 -> exp6 PLUS exp7 .)
    FOR             reduce using rule 59 (exp6 -> exp6 PLUS exp7 .)
    ID              reduce using rule 59 (exp6 -> exp6 PLUS exp7 .)
    RETURN          reduce using rule 59 (exp6 -> exp6 PLUS exp7 .)
    BREAK           reduce using rule 59 (exp6 -> exp6 PLUS exp7 .)
    DPLUS           reduce using rule 59 (exp6 -> exp6 PLUS exp7 .)
    DMINUS          reduce using rule 59 (exp6 -> exp6 PLUS exp7 .)
    PLUS            reduce using rule 59 (exp6 -> exp6 PLUS exp7 .)
    MINUS           reduce using rule 59 (exp6 -> exp6 PLUS exp7 .)
    LESS            reduce using rule 59 (exp6 -> exp6 PLUS exp7 .)
    GREATER         reduce using rule 59 (exp6 -> exp6 PLUS exp7 .)
    LESS_EQUAL      reduce using rule 59 (exp6 -> exp6 PLUS exp7 .)
    GREATER_EQUAL   reduce using rule 59 (exp6 -> exp6 PLUS exp7 .)
    EQUALS          reduce using rule 59 (exp6 -> exp6 PLUS exp7 .)
    DIFFERENT       reduce using rule 59 (exp6 -> exp6 PLUS exp7 .)
    AND             reduce using rule 59 (exp6 -> exp6 PLUS exp7 .)
    OR              reduce using rule 59 (exp6 -> exp6 PLUS exp7 .)
    ASSIGN          reduce using rule 59 (exp6 -> exp6 PLUS exp7 .)
    COLONEQ         reduce using rule 59 (exp6 -> exp6 PLUS exp7 .)
    SEMICOLON       reduce using rule 59 (exp6 -> exp6 PLUS exp7 .)
    NEWLINE         reduce using rule 59 (exp6 -> exp6 PLUS exp7 .)
    RCHAVES         reduce using rule 59 (exp6 -> exp6 PLUS exp7 .)
    ELSE            reduce using rule 59 (exp6 -> exp6 PLUS exp7 .)
    RPAREN          reduce using rule 59 (exp6 -> exp6 PLUS exp7 .)
    COMMA           reduce using rule 59 (exp6 -> exp6 PLUS exp7 .)
    TIMES           shift and go to state 91
    DIVIDE          shift and go to state 92
    MOD             shift and go to state 93

  ! TIMES           [ reduce using rule 59 (exp6 -> exp6 PLUS exp7 .) ]
  ! DIVIDE          [ reduce using rule 59 (exp6 -> exp6 PLUS exp7 .) ]
  ! MOD             [ reduce using rule 59 (exp6 -> exp6 PLUS exp7 .) ]
  ! DPLUS           [ reduce using rule 61 (exp6 -> exp7 .) ]
  ! DMINUS          [ reduce using rule 61 (exp6 -> exp7 .) ]
  ! IF              [ reduce using rule 61 (exp6 -> exp7 .) ]
  ! LCHAVES         [ reduce using rule 61 (exp6 -> exp7 .) ]
  ! VAR             [ reduce using rule 61 (exp6 -> exp7 .) ]
  ! FOR             [ reduce using rule 61 (exp6 -> exp7 .) ]
  ! ID              [ reduce using rule 61 (exp6 -> exp7 .) ]
  ! RETURN          [ reduce using rule 61 (exp6 -> exp7 .) ]
  ! BREAK           [ reduce using rule 61 (exp6 -> exp7 .) ]
  ! TIMES           [ reduce using rule 61 (exp6 -> exp7 .) ]
  ! DIVIDE          [ reduce using rule 61 (exp6 -> exp7 .) ]
  ! MOD             [ reduce using rule 61 (exp6 -> exp7 .) ]
  ! PLUS            [ reduce using rule 61 (exp6 -> exp7 .) ]
  ! MINUS           [ reduce using rule 61 (exp6 -> exp7 .) ]
  ! LESS            [ reduce using rule 61 (exp6 -> exp7 .) ]
  ! GREATER         [ reduce using rule 61 (exp6 -> exp7 .) ]
  ! LESS_EQUAL      [ reduce using rule 61 (exp6 -> exp7 .) ]
  ! GREATER_EQUAL   [ reduce using rule 61 (exp6 -> exp7 .) ]
  ! EQUALS          [ reduce using rule 61 (exp6 -> exp7 .) ]
  ! DIFFERENT       [ reduce using rule 61 (exp6 -> exp7 .) ]
  ! AND             [ reduce using rule 61 (exp6 -> exp7 .) ]
  ! OR              [ reduce using rule 61 (exp6 -> exp7 .) ]
  ! ASSIGN          [ reduce using rule 61 (exp6 -> exp7 .) ]
  ! COLONEQ         [ reduce using rule 61 (exp6 -> exp7 .) ]
  ! SEMICOLON       [ reduce using rule 61 (exp6 -> exp7 .) ]
  ! NEWLINE         [ reduce using rule 61 (exp6 -> exp7 .) ]
  ! RCHAVES         [ reduce using rule 61 (exp6 -> exp7 .) ]
  ! ELSE            [ reduce using rule 61 (exp6 -> exp7 .) ]
  ! RPAREN          [ reduce using rule 61 (exp6 -> exp7 .) ]
  ! COMMA           [ reduce using rule 61 (exp6 -> exp7 .) ]


state 122

    (60) exp6 -> exp6 MINUS exp7 .
    (62) exp7 -> exp7 . TIMES exp8
    (63) exp7 -> exp7 . DIVIDE exp8
    (64) exp7 -> exp7 . MOD exp8
    (61) exp6 -> exp7 .

  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! reduce/reduce conflict for DPLUS resolved using rule 60 (exp6 -> exp6 MINUS exp7 .)
  ! reduce/reduce conflict for DMINUS resolved using rule 60 (exp6 -> exp6 MINUS exp7 .)
  ! reduce/reduce conflict for IF resolved using rule 60 (exp6 -> exp6 MINUS exp7 .)
  ! reduce/reduce conflict for LCHAVES resolved using rule 60 (exp6 -> exp6 MINUS exp7 .)
  ! reduce/reduce conflict for VAR resolved using rule 60 (exp6 -> exp6 MINUS exp7 .)
  ! reduce/reduce conflict for FOR resolved using rule 60 (exp6 -> exp6 MINUS exp7 .)
  ! reduce/reduce conflict for ID resolved using rule 60 (exp6 -> exp6 MINUS exp7 .)
  ! reduce/reduce conflict for RETURN resolved using rule 60 (exp6 -> exp6 MINUS exp7 .)
  ! reduce/reduce conflict for BREAK resolved using rule 60 (exp6 -> exp6 MINUS exp7 .)
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! reduce/reduce conflict for PLUS resolved using rule 60 (exp6 -> exp6 MINUS exp7 .)
  ! reduce/reduce conflict for MINUS resolved using rule 60 (exp6 -> exp6 MINUS exp7 .)
  ! reduce/reduce conflict for LESS resolved using rule 60 (exp6 -> exp6 MINUS exp7 .)
  ! reduce/reduce conflict for GREATER resolved using rule 60 (exp6 -> exp6 MINUS exp7 .)
  ! reduce/reduce conflict for LESS_EQUAL resolved using rule 60 (exp6 -> exp6 MINUS exp7 .)
  ! reduce/reduce conflict for GREATER_EQUAL resolved using rule 60 (exp6 -> exp6 MINUS exp7 .)
  ! reduce/reduce conflict for EQUALS resolved using rule 60 (exp6 -> exp6 MINUS exp7 .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 60 (exp6 -> exp6 MINUS exp7 .)
  ! reduce/reduce conflict for AND resolved using rule 60 (exp6 -> exp6 MINUS exp7 .)
  ! reduce/reduce conflict for OR resolved using rule 60 (exp6 -> exp6 MINUS exp7 .)
  ! reduce/reduce conflict for ASSIGN resolved using rule 60 (exp6 -> exp6 MINUS exp7 .)
  ! reduce/reduce conflict for COLONEQ resolved using rule 60 (exp6 -> exp6 MINUS exp7 .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 60 (exp6 -> exp6 MINUS exp7 .)
  ! reduce/reduce conflict for NEWLINE resolved using rule 60 (exp6 -> exp6 MINUS exp7 .)
  ! reduce/reduce conflict for RCHAVES resolved using rule 60 (exp6 -> exp6 MINUS exp7 .)
  ! reduce/reduce conflict for ELSE resolved using rule 60 (exp6 -> exp6 MINUS exp7 .)
  ! reduce/reduce conflict for RPAREN resolved using rule 60 (exp6 -> exp6 MINUS exp7 .)
  ! reduce/reduce conflict for COMMA resolved using rule 60 (exp6 -> exp6 MINUS exp7 .)
    IF              reduce using rule 60 (exp6 -> exp6 MINUS exp7 .)
    LCHAVES         reduce using rule 60 (exp6 -> exp6 MINUS exp7 .)
    VAR             reduce using rule 60 (exp6 -> exp6 MINUS exp7 .)
    FOR             reduce using rule 60 (exp6 -> exp6 MINUS exp7 .)
    ID              reduce using rule 60 (exp6 -> exp6 MINUS exp7 .)
    RETURN          reduce using rule 60 (exp6 -> exp6 MINUS exp7 .)
    BREAK           reduce using rule 60 (exp6 -> exp6 MINUS exp7 .)
    DPLUS           reduce using rule 60 (exp6 -> exp6 MINUS exp7 .)
    DMINUS          reduce using rule 60 (exp6 -> exp6 MINUS exp7 .)
    PLUS            reduce using rule 60 (exp6 -> exp6 MINUS exp7 .)
    MINUS           reduce using rule 60 (exp6 -> exp6 MINUS exp7 .)
    LESS            reduce using rule 60 (exp6 -> exp6 MINUS exp7 .)
    GREATER         reduce using rule 60 (exp6 -> exp6 MINUS exp7 .)
    LESS_EQUAL      reduce using rule 60 (exp6 -> exp6 MINUS exp7 .)
    GREATER_EQUAL   reduce using rule 60 (exp6 -> exp6 MINUS exp7 .)
    EQUALS          reduce using rule 60 (exp6 -> exp6 MINUS exp7 .)
    DIFFERENT       reduce using rule 60 (exp6 -> exp6 MINUS exp7 .)
    AND             reduce using rule 60 (exp6 -> exp6 MINUS exp7 .)
    OR              reduce using rule 60 (exp6 -> exp6 MINUS exp7 .)
    ASSIGN          reduce using rule 60 (exp6 -> exp6 MINUS exp7 .)
    COLONEQ         reduce using rule 60 (exp6 -> exp6 MINUS exp7 .)
    SEMICOLON       reduce using rule 60 (exp6 -> exp6 MINUS exp7 .)
    NEWLINE         reduce using rule 60 (exp6 -> exp6 MINUS exp7 .)
    RCHAVES         reduce using rule 60 (exp6 -> exp6 MINUS exp7 .)
    ELSE            reduce using rule 60 (exp6 -> exp6 MINUS exp7 .)
    RPAREN          reduce using rule 60 (exp6 -> exp6 MINUS exp7 .)
    COMMA           reduce using rule 60 (exp6 -> exp6 MINUS exp7 .)
    TIMES           shift and go to state 91
    DIVIDE          shift and go to state 92
    MOD             shift and go to state 93

  ! TIMES           [ reduce using rule 60 (exp6 -> exp6 MINUS exp7 .) ]
  ! DIVIDE          [ reduce using rule 60 (exp6 -> exp6 MINUS exp7 .) ]
  ! MOD             [ reduce using rule 60 (exp6 -> exp6 MINUS exp7 .) ]
  ! DPLUS           [ reduce using rule 61 (exp6 -> exp7 .) ]
  ! DMINUS          [ reduce using rule 61 (exp6 -> exp7 .) ]
  ! IF              [ reduce using rule 61 (exp6 -> exp7 .) ]
  ! LCHAVES         [ reduce using rule 61 (exp6 -> exp7 .) ]
  ! VAR             [ reduce using rule 61 (exp6 -> exp7 .) ]
  ! FOR             [ reduce using rule 61 (exp6 -> exp7 .) ]
  ! ID              [ reduce using rule 61 (exp6 -> exp7 .) ]
  ! RETURN          [ reduce using rule 61 (exp6 -> exp7 .) ]
  ! BREAK           [ reduce using rule 61 (exp6 -> exp7 .) ]
  ! TIMES           [ reduce using rule 61 (exp6 -> exp7 .) ]
  ! DIVIDE          [ reduce using rule 61 (exp6 -> exp7 .) ]
  ! MOD             [ reduce using rule 61 (exp6 -> exp7 .) ]
  ! PLUS            [ reduce using rule 61 (exp6 -> exp7 .) ]
  ! MINUS           [ reduce using rule 61 (exp6 -> exp7 .) ]
  ! LESS            [ reduce using rule 61 (exp6 -> exp7 .) ]
  ! GREATER         [ reduce using rule 61 (exp6 -> exp7 .) ]
  ! LESS_EQUAL      [ reduce using rule 61 (exp6 -> exp7 .) ]
  ! GREATER_EQUAL   [ reduce using rule 61 (exp6 -> exp7 .) ]
  ! EQUALS          [ reduce using rule 61 (exp6 -> exp7 .) ]
  ! DIFFERENT       [ reduce using rule 61 (exp6 -> exp7 .) ]
  ! AND             [ reduce using rule 61 (exp6 -> exp7 .) ]
  ! OR              [ reduce using rule 61 (exp6 -> exp7 .) ]
  ! ASSIGN          [ reduce using rule 61 (exp6 -> exp7 .) ]
  ! COLONEQ         [ reduce using rule 61 (exp6 -> exp7 .) ]
  ! SEMICOLON       [ reduce using rule 61 (exp6 -> exp7 .) ]
  ! NEWLINE         [ reduce using rule 61 (exp6 -> exp7 .) ]
  ! RCHAVES         [ reduce using rule 61 (exp6 -> exp7 .) ]
  ! ELSE            [ reduce using rule 61 (exp6 -> exp7 .) ]
  ! RPAREN          [ reduce using rule 61 (exp6 -> exp7 .) ]
  ! COMMA           [ reduce using rule 61 (exp6 -> exp7 .) ]


state 123

    (62) exp7 -> exp7 TIMES exp8 .
    (66) exp8 -> exp8 . DPLUS
    (67) exp8 -> exp8 . DMINUS
    (65) exp7 -> exp8 .

  ! shift/reduce conflict for DPLUS resolved as shift
  ! shift/reduce conflict for DMINUS resolved as shift
  ! shift/reduce conflict for DPLUS resolved as shift
  ! shift/reduce conflict for DMINUS resolved as shift
  ! reduce/reduce conflict for IF resolved using rule 62 (exp7 -> exp7 TIMES exp8 .)
  ! reduce/reduce conflict for LCHAVES resolved using rule 62 (exp7 -> exp7 TIMES exp8 .)
  ! reduce/reduce conflict for VAR resolved using rule 62 (exp7 -> exp7 TIMES exp8 .)
  ! reduce/reduce conflict for FOR resolved using rule 62 (exp7 -> exp7 TIMES exp8 .)
  ! reduce/reduce conflict for ID resolved using rule 62 (exp7 -> exp7 TIMES exp8 .)
  ! reduce/reduce conflict for RETURN resolved using rule 62 (exp7 -> exp7 TIMES exp8 .)
  ! reduce/reduce conflict for BREAK resolved using rule 62 (exp7 -> exp7 TIMES exp8 .)
  ! reduce/reduce conflict for TIMES resolved using rule 62 (exp7 -> exp7 TIMES exp8 .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 62 (exp7 -> exp7 TIMES exp8 .)
  ! reduce/reduce conflict for MOD resolved using rule 62 (exp7 -> exp7 TIMES exp8 .)
  ! reduce/reduce conflict for PLUS resolved using rule 62 (exp7 -> exp7 TIMES exp8 .)
  ! reduce/reduce conflict for MINUS resolved using rule 62 (exp7 -> exp7 TIMES exp8 .)
  ! reduce/reduce conflict for LESS resolved using rule 62 (exp7 -> exp7 TIMES exp8 .)
  ! reduce/reduce conflict for GREATER resolved using rule 62 (exp7 -> exp7 TIMES exp8 .)
  ! reduce/reduce conflict for LESS_EQUAL resolved using rule 62 (exp7 -> exp7 TIMES exp8 .)
  ! reduce/reduce conflict for GREATER_EQUAL resolved using rule 62 (exp7 -> exp7 TIMES exp8 .)
  ! reduce/reduce conflict for EQUALS resolved using rule 62 (exp7 -> exp7 TIMES exp8 .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 62 (exp7 -> exp7 TIMES exp8 .)
  ! reduce/reduce conflict for AND resolved using rule 62 (exp7 -> exp7 TIMES exp8 .)
  ! reduce/reduce conflict for OR resolved using rule 62 (exp7 -> exp7 TIMES exp8 .)
  ! reduce/reduce conflict for ASSIGN resolved using rule 62 (exp7 -> exp7 TIMES exp8 .)
  ! reduce/reduce conflict for COLONEQ resolved using rule 62 (exp7 -> exp7 TIMES exp8 .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 62 (exp7 -> exp7 TIMES exp8 .)
  ! reduce/reduce conflict for NEWLINE resolved using rule 62 (exp7 -> exp7 TIMES exp8 .)
  ! reduce/reduce conflict for RCHAVES resolved using rule 62 (exp7 -> exp7 TIMES exp8 .)
  ! reduce/reduce conflict for ELSE resolved using rule 62 (exp7 -> exp7 TIMES exp8 .)
  ! reduce/reduce conflict for RPAREN resolved using rule 62 (exp7 -> exp7 TIMES exp8 .)
  ! reduce/reduce conflict for COMMA resolved using rule 62 (exp7 -> exp7 TIMES exp8 .)
    IF              reduce using rule 62 (exp7 -> exp7 TIMES exp8 .)
    LCHAVES         reduce using rule 62 (exp7 -> exp7 TIMES exp8 .)
    VAR             reduce using rule 62 (exp7 -> exp7 TIMES exp8 .)
    FOR             reduce using rule 62 (exp7 -> exp7 TIMES exp8 .)
    ID              reduce using rule 62 (exp7 -> exp7 TIMES exp8 .)
    RETURN          reduce using rule 62 (exp7 -> exp7 TIMES exp8 .)
    BREAK           reduce using rule 62 (exp7 -> exp7 TIMES exp8 .)
    TIMES           reduce using rule 62 (exp7 -> exp7 TIMES exp8 .)
    DIVIDE          reduce using rule 62 (exp7 -> exp7 TIMES exp8 .)
    MOD             reduce using rule 62 (exp7 -> exp7 TIMES exp8 .)
    PLUS            reduce using rule 62 (exp7 -> exp7 TIMES exp8 .)
    MINUS           reduce using rule 62 (exp7 -> exp7 TIMES exp8 .)
    LESS            reduce using rule 62 (exp7 -> exp7 TIMES exp8 .)
    GREATER         reduce using rule 62 (exp7 -> exp7 TIMES exp8 .)
    LESS_EQUAL      reduce using rule 62 (exp7 -> exp7 TIMES exp8 .)
    GREATER_EQUAL   reduce using rule 62 (exp7 -> exp7 TIMES exp8 .)
    EQUALS          reduce using rule 62 (exp7 -> exp7 TIMES exp8 .)
    DIFFERENT       reduce using rule 62 (exp7 -> exp7 TIMES exp8 .)
    AND             reduce using rule 62 (exp7 -> exp7 TIMES exp8 .)
    OR              reduce using rule 62 (exp7 -> exp7 TIMES exp8 .)
    ASSIGN          reduce using rule 62 (exp7 -> exp7 TIMES exp8 .)
    COLONEQ         reduce using rule 62 (exp7 -> exp7 TIMES exp8 .)
    SEMICOLON       reduce using rule 62 (exp7 -> exp7 TIMES exp8 .)
    NEWLINE         reduce using rule 62 (exp7 -> exp7 TIMES exp8 .)
    RCHAVES         reduce using rule 62 (exp7 -> exp7 TIMES exp8 .)
    ELSE            reduce using rule 62 (exp7 -> exp7 TIMES exp8 .)
    RPAREN          reduce using rule 62 (exp7 -> exp7 TIMES exp8 .)
    COMMA           reduce using rule 62 (exp7 -> exp7 TIMES exp8 .)
    DPLUS           shift and go to state 94
    DMINUS          shift and go to state 95

  ! DPLUS           [ reduce using rule 62 (exp7 -> exp7 TIMES exp8 .) ]
  ! DMINUS          [ reduce using rule 62 (exp7 -> exp7 TIMES exp8 .) ]
  ! DPLUS           [ reduce using rule 65 (exp7 -> exp8 .) ]
  ! DMINUS          [ reduce using rule 65 (exp7 -> exp8 .) ]
  ! IF              [ reduce using rule 65 (exp7 -> exp8 .) ]
  ! LCHAVES         [ reduce using rule 65 (exp7 -> exp8 .) ]
  ! VAR             [ reduce using rule 65 (exp7 -> exp8 .) ]
  ! FOR             [ reduce using rule 65 (exp7 -> exp8 .) ]
  ! ID              [ reduce using rule 65 (exp7 -> exp8 .) ]
  ! RETURN          [ reduce using rule 65 (exp7 -> exp8 .) ]
  ! BREAK           [ reduce using rule 65 (exp7 -> exp8 .) ]
  ! TIMES           [ reduce using rule 65 (exp7 -> exp8 .) ]
  ! DIVIDE          [ reduce using rule 65 (exp7 -> exp8 .) ]
  ! MOD             [ reduce using rule 65 (exp7 -> exp8 .) ]
  ! PLUS            [ reduce using rule 65 (exp7 -> exp8 .) ]
  ! MINUS           [ reduce using rule 65 (exp7 -> exp8 .) ]
  ! LESS            [ reduce using rule 65 (exp7 -> exp8 .) ]
  ! GREATER         [ reduce using rule 65 (exp7 -> exp8 .) ]
  ! LESS_EQUAL      [ reduce using rule 65 (exp7 -> exp8 .) ]
  ! GREATER_EQUAL   [ reduce using rule 65 (exp7 -> exp8 .) ]
  ! EQUALS          [ reduce using rule 65 (exp7 -> exp8 .) ]
  ! DIFFERENT       [ reduce using rule 65 (exp7 -> exp8 .) ]
  ! AND             [ reduce using rule 65 (exp7 -> exp8 .) ]
  ! OR              [ reduce using rule 65 (exp7 -> exp8 .) ]
  ! ASSIGN          [ reduce using rule 65 (exp7 -> exp8 .) ]
  ! COLONEQ         [ reduce using rule 65 (exp7 -> exp8 .) ]
  ! SEMICOLON       [ reduce using rule 65 (exp7 -> exp8 .) ]
  ! NEWLINE         [ reduce using rule 65 (exp7 -> exp8 .) ]
  ! RCHAVES         [ reduce using rule 65 (exp7 -> exp8 .) ]
  ! ELSE            [ reduce using rule 65 (exp7 -> exp8 .) ]
  ! RPAREN          [ reduce using rule 65 (exp7 -> exp8 .) ]
  ! COMMA           [ reduce using rule 65 (exp7 -> exp8 .) ]


state 124

    (63) exp7 -> exp7 DIVIDE exp8 .
    (66) exp8 -> exp8 . DPLUS
    (67) exp8 -> exp8 . DMINUS
    (65) exp7 -> exp8 .

  ! shift/reduce conflict for DPLUS resolved as shift
  ! shift/reduce conflict for DMINUS resolved as shift
  ! shift/reduce conflict for DPLUS resolved as shift
  ! shift/reduce conflict for DMINUS resolved as shift
  ! reduce/reduce conflict for IF resolved using rule 63 (exp7 -> exp7 DIVIDE exp8 .)
  ! reduce/reduce conflict for LCHAVES resolved using rule 63 (exp7 -> exp7 DIVIDE exp8 .)
  ! reduce/reduce conflict for VAR resolved using rule 63 (exp7 -> exp7 DIVIDE exp8 .)
  ! reduce/reduce conflict for FOR resolved using rule 63 (exp7 -> exp7 DIVIDE exp8 .)
  ! reduce/reduce conflict for ID resolved using rule 63 (exp7 -> exp7 DIVIDE exp8 .)
  ! reduce/reduce conflict for RETURN resolved using rule 63 (exp7 -> exp7 DIVIDE exp8 .)
  ! reduce/reduce conflict for BREAK resolved using rule 63 (exp7 -> exp7 DIVIDE exp8 .)
  ! reduce/reduce conflict for TIMES resolved using rule 63 (exp7 -> exp7 DIVIDE exp8 .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 63 (exp7 -> exp7 DIVIDE exp8 .)
  ! reduce/reduce conflict for MOD resolved using rule 63 (exp7 -> exp7 DIVIDE exp8 .)
  ! reduce/reduce conflict for PLUS resolved using rule 63 (exp7 -> exp7 DIVIDE exp8 .)
  ! reduce/reduce conflict for MINUS resolved using rule 63 (exp7 -> exp7 DIVIDE exp8 .)
  ! reduce/reduce conflict for LESS resolved using rule 63 (exp7 -> exp7 DIVIDE exp8 .)
  ! reduce/reduce conflict for GREATER resolved using rule 63 (exp7 -> exp7 DIVIDE exp8 .)
  ! reduce/reduce conflict for LESS_EQUAL resolved using rule 63 (exp7 -> exp7 DIVIDE exp8 .)
  ! reduce/reduce conflict for GREATER_EQUAL resolved using rule 63 (exp7 -> exp7 DIVIDE exp8 .)
  ! reduce/reduce conflict for EQUALS resolved using rule 63 (exp7 -> exp7 DIVIDE exp8 .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 63 (exp7 -> exp7 DIVIDE exp8 .)
  ! reduce/reduce conflict for AND resolved using rule 63 (exp7 -> exp7 DIVIDE exp8 .)
  ! reduce/reduce conflict for OR resolved using rule 63 (exp7 -> exp7 DIVIDE exp8 .)
  ! reduce/reduce conflict for ASSIGN resolved using rule 63 (exp7 -> exp7 DIVIDE exp8 .)
  ! reduce/reduce conflict for COLONEQ resolved using rule 63 (exp7 -> exp7 DIVIDE exp8 .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 63 (exp7 -> exp7 DIVIDE exp8 .)
  ! reduce/reduce conflict for NEWLINE resolved using rule 63 (exp7 -> exp7 DIVIDE exp8 .)
  ! reduce/reduce conflict for RCHAVES resolved using rule 63 (exp7 -> exp7 DIVIDE exp8 .)
  ! reduce/reduce conflict for ELSE resolved using rule 63 (exp7 -> exp7 DIVIDE exp8 .)
  ! reduce/reduce conflict for RPAREN resolved using rule 63 (exp7 -> exp7 DIVIDE exp8 .)
  ! reduce/reduce conflict for COMMA resolved using rule 63 (exp7 -> exp7 DIVIDE exp8 .)
    IF              reduce using rule 63 (exp7 -> exp7 DIVIDE exp8 .)
    LCHAVES         reduce using rule 63 (exp7 -> exp7 DIVIDE exp8 .)
    VAR             reduce using rule 63 (exp7 -> exp7 DIVIDE exp8 .)
    FOR             reduce using rule 63 (exp7 -> exp7 DIVIDE exp8 .)
    ID              reduce using rule 63 (exp7 -> exp7 DIVIDE exp8 .)
    RETURN          reduce using rule 63 (exp7 -> exp7 DIVIDE exp8 .)
    BREAK           reduce using rule 63 (exp7 -> exp7 DIVIDE exp8 .)
    TIMES           reduce using rule 63 (exp7 -> exp7 DIVIDE exp8 .)
    DIVIDE          reduce using rule 63 (exp7 -> exp7 DIVIDE exp8 .)
    MOD             reduce using rule 63 (exp7 -> exp7 DIVIDE exp8 .)
    PLUS            reduce using rule 63 (exp7 -> exp7 DIVIDE exp8 .)
    MINUS           reduce using rule 63 (exp7 -> exp7 DIVIDE exp8 .)
    LESS            reduce using rule 63 (exp7 -> exp7 DIVIDE exp8 .)
    GREATER         reduce using rule 63 (exp7 -> exp7 DIVIDE exp8 .)
    LESS_EQUAL      reduce using rule 63 (exp7 -> exp7 DIVIDE exp8 .)
    GREATER_EQUAL   reduce using rule 63 (exp7 -> exp7 DIVIDE exp8 .)
    EQUALS          reduce using rule 63 (exp7 -> exp7 DIVIDE exp8 .)
    DIFFERENT       reduce using rule 63 (exp7 -> exp7 DIVIDE exp8 .)
    AND             reduce using rule 63 (exp7 -> exp7 DIVIDE exp8 .)
    OR              reduce using rule 63 (exp7 -> exp7 DIVIDE exp8 .)
    ASSIGN          reduce using rule 63 (exp7 -> exp7 DIVIDE exp8 .)
    COLONEQ         reduce using rule 63 (exp7 -> exp7 DIVIDE exp8 .)
    SEMICOLON       reduce using rule 63 (exp7 -> exp7 DIVIDE exp8 .)
    NEWLINE         reduce using rule 63 (exp7 -> exp7 DIVIDE exp8 .)
    RCHAVES         reduce using rule 63 (exp7 -> exp7 DIVIDE exp8 .)
    ELSE            reduce using rule 63 (exp7 -> exp7 DIVIDE exp8 .)
    RPAREN          reduce using rule 63 (exp7 -> exp7 DIVIDE exp8 .)
    COMMA           reduce using rule 63 (exp7 -> exp7 DIVIDE exp8 .)
    DPLUS           shift and go to state 94
    DMINUS          shift and go to state 95

  ! DPLUS           [ reduce using rule 63 (exp7 -> exp7 DIVIDE exp8 .) ]
  ! DMINUS          [ reduce using rule 63 (exp7 -> exp7 DIVIDE exp8 .) ]
  ! DPLUS           [ reduce using rule 65 (exp7 -> exp8 .) ]
  ! DMINUS          [ reduce using rule 65 (exp7 -> exp8 .) ]
  ! IF              [ reduce using rule 65 (exp7 -> exp8 .) ]
  ! LCHAVES         [ reduce using rule 65 (exp7 -> exp8 .) ]
  ! VAR             [ reduce using rule 65 (exp7 -> exp8 .) ]
  ! FOR             [ reduce using rule 65 (exp7 -> exp8 .) ]
  ! ID              [ reduce using rule 65 (exp7 -> exp8 .) ]
  ! RETURN          [ reduce using rule 65 (exp7 -> exp8 .) ]
  ! BREAK           [ reduce using rule 65 (exp7 -> exp8 .) ]
  ! TIMES           [ reduce using rule 65 (exp7 -> exp8 .) ]
  ! DIVIDE          [ reduce using rule 65 (exp7 -> exp8 .) ]
  ! MOD             [ reduce using rule 65 (exp7 -> exp8 .) ]
  ! PLUS            [ reduce using rule 65 (exp7 -> exp8 .) ]
  ! MINUS           [ reduce using rule 65 (exp7 -> exp8 .) ]
  ! LESS            [ reduce using rule 65 (exp7 -> exp8 .) ]
  ! GREATER         [ reduce using rule 65 (exp7 -> exp8 .) ]
  ! LESS_EQUAL      [ reduce using rule 65 (exp7 -> exp8 .) ]
  ! GREATER_EQUAL   [ reduce using rule 65 (exp7 -> exp8 .) ]
  ! EQUALS          [ reduce using rule 65 (exp7 -> exp8 .) ]
  ! DIFFERENT       [ reduce using rule 65 (exp7 -> exp8 .) ]
  ! AND             [ reduce using rule 65 (exp7 -> exp8 .) ]
  ! OR              [ reduce using rule 65 (exp7 -> exp8 .) ]
  ! ASSIGN          [ reduce using rule 65 (exp7 -> exp8 .) ]
  ! COLONEQ         [ reduce using rule 65 (exp7 -> exp8 .) ]
  ! SEMICOLON       [ reduce using rule 65 (exp7 -> exp8 .) ]
  ! NEWLINE         [ reduce using rule 65 (exp7 -> exp8 .) ]
  ! RCHAVES         [ reduce using rule 65 (exp7 -> exp8 .) ]
  ! ELSE            [ reduce using rule 65 (exp7 -> exp8 .) ]
  ! RPAREN          [ reduce using rule 65 (exp7 -> exp8 .) ]
  ! COMMA           [ reduce using rule 65 (exp7 -> exp8 .) ]


state 125

    (64) exp7 -> exp7 MOD exp8 .
    (66) exp8 -> exp8 . DPLUS
    (67) exp8 -> exp8 . DMINUS
    (65) exp7 -> exp8 .

  ! shift/reduce conflict for DPLUS resolved as shift
  ! shift/reduce conflict for DMINUS resolved as shift
  ! shift/reduce conflict for DPLUS resolved as shift
  ! shift/reduce conflict for DMINUS resolved as shift
  ! reduce/reduce conflict for IF resolved using rule 64 (exp7 -> exp7 MOD exp8 .)
  ! reduce/reduce conflict for LCHAVES resolved using rule 64 (exp7 -> exp7 MOD exp8 .)
  ! reduce/reduce conflict for VAR resolved using rule 64 (exp7 -> exp7 MOD exp8 .)
  ! reduce/reduce conflict for FOR resolved using rule 64 (exp7 -> exp7 MOD exp8 .)
  ! reduce/reduce conflict for ID resolved using rule 64 (exp7 -> exp7 MOD exp8 .)
  ! reduce/reduce conflict for RETURN resolved using rule 64 (exp7 -> exp7 MOD exp8 .)
  ! reduce/reduce conflict for BREAK resolved using rule 64 (exp7 -> exp7 MOD exp8 .)
  ! reduce/reduce conflict for TIMES resolved using rule 64 (exp7 -> exp7 MOD exp8 .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 64 (exp7 -> exp7 MOD exp8 .)
  ! reduce/reduce conflict for MOD resolved using rule 64 (exp7 -> exp7 MOD exp8 .)
  ! reduce/reduce conflict for PLUS resolved using rule 64 (exp7 -> exp7 MOD exp8 .)
  ! reduce/reduce conflict for MINUS resolved using rule 64 (exp7 -> exp7 MOD exp8 .)
  ! reduce/reduce conflict for LESS resolved using rule 64 (exp7 -> exp7 MOD exp8 .)
  ! reduce/reduce conflict for GREATER resolved using rule 64 (exp7 -> exp7 MOD exp8 .)
  ! reduce/reduce conflict for LESS_EQUAL resolved using rule 64 (exp7 -> exp7 MOD exp8 .)
  ! reduce/reduce conflict for GREATER_EQUAL resolved using rule 64 (exp7 -> exp7 MOD exp8 .)
  ! reduce/reduce conflict for EQUALS resolved using rule 64 (exp7 -> exp7 MOD exp8 .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 64 (exp7 -> exp7 MOD exp8 .)
  ! reduce/reduce conflict for AND resolved using rule 64 (exp7 -> exp7 MOD exp8 .)
  ! reduce/reduce conflict for OR resolved using rule 64 (exp7 -> exp7 MOD exp8 .)
  ! reduce/reduce conflict for ASSIGN resolved using rule 64 (exp7 -> exp7 MOD exp8 .)
  ! reduce/reduce conflict for COLONEQ resolved using rule 64 (exp7 -> exp7 MOD exp8 .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 64 (exp7 -> exp7 MOD exp8 .)
  ! reduce/reduce conflict for NEWLINE resolved using rule 64 (exp7 -> exp7 MOD exp8 .)
  ! reduce/reduce conflict for RCHAVES resolved using rule 64 (exp7 -> exp7 MOD exp8 .)
  ! reduce/reduce conflict for ELSE resolved using rule 64 (exp7 -> exp7 MOD exp8 .)
  ! reduce/reduce conflict for RPAREN resolved using rule 64 (exp7 -> exp7 MOD exp8 .)
  ! reduce/reduce conflict for COMMA resolved using rule 64 (exp7 -> exp7 MOD exp8 .)
    IF              reduce using rule 64 (exp7 -> exp7 MOD exp8 .)
    LCHAVES         reduce using rule 64 (exp7 -> exp7 MOD exp8 .)
    VAR             reduce using rule 64 (exp7 -> exp7 MOD exp8 .)
    FOR             reduce using rule 64 (exp7 -> exp7 MOD exp8 .)
    ID              reduce using rule 64 (exp7 -> exp7 MOD exp8 .)
    RETURN          reduce using rule 64 (exp7 -> exp7 MOD exp8 .)
    BREAK           reduce using rule 64 (exp7 -> exp7 MOD exp8 .)
    TIMES           reduce using rule 64 (exp7 -> exp7 MOD exp8 .)
    DIVIDE          reduce using rule 64 (exp7 -> exp7 MOD exp8 .)
    MOD             reduce using rule 64 (exp7 -> exp7 MOD exp8 .)
    PLUS            reduce using rule 64 (exp7 -> exp7 MOD exp8 .)
    MINUS           reduce using rule 64 (exp7 -> exp7 MOD exp8 .)
    LESS            reduce using rule 64 (exp7 -> exp7 MOD exp8 .)
    GREATER         reduce using rule 64 (exp7 -> exp7 MOD exp8 .)
    LESS_EQUAL      reduce using rule 64 (exp7 -> exp7 MOD exp8 .)
    GREATER_EQUAL   reduce using rule 64 (exp7 -> exp7 MOD exp8 .)
    EQUALS          reduce using rule 64 (exp7 -> exp7 MOD exp8 .)
    DIFFERENT       reduce using rule 64 (exp7 -> exp7 MOD exp8 .)
    AND             reduce using rule 64 (exp7 -> exp7 MOD exp8 .)
    OR              reduce using rule 64 (exp7 -> exp7 MOD exp8 .)
    ASSIGN          reduce using rule 64 (exp7 -> exp7 MOD exp8 .)
    COLONEQ         reduce using rule 64 (exp7 -> exp7 MOD exp8 .)
    SEMICOLON       reduce using rule 64 (exp7 -> exp7 MOD exp8 .)
    NEWLINE         reduce using rule 64 (exp7 -> exp7 MOD exp8 .)
    RCHAVES         reduce using rule 64 (exp7 -> exp7 MOD exp8 .)
    ELSE            reduce using rule 64 (exp7 -> exp7 MOD exp8 .)
    RPAREN          reduce using rule 64 (exp7 -> exp7 MOD exp8 .)
    COMMA           reduce using rule 64 (exp7 -> exp7 MOD exp8 .)
    DPLUS           shift and go to state 94
    DMINUS          shift and go to state 95

  ! DPLUS           [ reduce using rule 64 (exp7 -> exp7 MOD exp8 .) ]
  ! DMINUS          [ reduce using rule 64 (exp7 -> exp7 MOD exp8 .) ]
  ! DPLUS           [ reduce using rule 65 (exp7 -> exp8 .) ]
  ! DMINUS          [ reduce using rule 65 (exp7 -> exp8 .) ]
  ! IF              [ reduce using rule 65 (exp7 -> exp8 .) ]
  ! LCHAVES         [ reduce using rule 65 (exp7 -> exp8 .) ]
  ! VAR             [ reduce using rule 65 (exp7 -> exp8 .) ]
  ! FOR             [ reduce using rule 65 (exp7 -> exp8 .) ]
  ! ID              [ reduce using rule 65 (exp7 -> exp8 .) ]
  ! RETURN          [ reduce using rule 65 (exp7 -> exp8 .) ]
  ! BREAK           [ reduce using rule 65 (exp7 -> exp8 .) ]
  ! TIMES           [ reduce using rule 65 (exp7 -> exp8 .) ]
  ! DIVIDE          [ reduce using rule 65 (exp7 -> exp8 .) ]
  ! MOD             [ reduce using rule 65 (exp7 -> exp8 .) ]
  ! PLUS            [ reduce using rule 65 (exp7 -> exp8 .) ]
  ! MINUS           [ reduce using rule 65 (exp7 -> exp8 .) ]
  ! LESS            [ reduce using rule 65 (exp7 -> exp8 .) ]
  ! GREATER         [ reduce using rule 65 (exp7 -> exp8 .) ]
  ! LESS_EQUAL      [ reduce using rule 65 (exp7 -> exp8 .) ]
  ! GREATER_EQUAL   [ reduce using rule 65 (exp7 -> exp8 .) ]
  ! EQUALS          [ reduce using rule 65 (exp7 -> exp8 .) ]
  ! DIFFERENT       [ reduce using rule 65 (exp7 -> exp8 .) ]
  ! AND             [ reduce using rule 65 (exp7 -> exp8 .) ]
  ! OR              [ reduce using rule 65 (exp7 -> exp8 .) ]
  ! ASSIGN          [ reduce using rule 65 (exp7 -> exp8 .) ]
  ! COLONEQ         [ reduce using rule 65 (exp7 -> exp8 .) ]
  ! SEMICOLON       [ reduce using rule 65 (exp7 -> exp8 .) ]
  ! NEWLINE         [ reduce using rule 65 (exp7 -> exp8 .) ]
  ! RCHAVES         [ reduce using rule 65 (exp7 -> exp8 .) ]
  ! ELSE            [ reduce using rule 65 (exp7 -> exp8 .) ]
  ! RPAREN          [ reduce using rule 65 (exp7 -> exp8 .) ]
  ! COMMA           [ reduce using rule 65 (exp7 -> exp8 .) ]


state 126

    (35) declaration -> VAR ID type ASSIGN . exp
    (38) declaration -> VAR ID type ASSIGN . exp SEMICOLON
    (43) exp -> . exp1
    (44) exp1 -> . exp1 ASSIGN exp2
    (45) exp1 -> . exp1 COLONEQ exp2
    (46) exp1 -> . exp2
    (47) exp2 -> . exp2 OR exp3
    (48) exp2 -> . exp3
    (49) exp3 -> . exp3 AND exp4
    (50) exp3 -> . exp4
    (51) exp4 -> . exp4 EQUALS exp5
    (52) exp4 -> . exp4 DIFFERENT exp5
    (53) exp4 -> . exp5
    (54) exp5 -> . exp5 LESS exp6
    (55) exp5 -> . exp5 GREATER exp6
    (56) exp5 -> . exp5 LESS_EQUAL exp6
    (57) exp5 -> . exp5 GREATER_EQUAL exp6
    (58) exp5 -> . exp6
    (59) exp6 -> . exp6 PLUS exp7
    (60) exp6 -> . exp6 MINUS exp7
    (61) exp6 -> . exp7
    (62) exp7 -> . exp7 TIMES exp8
    (63) exp7 -> . exp7 DIVIDE exp8
    (64) exp7 -> . exp7 MOD exp8
    (65) exp7 -> . exp8
    (66) exp8 -> . exp8 DPLUS
    (67) exp8 -> . exp8 DMINUS
    (68) exp8 -> . NOT exp8
    (69) exp8 -> . exp9
    (70) exp9 -> . NUMBER
    (71) exp9 -> . STRING
    (72) exp9 -> . ID
    (73) exp9 -> . TRUE
    (74) exp9 -> . FALSE
    (75) exp9 -> . LPAREN exp RPAREN
    (76) exp9 -> . exp

    NOT             shift and go to state 56
    NUMBER          shift and go to state 58
    STRING          shift and go to state 59
    ID              shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    LPAREN          shift and go to state 68

    exp                            shift and go to state 137
    exp1                           shift and go to state 48
    exp2                           shift and go to state 49
    exp3                           shift and go to state 50
    exp4                           shift and go to state 51
    exp5                           shift and go to state 52
    exp6                           shift and go to state 53
    exp7                           shift and go to state 54
    exp8                           shift and go to state 55
    exp9                           shift and go to state 57

state 127

    (36) declaration -> VAR ID type COLONEQ . exp
    (39) declaration -> VAR ID type COLONEQ . exp SEMICOLON
    (43) exp -> . exp1
    (44) exp1 -> . exp1 ASSIGN exp2
    (45) exp1 -> . exp1 COLONEQ exp2
    (46) exp1 -> . exp2
    (47) exp2 -> . exp2 OR exp3
    (48) exp2 -> . exp3
    (49) exp3 -> . exp3 AND exp4
    (50) exp3 -> . exp4
    (51) exp4 -> . exp4 EQUALS exp5
    (52) exp4 -> . exp4 DIFFERENT exp5
    (53) exp4 -> . exp5
    (54) exp5 -> . exp5 LESS exp6
    (55) exp5 -> . exp5 GREATER exp6
    (56) exp5 -> . exp5 LESS_EQUAL exp6
    (57) exp5 -> . exp5 GREATER_EQUAL exp6
    (58) exp5 -> . exp6
    (59) exp6 -> . exp6 PLUS exp7
    (60) exp6 -> . exp6 MINUS exp7
    (61) exp6 -> . exp7
    (62) exp7 -> . exp7 TIMES exp8
    (63) exp7 -> . exp7 DIVIDE exp8
    (64) exp7 -> . exp7 MOD exp8
    (65) exp7 -> . exp8
    (66) exp8 -> . exp8 DPLUS
    (67) exp8 -> . exp8 DMINUS
    (68) exp8 -> . NOT exp8
    (69) exp8 -> . exp9
    (70) exp9 -> . NUMBER
    (71) exp9 -> . STRING
    (72) exp9 -> . ID
    (73) exp9 -> . TRUE
    (74) exp9 -> . FALSE
    (75) exp9 -> . LPAREN exp RPAREN
    (76) exp9 -> . exp

    NOT             shift and go to state 56
    NUMBER          shift and go to state 58
    STRING          shift and go to state 59
    ID              shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    LPAREN          shift and go to state 68

    exp                            shift and go to state 138
    exp1                           shift and go to state 48
    exp2                           shift and go to state 49
    exp3                           shift and go to state 50
    exp4                           shift and go to state 51
    exp5                           shift and go to state 52
    exp6                           shift and go to state 53
    exp7                           shift and go to state 54
    exp8                           shift and go to state 55
    exp9                           shift and go to state 57

state 128

    (37) declaration -> VAR ID type SEMICOLON .

    NEWLINE         reduce using rule 37 (declaration -> VAR ID type SEMICOLON .)
    RCHAVES         reduce using rule 37 (declaration -> VAR ID type SEMICOLON .)
    ELSE            reduce using rule 37 (declaration -> VAR ID type SEMICOLON .)


state 129

    (83) callFunc -> ID LPAREN params RPAREN .
    (85) callFunc -> ID LPAREN params RPAREN . SEMICOLON

    NEWLINE         reduce using rule 83 (callFunc -> ID LPAREN params RPAREN .)
    RCHAVES         reduce using rule 83 (callFunc -> ID LPAREN params RPAREN .)
    ELSE            reduce using rule 83 (callFunc -> ID LPAREN params RPAREN .)
    SEMICOLON       shift and go to state 139


state 130

    (86) callFunc -> ID LPAREN RPAREN SEMICOLON .

    NEWLINE         reduce using rule 86 (callFunc -> ID LPAREN RPAREN SEMICOLON .)
    RCHAVES         reduce using rule 86 (callFunc -> ID LPAREN RPAREN SEMICOLON .)
    ELSE            reduce using rule 86 (callFunc -> ID LPAREN RPAREN SEMICOLON .)


state 131

    (91) params -> exp COMMA . params
    (91) params -> . exp COMMA params
    (92) params -> . exp
    (43) exp -> . exp1
    (44) exp1 -> . exp1 ASSIGN exp2
    (45) exp1 -> . exp1 COLONEQ exp2
    (46) exp1 -> . exp2
    (47) exp2 -> . exp2 OR exp3
    (48) exp2 -> . exp3
    (49) exp3 -> . exp3 AND exp4
    (50) exp3 -> . exp4
    (51) exp4 -> . exp4 EQUALS exp5
    (52) exp4 -> . exp4 DIFFERENT exp5
    (53) exp4 -> . exp5
    (54) exp5 -> . exp5 LESS exp6
    (55) exp5 -> . exp5 GREATER exp6
    (56) exp5 -> . exp5 LESS_EQUAL exp6
    (57) exp5 -> . exp5 GREATER_EQUAL exp6
    (58) exp5 -> . exp6
    (59) exp6 -> . exp6 PLUS exp7
    (60) exp6 -> . exp6 MINUS exp7
    (61) exp6 -> . exp7
    (62) exp7 -> . exp7 TIMES exp8
    (63) exp7 -> . exp7 DIVIDE exp8
    (64) exp7 -> . exp7 MOD exp8
    (65) exp7 -> . exp8
    (66) exp8 -> . exp8 DPLUS
    (67) exp8 -> . exp8 DMINUS
    (68) exp8 -> . NOT exp8
    (69) exp8 -> . exp9
    (70) exp9 -> . NUMBER
    (71) exp9 -> . STRING
    (72) exp9 -> . ID
    (73) exp9 -> . TRUE
    (74) exp9 -> . FALSE
    (75) exp9 -> . LPAREN exp RPAREN
    (76) exp9 -> . exp

    NOT             shift and go to state 56
    NUMBER          shift and go to state 58
    STRING          shift and go to state 59
    ID              shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    LPAREN          shift and go to state 68

    exp                            shift and go to state 101
    params                         shift and go to state 140
    exp1                           shift and go to state 48
    exp2                           shift and go to state 49
    exp3                           shift and go to state 50
    exp4                           shift and go to state 51
    exp5                           shift and go to state 52
    exp6                           shift and go to state 53
    exp7                           shift and go to state 54
    exp8                           shift and go to state 55
    exp9                           shift and go to state 57

state 132

    (87) callFuncP -> ID DOT ID LPAREN . params RPAREN
    (88) callFuncP -> ID DOT ID LPAREN . RPAREN
    (89) callFuncP -> ID DOT ID LPAREN . params RPAREN SEMICOLON
    (90) callFuncP -> ID DOT ID LPAREN . RPAREN SEMICOLON
    (91) params -> . exp COMMA params
    (92) params -> . exp
    (43) exp -> . exp1
    (44) exp1 -> . exp1 ASSIGN exp2
    (45) exp1 -> . exp1 COLONEQ exp2
    (46) exp1 -> . exp2
    (47) exp2 -> . exp2 OR exp3
    (48) exp2 -> . exp3
    (49) exp3 -> . exp3 AND exp4
    (50) exp3 -> . exp4
    (51) exp4 -> . exp4 EQUALS exp5
    (52) exp4 -> . exp4 DIFFERENT exp5
    (53) exp4 -> . exp5
    (54) exp5 -> . exp5 LESS exp6
    (55) exp5 -> . exp5 GREATER exp6
    (56) exp5 -> . exp5 LESS_EQUAL exp6
    (57) exp5 -> . exp5 GREATER_EQUAL exp6
    (58) exp5 -> . exp6
    (59) exp6 -> . exp6 PLUS exp7
    (60) exp6 -> . exp6 MINUS exp7
    (61) exp6 -> . exp7
    (62) exp7 -> . exp7 TIMES exp8
    (63) exp7 -> . exp7 DIVIDE exp8
    (64) exp7 -> . exp7 MOD exp8
    (65) exp7 -> . exp8
    (66) exp8 -> . exp8 DPLUS
    (67) exp8 -> . exp8 DMINUS
    (68) exp8 -> . NOT exp8
    (69) exp8 -> . exp9
    (70) exp9 -> . NUMBER
    (71) exp9 -> . STRING
    (72) exp9 -> . ID
    (73) exp9 -> . TRUE
    (74) exp9 -> . FALSE
    (75) exp9 -> . LPAREN exp RPAREN
    (76) exp9 -> . exp

    RPAREN          shift and go to state 142
    NOT             shift and go to state 56
    NUMBER          shift and go to state 58
    STRING          shift and go to state 59
    ID              shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    LPAREN          shift and go to state 68

    params                         shift and go to state 141
    exp                            shift and go to state 101
    exp1                           shift and go to state 48
    exp2                           shift and go to state 49
    exp3                           shift and go to state 50
    exp4                           shift and go to state 51
    exp5                           shift and go to state 52
    exp6                           shift and go to state 53
    exp7                           shift and go to state 54
    exp8                           shift and go to state 55
    exp9                           shift and go to state 57

state 133

    (33) for -> FOR exp SEMICOLON exp . SEMICOLON exp body
    (76) exp9 -> exp .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 143
    TIMES           reduce using rule 76 (exp9 -> exp .)
    DIVIDE          reduce using rule 76 (exp9 -> exp .)
    MOD             reduce using rule 76 (exp9 -> exp .)
    PLUS            reduce using rule 76 (exp9 -> exp .)
    MINUS           reduce using rule 76 (exp9 -> exp .)
    LESS            reduce using rule 76 (exp9 -> exp .)
    GREATER         reduce using rule 76 (exp9 -> exp .)
    LESS_EQUAL      reduce using rule 76 (exp9 -> exp .)
    GREATER_EQUAL   reduce using rule 76 (exp9 -> exp .)
    EQUALS          reduce using rule 76 (exp9 -> exp .)
    DIFFERENT       reduce using rule 76 (exp9 -> exp .)
    AND             reduce using rule 76 (exp9 -> exp .)
    OR              reduce using rule 76 (exp9 -> exp .)
    ASSIGN          reduce using rule 76 (exp9 -> exp .)
    COLONEQ         reduce using rule 76 (exp9 -> exp .)
    DPLUS           reduce using rule 76 (exp9 -> exp .)
    DMINUS          reduce using rule 76 (exp9 -> exp .)

  ! SEMICOLON       [ reduce using rule 76 (exp9 -> exp .) ]


state 134

    (75) exp9 -> LPAREN exp RPAREN .

    SEMICOLON       reduce using rule 75 (exp9 -> LPAREN exp RPAREN .)
    LCHAVES         reduce using rule 75 (exp9 -> LPAREN exp RPAREN .)
    DPLUS           reduce using rule 75 (exp9 -> LPAREN exp RPAREN .)
    DMINUS          reduce using rule 75 (exp9 -> LPAREN exp RPAREN .)
    TIMES           reduce using rule 75 (exp9 -> LPAREN exp RPAREN .)
    DIVIDE          reduce using rule 75 (exp9 -> LPAREN exp RPAREN .)
    MOD             reduce using rule 75 (exp9 -> LPAREN exp RPAREN .)
    PLUS            reduce using rule 75 (exp9 -> LPAREN exp RPAREN .)
    MINUS           reduce using rule 75 (exp9 -> LPAREN exp RPAREN .)
    LESS            reduce using rule 75 (exp9 -> LPAREN exp RPAREN .)
    GREATER         reduce using rule 75 (exp9 -> LPAREN exp RPAREN .)
    LESS_EQUAL      reduce using rule 75 (exp9 -> LPAREN exp RPAREN .)
    GREATER_EQUAL   reduce using rule 75 (exp9 -> LPAREN exp RPAREN .)
    EQUALS          reduce using rule 75 (exp9 -> LPAREN exp RPAREN .)
    DIFFERENT       reduce using rule 75 (exp9 -> LPAREN exp RPAREN .)
    AND             reduce using rule 75 (exp9 -> LPAREN exp RPAREN .)
    OR              reduce using rule 75 (exp9 -> LPAREN exp RPAREN .)
    ASSIGN          reduce using rule 75 (exp9 -> LPAREN exp RPAREN .)
    COLONEQ         reduce using rule 75 (exp9 -> LPAREN exp RPAREN .)
    NEWLINE         reduce using rule 75 (exp9 -> LPAREN exp RPAREN .)
    RCHAVES         reduce using rule 75 (exp9 -> LPAREN exp RPAREN .)
    ELSE            reduce using rule 75 (exp9 -> LPAREN exp RPAREN .)
    RPAREN          reduce using rule 75 (exp9 -> LPAREN exp RPAREN .)
    IF              reduce using rule 75 (exp9 -> LPAREN exp RPAREN .)
    VAR             reduce using rule 75 (exp9 -> LPAREN exp RPAREN .)
    FOR             reduce using rule 75 (exp9 -> LPAREN exp RPAREN .)
    ID              reduce using rule 75 (exp9 -> LPAREN exp RPAREN .)
    RETURN          reduce using rule 75 (exp9 -> LPAREN exp RPAREN .)
    BREAK           reduce using rule 75 (exp9 -> LPAREN exp RPAREN .)
    COMMA           reduce using rule 75 (exp9 -> LPAREN exp RPAREN .)


state 135

    (21) statement1 -> IF LPAREN exp RPAREN body . ELSE body
    (24) statement1 -> IF LPAREN exp RPAREN body .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 144
    NEWLINE         reduce using rule 24 (statement1 -> IF LPAREN exp RPAREN body .)
    RCHAVES         reduce using rule 24 (statement1 -> IF LPAREN exp RPAREN body .)

  ! ELSE            [ reduce using rule 24 (statement1 -> IF LPAREN exp RPAREN body .) ]


state 136

    (22) statement1 -> IF exp statement1 ELSE body .

    NEWLINE         reduce using rule 22 (statement1 -> IF exp statement1 ELSE body .)
    RCHAVES         reduce using rule 22 (statement1 -> IF exp statement1 ELSE body .)
    ELSE            reduce using rule 22 (statement1 -> IF exp statement1 ELSE body .)


state 137

    (35) declaration -> VAR ID type ASSIGN exp .
    (38) declaration -> VAR ID type ASSIGN exp . SEMICOLON
    (76) exp9 -> exp .

  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! reduce/reduce conflict for NEWLINE resolved using rule 35 (declaration -> VAR ID type ASSIGN exp .)
  ! reduce/reduce conflict for RCHAVES resolved using rule 35 (declaration -> VAR ID type ASSIGN exp .)
  ! reduce/reduce conflict for ELSE resolved using rule 35 (declaration -> VAR ID type ASSIGN exp .)
    NEWLINE         reduce using rule 35 (declaration -> VAR ID type ASSIGN exp .)
    RCHAVES         reduce using rule 35 (declaration -> VAR ID type ASSIGN exp .)
    ELSE            reduce using rule 35 (declaration -> VAR ID type ASSIGN exp .)
    SEMICOLON       shift and go to state 145
    TIMES           reduce using rule 76 (exp9 -> exp .)
    DIVIDE          reduce using rule 76 (exp9 -> exp .)
    MOD             reduce using rule 76 (exp9 -> exp .)
    PLUS            reduce using rule 76 (exp9 -> exp .)
    MINUS           reduce using rule 76 (exp9 -> exp .)
    LESS            reduce using rule 76 (exp9 -> exp .)
    GREATER         reduce using rule 76 (exp9 -> exp .)
    LESS_EQUAL      reduce using rule 76 (exp9 -> exp .)
    GREATER_EQUAL   reduce using rule 76 (exp9 -> exp .)
    EQUALS          reduce using rule 76 (exp9 -> exp .)
    DIFFERENT       reduce using rule 76 (exp9 -> exp .)
    AND             reduce using rule 76 (exp9 -> exp .)
    OR              reduce using rule 76 (exp9 -> exp .)
    ASSIGN          reduce using rule 76 (exp9 -> exp .)
    COLONEQ         reduce using rule 76 (exp9 -> exp .)
    DPLUS           reduce using rule 76 (exp9 -> exp .)
    DMINUS          reduce using rule 76 (exp9 -> exp .)

  ! SEMICOLON       [ reduce using rule 76 (exp9 -> exp .) ]
  ! NEWLINE         [ reduce using rule 76 (exp9 -> exp .) ]
  ! RCHAVES         [ reduce using rule 76 (exp9 -> exp .) ]
  ! ELSE            [ reduce using rule 76 (exp9 -> exp .) ]


state 138

    (36) declaration -> VAR ID type COLONEQ exp .
    (39) declaration -> VAR ID type COLONEQ exp . SEMICOLON
    (76) exp9 -> exp .

  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! reduce/reduce conflict for NEWLINE resolved using rule 36 (declaration -> VAR ID type COLONEQ exp .)
  ! reduce/reduce conflict for RCHAVES resolved using rule 36 (declaration -> VAR ID type COLONEQ exp .)
  ! reduce/reduce conflict for ELSE resolved using rule 36 (declaration -> VAR ID type COLONEQ exp .)
    NEWLINE         reduce using rule 36 (declaration -> VAR ID type COLONEQ exp .)
    RCHAVES         reduce using rule 36 (declaration -> VAR ID type COLONEQ exp .)
    ELSE            reduce using rule 36 (declaration -> VAR ID type COLONEQ exp .)
    SEMICOLON       shift and go to state 146
    TIMES           reduce using rule 76 (exp9 -> exp .)
    DIVIDE          reduce using rule 76 (exp9 -> exp .)
    MOD             reduce using rule 76 (exp9 -> exp .)
    PLUS            reduce using rule 76 (exp9 -> exp .)
    MINUS           reduce using rule 76 (exp9 -> exp .)
    LESS            reduce using rule 76 (exp9 -> exp .)
    GREATER         reduce using rule 76 (exp9 -> exp .)
    LESS_EQUAL      reduce using rule 76 (exp9 -> exp .)
    GREATER_EQUAL   reduce using rule 76 (exp9 -> exp .)
    EQUALS          reduce using rule 76 (exp9 -> exp .)
    DIFFERENT       reduce using rule 76 (exp9 -> exp .)
    AND             reduce using rule 76 (exp9 -> exp .)
    OR              reduce using rule 76 (exp9 -> exp .)
    ASSIGN          reduce using rule 76 (exp9 -> exp .)
    COLONEQ         reduce using rule 76 (exp9 -> exp .)
    DPLUS           reduce using rule 76 (exp9 -> exp .)
    DMINUS          reduce using rule 76 (exp9 -> exp .)

  ! SEMICOLON       [ reduce using rule 76 (exp9 -> exp .) ]
  ! NEWLINE         [ reduce using rule 76 (exp9 -> exp .) ]
  ! RCHAVES         [ reduce using rule 76 (exp9 -> exp .) ]
  ! ELSE            [ reduce using rule 76 (exp9 -> exp .) ]


state 139

    (85) callFunc -> ID LPAREN params RPAREN SEMICOLON .

    NEWLINE         reduce using rule 85 (callFunc -> ID LPAREN params RPAREN SEMICOLON .)
    RCHAVES         reduce using rule 85 (callFunc -> ID LPAREN params RPAREN SEMICOLON .)
    ELSE            reduce using rule 85 (callFunc -> ID LPAREN params RPAREN SEMICOLON .)


state 140

    (91) params -> exp COMMA params .

    RPAREN          reduce using rule 91 (params -> exp COMMA params .)


state 141

    (87) callFuncP -> ID DOT ID LPAREN params . RPAREN
    (89) callFuncP -> ID DOT ID LPAREN params . RPAREN SEMICOLON

    RPAREN          shift and go to state 147


state 142

    (88) callFuncP -> ID DOT ID LPAREN RPAREN .
    (90) callFuncP -> ID DOT ID LPAREN RPAREN . SEMICOLON

    NEWLINE         reduce using rule 88 (callFuncP -> ID DOT ID LPAREN RPAREN .)
    RCHAVES         reduce using rule 88 (callFuncP -> ID DOT ID LPAREN RPAREN .)
    ELSE            reduce using rule 88 (callFuncP -> ID DOT ID LPAREN RPAREN .)
    SEMICOLON       shift and go to state 148


state 143

    (33) for -> FOR exp SEMICOLON exp SEMICOLON . exp body
    (43) exp -> . exp1
    (44) exp1 -> . exp1 ASSIGN exp2
    (45) exp1 -> . exp1 COLONEQ exp2
    (46) exp1 -> . exp2
    (47) exp2 -> . exp2 OR exp3
    (48) exp2 -> . exp3
    (49) exp3 -> . exp3 AND exp4
    (50) exp3 -> . exp4
    (51) exp4 -> . exp4 EQUALS exp5
    (52) exp4 -> . exp4 DIFFERENT exp5
    (53) exp4 -> . exp5
    (54) exp5 -> . exp5 LESS exp6
    (55) exp5 -> . exp5 GREATER exp6
    (56) exp5 -> . exp5 LESS_EQUAL exp6
    (57) exp5 -> . exp5 GREATER_EQUAL exp6
    (58) exp5 -> . exp6
    (59) exp6 -> . exp6 PLUS exp7
    (60) exp6 -> . exp6 MINUS exp7
    (61) exp6 -> . exp7
    (62) exp7 -> . exp7 TIMES exp8
    (63) exp7 -> . exp7 DIVIDE exp8
    (64) exp7 -> . exp7 MOD exp8
    (65) exp7 -> . exp8
    (66) exp8 -> . exp8 DPLUS
    (67) exp8 -> . exp8 DMINUS
    (68) exp8 -> . NOT exp8
    (69) exp8 -> . exp9
    (70) exp9 -> . NUMBER
    (71) exp9 -> . STRING
    (72) exp9 -> . ID
    (73) exp9 -> . TRUE
    (74) exp9 -> . FALSE
    (75) exp9 -> . LPAREN exp RPAREN
    (76) exp9 -> . exp

    NOT             shift and go to state 56
    NUMBER          shift and go to state 58
    STRING          shift and go to state 59
    ID              shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    LPAREN          shift and go to state 68

    exp                            shift and go to state 149
    exp1                           shift and go to state 48
    exp2                           shift and go to state 49
    exp3                           shift and go to state 50
    exp4                           shift and go to state 51
    exp5                           shift and go to state 52
    exp6                           shift and go to state 53
    exp7                           shift and go to state 54
    exp8                           shift and go to state 55
    exp9                           shift and go to state 57

state 144

    (21) statement1 -> IF LPAREN exp RPAREN body ELSE . body
    (15) body -> . LCHAVES stms RCHAVES
    (16) body -> . LCHAVES RCHAVES

    LCHAVES         shift and go to state 16

    body                           shift and go to state 150

state 145

    (38) declaration -> VAR ID type ASSIGN exp SEMICOLON .

    NEWLINE         reduce using rule 38 (declaration -> VAR ID type ASSIGN exp SEMICOLON .)
    RCHAVES         reduce using rule 38 (declaration -> VAR ID type ASSIGN exp SEMICOLON .)
    ELSE            reduce using rule 38 (declaration -> VAR ID type ASSIGN exp SEMICOLON .)


state 146

    (39) declaration -> VAR ID type COLONEQ exp SEMICOLON .

    NEWLINE         reduce using rule 39 (declaration -> VAR ID type COLONEQ exp SEMICOLON .)
    RCHAVES         reduce using rule 39 (declaration -> VAR ID type COLONEQ exp SEMICOLON .)
    ELSE            reduce using rule 39 (declaration -> VAR ID type COLONEQ exp SEMICOLON .)


state 147

    (87) callFuncP -> ID DOT ID LPAREN params RPAREN .
    (89) callFuncP -> ID DOT ID LPAREN params RPAREN . SEMICOLON

    NEWLINE         reduce using rule 87 (callFuncP -> ID DOT ID LPAREN params RPAREN .)
    RCHAVES         reduce using rule 87 (callFuncP -> ID DOT ID LPAREN params RPAREN .)
    ELSE            reduce using rule 87 (callFuncP -> ID DOT ID LPAREN params RPAREN .)
    SEMICOLON       shift and go to state 151


state 148

    (90) callFuncP -> ID DOT ID LPAREN RPAREN SEMICOLON .

    NEWLINE         reduce using rule 90 (callFuncP -> ID DOT ID LPAREN RPAREN SEMICOLON .)
    RCHAVES         reduce using rule 90 (callFuncP -> ID DOT ID LPAREN RPAREN SEMICOLON .)
    ELSE            reduce using rule 90 (callFuncP -> ID DOT ID LPAREN RPAREN SEMICOLON .)


state 149

    (33) for -> FOR exp SEMICOLON exp SEMICOLON exp . body
    (76) exp9 -> exp .
    (15) body -> . LCHAVES stms RCHAVES
    (16) body -> . LCHAVES RCHAVES

  ! shift/reduce conflict for LCHAVES resolved as shift
    TIMES           reduce using rule 76 (exp9 -> exp .)
    DIVIDE          reduce using rule 76 (exp9 -> exp .)
    MOD             reduce using rule 76 (exp9 -> exp .)
    PLUS            reduce using rule 76 (exp9 -> exp .)
    MINUS           reduce using rule 76 (exp9 -> exp .)
    LESS            reduce using rule 76 (exp9 -> exp .)
    GREATER         reduce using rule 76 (exp9 -> exp .)
    LESS_EQUAL      reduce using rule 76 (exp9 -> exp .)
    GREATER_EQUAL   reduce using rule 76 (exp9 -> exp .)
    EQUALS          reduce using rule 76 (exp9 -> exp .)
    DIFFERENT       reduce using rule 76 (exp9 -> exp .)
    AND             reduce using rule 76 (exp9 -> exp .)
    OR              reduce using rule 76 (exp9 -> exp .)
    ASSIGN          reduce using rule 76 (exp9 -> exp .)
    COLONEQ         reduce using rule 76 (exp9 -> exp .)
    DPLUS           reduce using rule 76 (exp9 -> exp .)
    DMINUS          reduce using rule 76 (exp9 -> exp .)
    LCHAVES         shift and go to state 16

  ! LCHAVES         [ reduce using rule 76 (exp9 -> exp .) ]

    body                           shift and go to state 152

state 150

    (21) statement1 -> IF LPAREN exp RPAREN body ELSE body .

    NEWLINE         reduce using rule 21 (statement1 -> IF LPAREN exp RPAREN body ELSE body .)
    RCHAVES         reduce using rule 21 (statement1 -> IF LPAREN exp RPAREN body ELSE body .)
    ELSE            reduce using rule 21 (statement1 -> IF LPAREN exp RPAREN body ELSE body .)


state 151

    (89) callFuncP -> ID DOT ID LPAREN params RPAREN SEMICOLON .

    NEWLINE         reduce using rule 89 (callFuncP -> ID DOT ID LPAREN params RPAREN SEMICOLON .)
    RCHAVES         reduce using rule 89 (callFuncP -> ID DOT ID LPAREN params RPAREN SEMICOLON .)
    ELSE            reduce using rule 89 (callFuncP -> ID DOT ID LPAREN params RPAREN SEMICOLON .)


state 152

    (33) for -> FOR exp SEMICOLON exp SEMICOLON exp body .

    NEWLINE         reduce using rule 33 (for -> FOR exp SEMICOLON exp SEMICOLON exp body .)
    RCHAVES         reduce using rule 33 (for -> FOR exp SEMICOLON exp SEMICOLON exp body .)
    ELSE            reduce using rule 33 (for -> FOR exp SEMICOLON exp SEMICOLON exp body .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for IF in state 47 resolved as shift
WARNING: shift/reduce conflict for LCHAVES in state 47 resolved as shift
WARNING: shift/reduce conflict for VAR in state 47 resolved as shift
WARNING: shift/reduce conflict for FOR in state 47 resolved as shift
WARNING: shift/reduce conflict for ID in state 47 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 47 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 47 resolved as shift
WARNING: shift/reduce conflict for ASSIGN in state 48 resolved as shift
WARNING: shift/reduce conflict for COLONEQ in state 48 resolved as shift
WARNING: shift/reduce conflict for OR in state 49 resolved as shift
WARNING: shift/reduce conflict for AND in state 50 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 51 resolved as shift
WARNING: shift/reduce conflict for DIFFERENT in state 51 resolved as shift
WARNING: shift/reduce conflict for LESS in state 52 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 52 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 52 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 52 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 53 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 53 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 54 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 54 resolved as shift
WARNING: shift/reduce conflict for MOD in state 54 resolved as shift
WARNING: shift/reduce conflict for DPLUS in state 55 resolved as shift
WARNING: shift/reduce conflict for DMINUS in state 55 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 67 resolved as shift
WARNING: shift/reduce conflict for LCHAVES in state 67 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 69 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 76 resolved as shift
WARNING: shift/reduce conflict for DPLUS in state 96 resolved as shift
WARNING: shift/reduce conflict for DMINUS in state 96 resolved as shift
WARNING: shift/reduce conflict for DPLUS in state 96 resolved as shift
WARNING: shift/reduce conflict for DMINUS in state 96 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 101 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 105 resolved as shift
WARNING: shift/reduce conflict for LCHAVES in state 109 resolved as shift
WARNING: shift/reduce conflict for OR in state 111 resolved as shift
WARNING: shift/reduce conflict for OR in state 111 resolved as shift
WARNING: shift/reduce conflict for OR in state 112 resolved as shift
WARNING: shift/reduce conflict for OR in state 112 resolved as shift
WARNING: shift/reduce conflict for AND in state 113 resolved as shift
WARNING: shift/reduce conflict for AND in state 113 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 114 resolved as shift
WARNING: shift/reduce conflict for DIFFERENT in state 114 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 114 resolved as shift
WARNING: shift/reduce conflict for DIFFERENT in state 114 resolved as shift
WARNING: shift/reduce conflict for LESS in state 115 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 115 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 115 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 115 resolved as shift
WARNING: shift/reduce conflict for LESS in state 115 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 115 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 115 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 115 resolved as shift
WARNING: shift/reduce conflict for LESS in state 116 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 116 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 116 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 116 resolved as shift
WARNING: shift/reduce conflict for LESS in state 116 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 116 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 116 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 116 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 117 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 117 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 117 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 117 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 118 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 118 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 118 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 118 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 119 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 119 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 119 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 119 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 120 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 120 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 120 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 120 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 121 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 121 resolved as shift
WARNING: shift/reduce conflict for MOD in state 121 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 121 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 121 resolved as shift
WARNING: shift/reduce conflict for MOD in state 121 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 122 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 122 resolved as shift
WARNING: shift/reduce conflict for MOD in state 122 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 122 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 122 resolved as shift
WARNING: shift/reduce conflict for MOD in state 122 resolved as shift
WARNING: shift/reduce conflict for DPLUS in state 123 resolved as shift
WARNING: shift/reduce conflict for DMINUS in state 123 resolved as shift
WARNING: shift/reduce conflict for DPLUS in state 123 resolved as shift
WARNING: shift/reduce conflict for DMINUS in state 123 resolved as shift
WARNING: shift/reduce conflict for DPLUS in state 124 resolved as shift
WARNING: shift/reduce conflict for DMINUS in state 124 resolved as shift
WARNING: shift/reduce conflict for DPLUS in state 124 resolved as shift
WARNING: shift/reduce conflict for DMINUS in state 124 resolved as shift
WARNING: shift/reduce conflict for DPLUS in state 125 resolved as shift
WARNING: shift/reduce conflict for DMINUS in state 125 resolved as shift
WARNING: shift/reduce conflict for DPLUS in state 125 resolved as shift
WARNING: shift/reduce conflict for DMINUS in state 125 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 133 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 135 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 137 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 138 resolved as shift
WARNING: shift/reduce conflict for LCHAVES in state 149 resolved as shift
WARNING: reduce/reduce conflict in state 69 resolved using rule (exp9 -> exp)
WARNING: rejected rule (return -> RETURN exp) in state 69
WARNING: reduce/reduce conflict in state 96 resolved using rule (exp7 -> exp8)
WARNING: rejected rule (exp8 -> NOT exp8) in state 96
WARNING: reduce/reduce conflict in state 101 resolved using rule (exp9 -> exp)
WARNING: rejected rule (params -> exp) in state 101
WARNING: reduce/reduce conflict in state 111 resolved using rule (exp1 -> exp1 ASSIGN exp2)
WARNING: rejected rule (exp1 -> exp2) in state 111
WARNING: reduce/reduce conflict in state 112 resolved using rule (exp1 -> exp1 COLONEQ exp2)
WARNING: rejected rule (exp1 -> exp2) in state 112
WARNING: reduce/reduce conflict in state 113 resolved using rule (exp2 -> exp2 OR exp3)
WARNING: rejected rule (exp2 -> exp3) in state 113
WARNING: reduce/reduce conflict in state 114 resolved using rule (exp3 -> exp3 AND exp4)
WARNING: rejected rule (exp3 -> exp4) in state 114
WARNING: reduce/reduce conflict in state 115 resolved using rule (exp4 -> exp4 EQUALS exp5)
WARNING: rejected rule (exp4 -> exp5) in state 115
WARNING: reduce/reduce conflict in state 116 resolved using rule (exp4 -> exp4 DIFFERENT exp5)
WARNING: rejected rule (exp4 -> exp5) in state 116
WARNING: reduce/reduce conflict in state 117 resolved using rule (exp5 -> exp5 LESS exp6)
WARNING: rejected rule (exp5 -> exp6) in state 117
WARNING: reduce/reduce conflict in state 118 resolved using rule (exp5 -> exp5 GREATER exp6)
WARNING: rejected rule (exp5 -> exp6) in state 118
WARNING: reduce/reduce conflict in state 119 resolved using rule (exp5 -> exp5 LESS_EQUAL exp6)
WARNING: rejected rule (exp5 -> exp6) in state 119
WARNING: reduce/reduce conflict in state 120 resolved using rule (exp5 -> exp5 GREATER_EQUAL exp6)
WARNING: rejected rule (exp5 -> exp6) in state 120
WARNING: reduce/reduce conflict in state 121 resolved using rule (exp6 -> exp6 PLUS exp7)
WARNING: rejected rule (exp6 -> exp7) in state 121
WARNING: reduce/reduce conflict in state 122 resolved using rule (exp6 -> exp6 MINUS exp7)
WARNING: rejected rule (exp6 -> exp7) in state 122
WARNING: reduce/reduce conflict in state 123 resolved using rule (exp7 -> exp7 TIMES exp8)
WARNING: rejected rule (exp7 -> exp8) in state 123
WARNING: reduce/reduce conflict in state 124 resolved using rule (exp7 -> exp7 DIVIDE exp8)
WARNING: rejected rule (exp7 -> exp8) in state 124
WARNING: reduce/reduce conflict in state 125 resolved using rule (exp7 -> exp7 MOD exp8)
WARNING: rejected rule (exp7 -> exp8) in state 125
WARNING: reduce/reduce conflict in state 137 resolved using rule (declaration -> VAR ID type ASSIGN exp)
WARNING: rejected rule (exp9 -> exp) in state 137
WARNING: reduce/reduce conflict in state 138 resolved using rule (declaration -> VAR ID type COLONEQ exp)
WARNING: rejected rule (exp9 -> exp) in state 138
WARNING: Rule (return -> RETURN exp) is never reduced
WARNING: Rule (exp8 -> NOT exp8) is never reduced
WARNING: Rule (params -> exp) is never reduced
