Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> programaGO
Rule 1     programaGO -> defpackage defimport funcdecls
Rule 2     defpackage -> PACKAGE ID
Rule 3     defimport -> IMPORT STRING
Rule 4     funcdecl -> FUNC ID signature body
Rule 5     funcdecls -> funcdecl
Rule 6     funcdecls -> funcdecl funcdecls
Rule 7     signature -> LPAREN sigparams RPAREN
Rule 8     signature -> LPAREN sigparams RPAREN funcreturn
Rule 9     signature -> LPAREN RPAREN
Rule 10    signature -> LPAREN RPAREN funcreturn
Rule 11    sigparams -> ID type
Rule 12    sigparams -> ID type COMMA sigparams
Rule 13    funcreturn -> type
Rule 14    funcreturn -> LPAREN type RPAREN
Rule 15    body -> LCHAVES stms RCHAVES
Rule 16    body -> LCHAVES RCHAVES
Rule 17    stms -> statement
Rule 18    stms -> statement stms
Rule 19    stms -> statement NEWLINE stms
Rule 20    stms -> statement NEWLINE
Rule 21    statement -> statement1
Rule 22    statement1 -> IF exp body ELSE body
Rule 23    statement1 -> IF exp body
Rule 24    statement1 -> declaration
Rule 25    statement1 -> for
Rule 26    statement1 -> callFunc
Rule 27    statement1 -> callFuncPS
Rule 28    statement1 -> return
Rule 29    statement1 -> break
Rule 30    for -> FOR body
Rule 31    for -> FOR exp body
Rule 32    for -> FOR exp SEMICOLON exp SEMICOLON exp body
Rule 33    declaration -> VAR ID type
Rule 34    declaration -> VAR ID type ASSIGN exp
Rule 35    declaration -> VAR ID type COLONEQ exp
Rule 36    declaration -> VAR ID type SEMICOLON
Rule 37    declaration -> VAR ID type ASSIGN exp SEMICOLON
Rule 38    declaration -> VAR ID type COLONEQ exp SEMICOLON
Rule 39    type -> INT
Rule 40    type -> STRING
Rule 41    type -> BOOL
Rule 42    exp -> exp1
Rule 43    exp1 -> exp1 ASSIGN exp2
Rule 44    exp1 -> exp1 COLONEQ exp2
Rule 45    exp1 -> exp2
Rule 46    exp2 -> exp2 OR exp3
Rule 47    exp2 -> exp3
Rule 48    exp3 -> exp3 AND exp4
Rule 49    exp3 -> exp4
Rule 50    exp4 -> exp4 EQUALS exp5
Rule 51    exp4 -> exp4 DIFFERENT exp5
Rule 52    exp4 -> exp5
Rule 53    exp5 -> exp5 LESS exp6
Rule 54    exp5 -> exp5 GREATER exp6
Rule 55    exp5 -> exp5 LESS_EQUAL exp6
Rule 56    exp5 -> exp5 GREATER_EQUAL exp6
Rule 57    exp5 -> exp6
Rule 58    exp6 -> exp6 PLUS exp7
Rule 59    exp6 -> exp6 MINUS exp7
Rule 60    exp6 -> exp7
Rule 61    exp7 -> exp7 TIMES exp8
Rule 62    exp7 -> exp7 DIVIDE exp8
Rule 63    exp7 -> exp7 MOD exp8
Rule 64    exp7 -> exp8
Rule 65    exp8 -> exp8 DPLUS
Rule 66    exp8 -> exp8 DMINUS
Rule 67    exp8 -> exp9
Rule 68    exp9 -> NOT exp9
Rule 69    exp9 -> NUMBER
Rule 70    exp9 -> STRING
Rule 71    exp9 -> ID
Rule 72    exp9 -> TRUE
Rule 73    exp9 -> FALSE
Rule 74    exp9 -> LPAREN exp RPAREN
Rule 75    return -> RETURN exp
Rule 76    return -> RETURN
Rule 77    return -> RETURN exp SEMICOLON
Rule 78    return -> RETURN SEMICOLON
Rule 79    break -> BREAK
Rule 80    break -> BREAK SEMICOLON
Rule 81    callFunc -> ID LPAREN params RPAREN
Rule 82    callFunc -> ID LPAREN RPAREN
Rule 83    callFunc -> ID LPAREN params RPAREN SEMICOLON
Rule 84    callFunc -> ID LPAREN RPAREN SEMICOLON
Rule 85    callFuncPS -> ID DOT ID LPAREN params RPAREN
Rule 86    callFuncPS -> ID DOT ID LPAREN RPAREN
Rule 87    callFuncPS -> ID DOT ID LPAREN params RPAREN SEMICOLON
Rule 88    callFuncPS -> ID DOT ID LPAREN RPAREN SEMICOLON
Rule 89    params -> exp COMMA params
Rule 90    params -> exp

Terminals, with rules where they appear

AND                  : 48
ASSIGN               : 34 37 43
BOOL                 : 41
BREAK                : 79 80
COLONEQ              : 35 38 44
COMMA                : 12 89
DIFFERENT            : 51
DIVIDE               : 62
DMINUS               : 66
DOT                  : 85 86 87 88
DPLUS                : 65
ELSE                 : 22
EQUALS               : 50
FALSE                : 73
FOR                  : 30 31 32
FUNC                 : 4
GREATER              : 54
GREATER_EQUAL        : 56
ID                   : 2 4 11 12 33 34 35 36 37 38 71 81 82 83 84 85 85 86 86 87 87 88 88
IF                   : 22 23
IMPORT               : 3
INT                  : 39
LCHAVES              : 15 16
LESS                 : 53
LESS_EQUAL           : 55
LPAREN               : 7 8 9 10 14 74 81 82 83 84 85 86 87 88
MINUS                : 59
MOD                  : 63
NEWLINE              : 19 20
NOT                  : 68
NUMBER               : 69
OR                   : 46
PACKAGE              : 2
PLUS                 : 58
RCHAVES              : 15 16
RETURN               : 75 76 77 78
RPAREN               : 7 8 9 10 14 74 81 82 83 84 85 86 87 88
SEMICOLON            : 32 32 36 37 38 77 78 80 83 84 87 88
STRING               : 3 40 70
TIMES                : 61
TRUE                 : 72
VAR                  : 33 34 35 36 37 38
error                : 

Nonterminals, with rules where they appear

body                 : 4 22 22 23 30 31 32
break                : 29
callFunc             : 26
callFuncPS           : 27
declaration          : 24
defimport            : 1
defpackage           : 1
exp                  : 22 23 31 32 32 32 34 35 37 38 74 75 77 89 90
exp1                 : 42 43 44
exp2                 : 43 44 45 46
exp3                 : 46 47 48
exp4                 : 48 49 50 51
exp5                 : 50 51 52 53 54 55 56
exp6                 : 53 54 55 56 57 58 59
exp7                 : 58 59 60 61 62 63
exp8                 : 61 62 63 64 65 66
exp9                 : 67 68
for                  : 25
funcdecl             : 5 6
funcdecls            : 1 6
funcreturn           : 8 10
params               : 81 83 85 87 89
programaGO           : 0
return               : 28
signature            : 4
sigparams            : 7 8 12
statement            : 17 18 19 20
statement1           : 21
stms                 : 15 18 19
type                 : 11 12 13 14 33 34 35 36 37 38

Parsing method: LALR

state 0

    (0) S' -> . programaGO
    (1) programaGO -> . defpackage defimport funcdecls
    (2) defpackage -> . PACKAGE ID

    PACKAGE         shift and go to state 3

    programaGO                     shift and go to state 1
    defpackage                     shift and go to state 2

state 1

    (0) S' -> programaGO .



state 2

    (1) programaGO -> defpackage . defimport funcdecls
    (3) defimport -> . IMPORT STRING

    IMPORT          shift and go to state 5

    defimport                      shift and go to state 4

state 3

    (2) defpackage -> PACKAGE . ID

    ID              shift and go to state 6


state 4

    (1) programaGO -> defpackage defimport . funcdecls
    (5) funcdecls -> . funcdecl
    (6) funcdecls -> . funcdecl funcdecls
    (4) funcdecl -> . FUNC ID signature body

    FUNC            shift and go to state 9

    funcdecls                      shift and go to state 7
    funcdecl                       shift and go to state 8

state 5

    (3) defimport -> IMPORT . STRING

    STRING          shift and go to state 10


state 6

    (2) defpackage -> PACKAGE ID .

    IMPORT          reduce using rule 2 (defpackage -> PACKAGE ID .)


state 7

    (1) programaGO -> defpackage defimport funcdecls .

    $end            reduce using rule 1 (programaGO -> defpackage defimport funcdecls .)


state 8

    (5) funcdecls -> funcdecl .
    (6) funcdecls -> funcdecl . funcdecls
    (5) funcdecls -> . funcdecl
    (6) funcdecls -> . funcdecl funcdecls
    (4) funcdecl -> . FUNC ID signature body

    $end            reduce using rule 5 (funcdecls -> funcdecl .)
    FUNC            shift and go to state 9

    funcdecl                       shift and go to state 8
    funcdecls                      shift and go to state 11

state 9

    (4) funcdecl -> FUNC . ID signature body

    ID              shift and go to state 12


state 10

    (3) defimport -> IMPORT STRING .

    FUNC            reduce using rule 3 (defimport -> IMPORT STRING .)


state 11

    (6) funcdecls -> funcdecl funcdecls .

    $end            reduce using rule 6 (funcdecls -> funcdecl funcdecls .)


state 12

    (4) funcdecl -> FUNC ID . signature body
    (7) signature -> . LPAREN sigparams RPAREN
    (8) signature -> . LPAREN sigparams RPAREN funcreturn
    (9) signature -> . LPAREN RPAREN
    (10) signature -> . LPAREN RPAREN funcreturn

    LPAREN          shift and go to state 14

    signature                      shift and go to state 13

state 13

    (4) funcdecl -> FUNC ID signature . body
    (15) body -> . LCHAVES stms RCHAVES
    (16) body -> . LCHAVES RCHAVES

    LCHAVES         shift and go to state 16

    body                           shift and go to state 15

state 14

    (7) signature -> LPAREN . sigparams RPAREN
    (8) signature -> LPAREN . sigparams RPAREN funcreturn
    (9) signature -> LPAREN . RPAREN
    (10) signature -> LPAREN . RPAREN funcreturn
    (11) sigparams -> . ID type
    (12) sigparams -> . ID type COMMA sigparams

    RPAREN          shift and go to state 18
    ID              shift and go to state 19

    sigparams                      shift and go to state 17

state 15

    (4) funcdecl -> FUNC ID signature body .

    FUNC            reduce using rule 4 (funcdecl -> FUNC ID signature body .)
    $end            reduce using rule 4 (funcdecl -> FUNC ID signature body .)


state 16

    (15) body -> LCHAVES . stms RCHAVES
    (16) body -> LCHAVES . RCHAVES
    (17) stms -> . statement
    (18) stms -> . statement stms
    (19) stms -> . statement NEWLINE stms
    (20) stms -> . statement NEWLINE
    (21) statement -> . statement1
    (22) statement1 -> . IF exp body ELSE body
    (23) statement1 -> . IF exp body
    (24) statement1 -> . declaration
    (25) statement1 -> . for
    (26) statement1 -> . callFunc
    (27) statement1 -> . callFuncPS
    (28) statement1 -> . return
    (29) statement1 -> . break
    (33) declaration -> . VAR ID type
    (34) declaration -> . VAR ID type ASSIGN exp
    (35) declaration -> . VAR ID type COLONEQ exp
    (36) declaration -> . VAR ID type SEMICOLON
    (37) declaration -> . VAR ID type ASSIGN exp SEMICOLON
    (38) declaration -> . VAR ID type COLONEQ exp SEMICOLON
    (30) for -> . FOR body
    (31) for -> . FOR exp body
    (32) for -> . FOR exp SEMICOLON exp SEMICOLON exp body
    (81) callFunc -> . ID LPAREN params RPAREN
    (82) callFunc -> . ID LPAREN RPAREN
    (83) callFunc -> . ID LPAREN params RPAREN SEMICOLON
    (84) callFunc -> . ID LPAREN RPAREN SEMICOLON
    (85) callFuncPS -> . ID DOT ID LPAREN params RPAREN
    (86) callFuncPS -> . ID DOT ID LPAREN RPAREN
    (87) callFuncPS -> . ID DOT ID LPAREN params RPAREN SEMICOLON
    (88) callFuncPS -> . ID DOT ID LPAREN RPAREN SEMICOLON
    (75) return -> . RETURN exp
    (76) return -> . RETURN
    (77) return -> . RETURN exp SEMICOLON
    (78) return -> . RETURN SEMICOLON
    (79) break -> . BREAK
    (80) break -> . BREAK SEMICOLON

    RCHAVES         shift and go to state 21
    IF              shift and go to state 24
    VAR             shift and go to state 31
    FOR             shift and go to state 33
    ID              shift and go to state 32
    RETURN          shift and go to state 34
    BREAK           shift and go to state 35

    stms                           shift and go to state 20
    statement                      shift and go to state 22
    statement1                     shift and go to state 23
    declaration                    shift and go to state 25
    for                            shift and go to state 26
    callFunc                       shift and go to state 27
    callFuncPS                     shift and go to state 28
    return                         shift and go to state 29
    break                          shift and go to state 30

state 17

    (7) signature -> LPAREN sigparams . RPAREN
    (8) signature -> LPAREN sigparams . RPAREN funcreturn

    RPAREN          shift and go to state 36


state 18

    (9) signature -> LPAREN RPAREN .
    (10) signature -> LPAREN RPAREN . funcreturn
    (13) funcreturn -> . type
    (14) funcreturn -> . LPAREN type RPAREN
    (39) type -> . INT
    (40) type -> . STRING
    (41) type -> . BOOL

    LCHAVES         reduce using rule 9 (signature -> LPAREN RPAREN .)
    LPAREN          shift and go to state 37
    INT             shift and go to state 40
    STRING          shift and go to state 41
    BOOL            shift and go to state 42

    funcreturn                     shift and go to state 38
    type                           shift and go to state 39

state 19

    (11) sigparams -> ID . type
    (12) sigparams -> ID . type COMMA sigparams
    (39) type -> . INT
    (40) type -> . STRING
    (41) type -> . BOOL

    INT             shift and go to state 40
    STRING          shift and go to state 41
    BOOL            shift and go to state 42

    type                           shift and go to state 43

state 20

    (15) body -> LCHAVES stms . RCHAVES

    RCHAVES         shift and go to state 44


state 21

    (16) body -> LCHAVES RCHAVES .

    FUNC            reduce using rule 16 (body -> LCHAVES RCHAVES .)
    $end            reduce using rule 16 (body -> LCHAVES RCHAVES .)
    NEWLINE         reduce using rule 16 (body -> LCHAVES RCHAVES .)
    IF              reduce using rule 16 (body -> LCHAVES RCHAVES .)
    VAR             reduce using rule 16 (body -> LCHAVES RCHAVES .)
    FOR             reduce using rule 16 (body -> LCHAVES RCHAVES .)
    ID              reduce using rule 16 (body -> LCHAVES RCHAVES .)
    RETURN          reduce using rule 16 (body -> LCHAVES RCHAVES .)
    BREAK           reduce using rule 16 (body -> LCHAVES RCHAVES .)
    RCHAVES         reduce using rule 16 (body -> LCHAVES RCHAVES .)
    ELSE            reduce using rule 16 (body -> LCHAVES RCHAVES .)


state 22

    (17) stms -> statement .
    (18) stms -> statement . stms
    (19) stms -> statement . NEWLINE stms
    (20) stms -> statement . NEWLINE
    (17) stms -> . statement
    (18) stms -> . statement stms
    (19) stms -> . statement NEWLINE stms
    (20) stms -> . statement NEWLINE
    (21) statement -> . statement1
    (22) statement1 -> . IF exp body ELSE body
    (23) statement1 -> . IF exp body
    (24) statement1 -> . declaration
    (25) statement1 -> . for
    (26) statement1 -> . callFunc
    (27) statement1 -> . callFuncPS
    (28) statement1 -> . return
    (29) statement1 -> . break
    (33) declaration -> . VAR ID type
    (34) declaration -> . VAR ID type ASSIGN exp
    (35) declaration -> . VAR ID type COLONEQ exp
    (36) declaration -> . VAR ID type SEMICOLON
    (37) declaration -> . VAR ID type ASSIGN exp SEMICOLON
    (38) declaration -> . VAR ID type COLONEQ exp SEMICOLON
    (30) for -> . FOR body
    (31) for -> . FOR exp body
    (32) for -> . FOR exp SEMICOLON exp SEMICOLON exp body
    (81) callFunc -> . ID LPAREN params RPAREN
    (82) callFunc -> . ID LPAREN RPAREN
    (83) callFunc -> . ID LPAREN params RPAREN SEMICOLON
    (84) callFunc -> . ID LPAREN RPAREN SEMICOLON
    (85) callFuncPS -> . ID DOT ID LPAREN params RPAREN
    (86) callFuncPS -> . ID DOT ID LPAREN RPAREN
    (87) callFuncPS -> . ID DOT ID LPAREN params RPAREN SEMICOLON
    (88) callFuncPS -> . ID DOT ID LPAREN RPAREN SEMICOLON
    (75) return -> . RETURN exp
    (76) return -> . RETURN
    (77) return -> . RETURN exp SEMICOLON
    (78) return -> . RETURN SEMICOLON
    (79) break -> . BREAK
    (80) break -> . BREAK SEMICOLON

    RCHAVES         reduce using rule 17 (stms -> statement .)
    NEWLINE         shift and go to state 46
    IF              shift and go to state 24
    VAR             shift and go to state 31
    FOR             shift and go to state 33
    ID              shift and go to state 32
    RETURN          shift and go to state 34
    BREAK           shift and go to state 35

    statement                      shift and go to state 22
    stms                           shift and go to state 45
    statement1                     shift and go to state 23
    declaration                    shift and go to state 25
    for                            shift and go to state 26
    callFunc                       shift and go to state 27
    callFuncPS                     shift and go to state 28
    return                         shift and go to state 29
    break                          shift and go to state 30

state 23

    (21) statement -> statement1 .

    NEWLINE         reduce using rule 21 (statement -> statement1 .)
    IF              reduce using rule 21 (statement -> statement1 .)
    VAR             reduce using rule 21 (statement -> statement1 .)
    FOR             reduce using rule 21 (statement -> statement1 .)
    ID              reduce using rule 21 (statement -> statement1 .)
    RETURN          reduce using rule 21 (statement -> statement1 .)
    BREAK           reduce using rule 21 (statement -> statement1 .)
    RCHAVES         reduce using rule 21 (statement -> statement1 .)


state 24

    (22) statement1 -> IF . exp body ELSE body
    (23) statement1 -> IF . exp body
    (42) exp -> . exp1
    (43) exp1 -> . exp1 ASSIGN exp2
    (44) exp1 -> . exp1 COLONEQ exp2
    (45) exp1 -> . exp2
    (46) exp2 -> . exp2 OR exp3
    (47) exp2 -> . exp3
    (48) exp3 -> . exp3 AND exp4
    (49) exp3 -> . exp4
    (50) exp4 -> . exp4 EQUALS exp5
    (51) exp4 -> . exp4 DIFFERENT exp5
    (52) exp4 -> . exp5
    (53) exp5 -> . exp5 LESS exp6
    (54) exp5 -> . exp5 GREATER exp6
    (55) exp5 -> . exp5 LESS_EQUAL exp6
    (56) exp5 -> . exp5 GREATER_EQUAL exp6
    (57) exp5 -> . exp6
    (58) exp6 -> . exp6 PLUS exp7
    (59) exp6 -> . exp6 MINUS exp7
    (60) exp6 -> . exp7
    (61) exp7 -> . exp7 TIMES exp8
    (62) exp7 -> . exp7 DIVIDE exp8
    (63) exp7 -> . exp7 MOD exp8
    (64) exp7 -> . exp8
    (65) exp8 -> . exp8 DPLUS
    (66) exp8 -> . exp8 DMINUS
    (67) exp8 -> . exp9
    (68) exp9 -> . NOT exp9
    (69) exp9 -> . NUMBER
    (70) exp9 -> . STRING
    (71) exp9 -> . ID
    (72) exp9 -> . TRUE
    (73) exp9 -> . FALSE
    (74) exp9 -> . LPAREN exp RPAREN

    NOT             shift and go to state 57
    NUMBER          shift and go to state 58
    STRING          shift and go to state 59
    ID              shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    LPAREN          shift and go to state 63

    exp                            shift and go to state 47
    exp1                           shift and go to state 48
    exp2                           shift and go to state 49
    exp3                           shift and go to state 50
    exp4                           shift and go to state 51
    exp5                           shift and go to state 52
    exp6                           shift and go to state 53
    exp7                           shift and go to state 54
    exp8                           shift and go to state 55
    exp9                           shift and go to state 56

state 25

    (24) statement1 -> declaration .

    NEWLINE         reduce using rule 24 (statement1 -> declaration .)
    IF              reduce using rule 24 (statement1 -> declaration .)
    VAR             reduce using rule 24 (statement1 -> declaration .)
    FOR             reduce using rule 24 (statement1 -> declaration .)
    ID              reduce using rule 24 (statement1 -> declaration .)
    RETURN          reduce using rule 24 (statement1 -> declaration .)
    BREAK           reduce using rule 24 (statement1 -> declaration .)
    RCHAVES         reduce using rule 24 (statement1 -> declaration .)


state 26

    (25) statement1 -> for .

    NEWLINE         reduce using rule 25 (statement1 -> for .)
    IF              reduce using rule 25 (statement1 -> for .)
    VAR             reduce using rule 25 (statement1 -> for .)
    FOR             reduce using rule 25 (statement1 -> for .)
    ID              reduce using rule 25 (statement1 -> for .)
    RETURN          reduce using rule 25 (statement1 -> for .)
    BREAK           reduce using rule 25 (statement1 -> for .)
    RCHAVES         reduce using rule 25 (statement1 -> for .)


state 27

    (26) statement1 -> callFunc .

    NEWLINE         reduce using rule 26 (statement1 -> callFunc .)
    IF              reduce using rule 26 (statement1 -> callFunc .)
    VAR             reduce using rule 26 (statement1 -> callFunc .)
    FOR             reduce using rule 26 (statement1 -> callFunc .)
    ID              reduce using rule 26 (statement1 -> callFunc .)
    RETURN          reduce using rule 26 (statement1 -> callFunc .)
    BREAK           reduce using rule 26 (statement1 -> callFunc .)
    RCHAVES         reduce using rule 26 (statement1 -> callFunc .)


state 28

    (27) statement1 -> callFuncPS .

    NEWLINE         reduce using rule 27 (statement1 -> callFuncPS .)
    IF              reduce using rule 27 (statement1 -> callFuncPS .)
    VAR             reduce using rule 27 (statement1 -> callFuncPS .)
    FOR             reduce using rule 27 (statement1 -> callFuncPS .)
    ID              reduce using rule 27 (statement1 -> callFuncPS .)
    RETURN          reduce using rule 27 (statement1 -> callFuncPS .)
    BREAK           reduce using rule 27 (statement1 -> callFuncPS .)
    RCHAVES         reduce using rule 27 (statement1 -> callFuncPS .)


state 29

    (28) statement1 -> return .

    NEWLINE         reduce using rule 28 (statement1 -> return .)
    IF              reduce using rule 28 (statement1 -> return .)
    VAR             reduce using rule 28 (statement1 -> return .)
    FOR             reduce using rule 28 (statement1 -> return .)
    ID              reduce using rule 28 (statement1 -> return .)
    RETURN          reduce using rule 28 (statement1 -> return .)
    BREAK           reduce using rule 28 (statement1 -> return .)
    RCHAVES         reduce using rule 28 (statement1 -> return .)


state 30

    (29) statement1 -> break .

    NEWLINE         reduce using rule 29 (statement1 -> break .)
    IF              reduce using rule 29 (statement1 -> break .)
    VAR             reduce using rule 29 (statement1 -> break .)
    FOR             reduce using rule 29 (statement1 -> break .)
    ID              reduce using rule 29 (statement1 -> break .)
    RETURN          reduce using rule 29 (statement1 -> break .)
    BREAK           reduce using rule 29 (statement1 -> break .)
    RCHAVES         reduce using rule 29 (statement1 -> break .)


state 31

    (33) declaration -> VAR . ID type
    (34) declaration -> VAR . ID type ASSIGN exp
    (35) declaration -> VAR . ID type COLONEQ exp
    (36) declaration -> VAR . ID type SEMICOLON
    (37) declaration -> VAR . ID type ASSIGN exp SEMICOLON
    (38) declaration -> VAR . ID type COLONEQ exp SEMICOLON

    ID              shift and go to state 64


state 32

    (81) callFunc -> ID . LPAREN params RPAREN
    (82) callFunc -> ID . LPAREN RPAREN
    (83) callFunc -> ID . LPAREN params RPAREN SEMICOLON
    (84) callFunc -> ID . LPAREN RPAREN SEMICOLON
    (85) callFuncPS -> ID . DOT ID LPAREN params RPAREN
    (86) callFuncPS -> ID . DOT ID LPAREN RPAREN
    (87) callFuncPS -> ID . DOT ID LPAREN params RPAREN SEMICOLON
    (88) callFuncPS -> ID . DOT ID LPAREN RPAREN SEMICOLON

    LPAREN          shift and go to state 65
    DOT             shift and go to state 66


state 33

    (30) for -> FOR . body
    (31) for -> FOR . exp body
    (32) for -> FOR . exp SEMICOLON exp SEMICOLON exp body
    (15) body -> . LCHAVES stms RCHAVES
    (16) body -> . LCHAVES RCHAVES
    (42) exp -> . exp1
    (43) exp1 -> . exp1 ASSIGN exp2
    (44) exp1 -> . exp1 COLONEQ exp2
    (45) exp1 -> . exp2
    (46) exp2 -> . exp2 OR exp3
    (47) exp2 -> . exp3
    (48) exp3 -> . exp3 AND exp4
    (49) exp3 -> . exp4
    (50) exp4 -> . exp4 EQUALS exp5
    (51) exp4 -> . exp4 DIFFERENT exp5
    (52) exp4 -> . exp5
    (53) exp5 -> . exp5 LESS exp6
    (54) exp5 -> . exp5 GREATER exp6
    (55) exp5 -> . exp5 LESS_EQUAL exp6
    (56) exp5 -> . exp5 GREATER_EQUAL exp6
    (57) exp5 -> . exp6
    (58) exp6 -> . exp6 PLUS exp7
    (59) exp6 -> . exp6 MINUS exp7
    (60) exp6 -> . exp7
    (61) exp7 -> . exp7 TIMES exp8
    (62) exp7 -> . exp7 DIVIDE exp8
    (63) exp7 -> . exp7 MOD exp8
    (64) exp7 -> . exp8
    (65) exp8 -> . exp8 DPLUS
    (66) exp8 -> . exp8 DMINUS
    (67) exp8 -> . exp9
    (68) exp9 -> . NOT exp9
    (69) exp9 -> . NUMBER
    (70) exp9 -> . STRING
    (71) exp9 -> . ID
    (72) exp9 -> . TRUE
    (73) exp9 -> . FALSE
    (74) exp9 -> . LPAREN exp RPAREN

    LCHAVES         shift and go to state 16
    NOT             shift and go to state 57
    NUMBER          shift and go to state 58
    STRING          shift and go to state 59
    ID              shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    LPAREN          shift and go to state 63

    body                           shift and go to state 67
    exp                            shift and go to state 68
    exp1                           shift and go to state 48
    exp2                           shift and go to state 49
    exp3                           shift and go to state 50
    exp4                           shift and go to state 51
    exp5                           shift and go to state 52
    exp6                           shift and go to state 53
    exp7                           shift and go to state 54
    exp8                           shift and go to state 55
    exp9                           shift and go to state 56

state 34

    (75) return -> RETURN . exp
    (76) return -> RETURN .
    (77) return -> RETURN . exp SEMICOLON
    (78) return -> RETURN . SEMICOLON
    (42) exp -> . exp1
    (43) exp1 -> . exp1 ASSIGN exp2
    (44) exp1 -> . exp1 COLONEQ exp2
    (45) exp1 -> . exp2
    (46) exp2 -> . exp2 OR exp3
    (47) exp2 -> . exp3
    (48) exp3 -> . exp3 AND exp4
    (49) exp3 -> . exp4
    (50) exp4 -> . exp4 EQUALS exp5
    (51) exp4 -> . exp4 DIFFERENT exp5
    (52) exp4 -> . exp5
    (53) exp5 -> . exp5 LESS exp6
    (54) exp5 -> . exp5 GREATER exp6
    (55) exp5 -> . exp5 LESS_EQUAL exp6
    (56) exp5 -> . exp5 GREATER_EQUAL exp6
    (57) exp5 -> . exp6
    (58) exp6 -> . exp6 PLUS exp7
    (59) exp6 -> . exp6 MINUS exp7
    (60) exp6 -> . exp7
    (61) exp7 -> . exp7 TIMES exp8
    (62) exp7 -> . exp7 DIVIDE exp8
    (63) exp7 -> . exp7 MOD exp8
    (64) exp7 -> . exp8
    (65) exp8 -> . exp8 DPLUS
    (66) exp8 -> . exp8 DMINUS
    (67) exp8 -> . exp9
    (68) exp9 -> . NOT exp9
    (69) exp9 -> . NUMBER
    (70) exp9 -> . STRING
    (71) exp9 -> . ID
    (72) exp9 -> . TRUE
    (73) exp9 -> . FALSE
    (74) exp9 -> . LPAREN exp RPAREN

  ! shift/reduce conflict for ID resolved as shift
    NEWLINE         reduce using rule 76 (return -> RETURN .)
    IF              reduce using rule 76 (return -> RETURN .)
    VAR             reduce using rule 76 (return -> RETURN .)
    FOR             reduce using rule 76 (return -> RETURN .)
    RETURN          reduce using rule 76 (return -> RETURN .)
    BREAK           reduce using rule 76 (return -> RETURN .)
    RCHAVES         reduce using rule 76 (return -> RETURN .)
    SEMICOLON       shift and go to state 70
    NOT             shift and go to state 57
    NUMBER          shift and go to state 58
    STRING          shift and go to state 59
    ID              shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    LPAREN          shift and go to state 63

  ! ID              [ reduce using rule 76 (return -> RETURN .) ]

    exp                            shift and go to state 69
    exp1                           shift and go to state 48
    exp2                           shift and go to state 49
    exp3                           shift and go to state 50
    exp4                           shift and go to state 51
    exp5                           shift and go to state 52
    exp6                           shift and go to state 53
    exp7                           shift and go to state 54
    exp8                           shift and go to state 55
    exp9                           shift and go to state 56

state 35

    (79) break -> BREAK .
    (80) break -> BREAK . SEMICOLON

    NEWLINE         reduce using rule 79 (break -> BREAK .)
    IF              reduce using rule 79 (break -> BREAK .)
    VAR             reduce using rule 79 (break -> BREAK .)
    FOR             reduce using rule 79 (break -> BREAK .)
    ID              reduce using rule 79 (break -> BREAK .)
    RETURN          reduce using rule 79 (break -> BREAK .)
    BREAK           reduce using rule 79 (break -> BREAK .)
    RCHAVES         reduce using rule 79 (break -> BREAK .)
    SEMICOLON       shift and go to state 71


state 36

    (7) signature -> LPAREN sigparams RPAREN .
    (8) signature -> LPAREN sigparams RPAREN . funcreturn
    (13) funcreturn -> . type
    (14) funcreturn -> . LPAREN type RPAREN
    (39) type -> . INT
    (40) type -> . STRING
    (41) type -> . BOOL

    LCHAVES         reduce using rule 7 (signature -> LPAREN sigparams RPAREN .)
    LPAREN          shift and go to state 37
    INT             shift and go to state 40
    STRING          shift and go to state 41
    BOOL            shift and go to state 42

    funcreturn                     shift and go to state 72
    type                           shift and go to state 39

state 37

    (14) funcreturn -> LPAREN . type RPAREN
    (39) type -> . INT
    (40) type -> . STRING
    (41) type -> . BOOL

    INT             shift and go to state 40
    STRING          shift and go to state 41
    BOOL            shift and go to state 42

    type                           shift and go to state 73

state 38

    (10) signature -> LPAREN RPAREN funcreturn .

    LCHAVES         reduce using rule 10 (signature -> LPAREN RPAREN funcreturn .)


state 39

    (13) funcreturn -> type .

    LCHAVES         reduce using rule 13 (funcreturn -> type .)


state 40

    (39) type -> INT .

    LCHAVES         reduce using rule 39 (type -> INT .)
    COMMA           reduce using rule 39 (type -> INT .)
    RPAREN          reduce using rule 39 (type -> INT .)
    ASSIGN          reduce using rule 39 (type -> INT .)
    COLONEQ         reduce using rule 39 (type -> INT .)
    SEMICOLON       reduce using rule 39 (type -> INT .)
    NEWLINE         reduce using rule 39 (type -> INT .)
    IF              reduce using rule 39 (type -> INT .)
    VAR             reduce using rule 39 (type -> INT .)
    FOR             reduce using rule 39 (type -> INT .)
    ID              reduce using rule 39 (type -> INT .)
    RETURN          reduce using rule 39 (type -> INT .)
    BREAK           reduce using rule 39 (type -> INT .)
    RCHAVES         reduce using rule 39 (type -> INT .)


state 41

    (40) type -> STRING .

    LCHAVES         reduce using rule 40 (type -> STRING .)
    COMMA           reduce using rule 40 (type -> STRING .)
    RPAREN          reduce using rule 40 (type -> STRING .)
    ASSIGN          reduce using rule 40 (type -> STRING .)
    COLONEQ         reduce using rule 40 (type -> STRING .)
    SEMICOLON       reduce using rule 40 (type -> STRING .)
    NEWLINE         reduce using rule 40 (type -> STRING .)
    IF              reduce using rule 40 (type -> STRING .)
    VAR             reduce using rule 40 (type -> STRING .)
    FOR             reduce using rule 40 (type -> STRING .)
    ID              reduce using rule 40 (type -> STRING .)
    RETURN          reduce using rule 40 (type -> STRING .)
    BREAK           reduce using rule 40 (type -> STRING .)
    RCHAVES         reduce using rule 40 (type -> STRING .)


state 42

    (41) type -> BOOL .

    LCHAVES         reduce using rule 41 (type -> BOOL .)
    COMMA           reduce using rule 41 (type -> BOOL .)
    RPAREN          reduce using rule 41 (type -> BOOL .)
    ASSIGN          reduce using rule 41 (type -> BOOL .)
    COLONEQ         reduce using rule 41 (type -> BOOL .)
    SEMICOLON       reduce using rule 41 (type -> BOOL .)
    NEWLINE         reduce using rule 41 (type -> BOOL .)
    IF              reduce using rule 41 (type -> BOOL .)
    VAR             reduce using rule 41 (type -> BOOL .)
    FOR             reduce using rule 41 (type -> BOOL .)
    ID              reduce using rule 41 (type -> BOOL .)
    RETURN          reduce using rule 41 (type -> BOOL .)
    BREAK           reduce using rule 41 (type -> BOOL .)
    RCHAVES         reduce using rule 41 (type -> BOOL .)


state 43

    (11) sigparams -> ID type .
    (12) sigparams -> ID type . COMMA sigparams

    RPAREN          reduce using rule 11 (sigparams -> ID type .)
    COMMA           shift and go to state 74


state 44

    (15) body -> LCHAVES stms RCHAVES .

    FUNC            reduce using rule 15 (body -> LCHAVES stms RCHAVES .)
    $end            reduce using rule 15 (body -> LCHAVES stms RCHAVES .)
    NEWLINE         reduce using rule 15 (body -> LCHAVES stms RCHAVES .)
    IF              reduce using rule 15 (body -> LCHAVES stms RCHAVES .)
    VAR             reduce using rule 15 (body -> LCHAVES stms RCHAVES .)
    FOR             reduce using rule 15 (body -> LCHAVES stms RCHAVES .)
    ID              reduce using rule 15 (body -> LCHAVES stms RCHAVES .)
    RETURN          reduce using rule 15 (body -> LCHAVES stms RCHAVES .)
    BREAK           reduce using rule 15 (body -> LCHAVES stms RCHAVES .)
    RCHAVES         reduce using rule 15 (body -> LCHAVES stms RCHAVES .)
    ELSE            reduce using rule 15 (body -> LCHAVES stms RCHAVES .)


state 45

    (18) stms -> statement stms .

    RCHAVES         reduce using rule 18 (stms -> statement stms .)


state 46

    (19) stms -> statement NEWLINE . stms
    (20) stms -> statement NEWLINE .
    (17) stms -> . statement
    (18) stms -> . statement stms
    (19) stms -> . statement NEWLINE stms
    (20) stms -> . statement NEWLINE
    (21) statement -> . statement1
    (22) statement1 -> . IF exp body ELSE body
    (23) statement1 -> . IF exp body
    (24) statement1 -> . declaration
    (25) statement1 -> . for
    (26) statement1 -> . callFunc
    (27) statement1 -> . callFuncPS
    (28) statement1 -> . return
    (29) statement1 -> . break
    (33) declaration -> . VAR ID type
    (34) declaration -> . VAR ID type ASSIGN exp
    (35) declaration -> . VAR ID type COLONEQ exp
    (36) declaration -> . VAR ID type SEMICOLON
    (37) declaration -> . VAR ID type ASSIGN exp SEMICOLON
    (38) declaration -> . VAR ID type COLONEQ exp SEMICOLON
    (30) for -> . FOR body
    (31) for -> . FOR exp body
    (32) for -> . FOR exp SEMICOLON exp SEMICOLON exp body
    (81) callFunc -> . ID LPAREN params RPAREN
    (82) callFunc -> . ID LPAREN RPAREN
    (83) callFunc -> . ID LPAREN params RPAREN SEMICOLON
    (84) callFunc -> . ID LPAREN RPAREN SEMICOLON
    (85) callFuncPS -> . ID DOT ID LPAREN params RPAREN
    (86) callFuncPS -> . ID DOT ID LPAREN RPAREN
    (87) callFuncPS -> . ID DOT ID LPAREN params RPAREN SEMICOLON
    (88) callFuncPS -> . ID DOT ID LPAREN RPAREN SEMICOLON
    (75) return -> . RETURN exp
    (76) return -> . RETURN
    (77) return -> . RETURN exp SEMICOLON
    (78) return -> . RETURN SEMICOLON
    (79) break -> . BREAK
    (80) break -> . BREAK SEMICOLON

    RCHAVES         reduce using rule 20 (stms -> statement NEWLINE .)
    IF              shift and go to state 24
    VAR             shift and go to state 31
    FOR             shift and go to state 33
    ID              shift and go to state 32
    RETURN          shift and go to state 34
    BREAK           shift and go to state 35

    statement                      shift and go to state 22
    stms                           shift and go to state 75
    statement1                     shift and go to state 23
    declaration                    shift and go to state 25
    for                            shift and go to state 26
    callFunc                       shift and go to state 27
    callFuncPS                     shift and go to state 28
    return                         shift and go to state 29
    break                          shift and go to state 30

state 47

    (22) statement1 -> IF exp . body ELSE body
    (23) statement1 -> IF exp . body
    (15) body -> . LCHAVES stms RCHAVES
    (16) body -> . LCHAVES RCHAVES

    LCHAVES         shift and go to state 16

    body                           shift and go to state 76

state 48

    (42) exp -> exp1 .
    (43) exp1 -> exp1 . ASSIGN exp2
    (44) exp1 -> exp1 . COLONEQ exp2

    LCHAVES         reduce using rule 42 (exp -> exp1 .)
    SEMICOLON       reduce using rule 42 (exp -> exp1 .)
    NEWLINE         reduce using rule 42 (exp -> exp1 .)
    IF              reduce using rule 42 (exp -> exp1 .)
    VAR             reduce using rule 42 (exp -> exp1 .)
    FOR             reduce using rule 42 (exp -> exp1 .)
    ID              reduce using rule 42 (exp -> exp1 .)
    RETURN          reduce using rule 42 (exp -> exp1 .)
    BREAK           reduce using rule 42 (exp -> exp1 .)
    RCHAVES         reduce using rule 42 (exp -> exp1 .)
    RPAREN          reduce using rule 42 (exp -> exp1 .)
    COMMA           reduce using rule 42 (exp -> exp1 .)
    ASSIGN          shift and go to state 77
    COLONEQ         shift and go to state 78


state 49

    (45) exp1 -> exp2 .
    (46) exp2 -> exp2 . OR exp3

    ASSIGN          reduce using rule 45 (exp1 -> exp2 .)
    COLONEQ         reduce using rule 45 (exp1 -> exp2 .)
    LCHAVES         reduce using rule 45 (exp1 -> exp2 .)
    SEMICOLON       reduce using rule 45 (exp1 -> exp2 .)
    NEWLINE         reduce using rule 45 (exp1 -> exp2 .)
    IF              reduce using rule 45 (exp1 -> exp2 .)
    VAR             reduce using rule 45 (exp1 -> exp2 .)
    FOR             reduce using rule 45 (exp1 -> exp2 .)
    ID              reduce using rule 45 (exp1 -> exp2 .)
    RETURN          reduce using rule 45 (exp1 -> exp2 .)
    BREAK           reduce using rule 45 (exp1 -> exp2 .)
    RCHAVES         reduce using rule 45 (exp1 -> exp2 .)
    RPAREN          reduce using rule 45 (exp1 -> exp2 .)
    COMMA           reduce using rule 45 (exp1 -> exp2 .)
    OR              shift and go to state 79


state 50

    (47) exp2 -> exp3 .
    (48) exp3 -> exp3 . AND exp4

    OR              reduce using rule 47 (exp2 -> exp3 .)
    ASSIGN          reduce using rule 47 (exp2 -> exp3 .)
    COLONEQ         reduce using rule 47 (exp2 -> exp3 .)
    LCHAVES         reduce using rule 47 (exp2 -> exp3 .)
    SEMICOLON       reduce using rule 47 (exp2 -> exp3 .)
    NEWLINE         reduce using rule 47 (exp2 -> exp3 .)
    IF              reduce using rule 47 (exp2 -> exp3 .)
    VAR             reduce using rule 47 (exp2 -> exp3 .)
    FOR             reduce using rule 47 (exp2 -> exp3 .)
    ID              reduce using rule 47 (exp2 -> exp3 .)
    RETURN          reduce using rule 47 (exp2 -> exp3 .)
    BREAK           reduce using rule 47 (exp2 -> exp3 .)
    RCHAVES         reduce using rule 47 (exp2 -> exp3 .)
    RPAREN          reduce using rule 47 (exp2 -> exp3 .)
    COMMA           reduce using rule 47 (exp2 -> exp3 .)
    AND             shift and go to state 80


state 51

    (49) exp3 -> exp4 .
    (50) exp4 -> exp4 . EQUALS exp5
    (51) exp4 -> exp4 . DIFFERENT exp5

    AND             reduce using rule 49 (exp3 -> exp4 .)
    OR              reduce using rule 49 (exp3 -> exp4 .)
    ASSIGN          reduce using rule 49 (exp3 -> exp4 .)
    COLONEQ         reduce using rule 49 (exp3 -> exp4 .)
    LCHAVES         reduce using rule 49 (exp3 -> exp4 .)
    SEMICOLON       reduce using rule 49 (exp3 -> exp4 .)
    NEWLINE         reduce using rule 49 (exp3 -> exp4 .)
    IF              reduce using rule 49 (exp3 -> exp4 .)
    VAR             reduce using rule 49 (exp3 -> exp4 .)
    FOR             reduce using rule 49 (exp3 -> exp4 .)
    ID              reduce using rule 49 (exp3 -> exp4 .)
    RETURN          reduce using rule 49 (exp3 -> exp4 .)
    BREAK           reduce using rule 49 (exp3 -> exp4 .)
    RCHAVES         reduce using rule 49 (exp3 -> exp4 .)
    RPAREN          reduce using rule 49 (exp3 -> exp4 .)
    COMMA           reduce using rule 49 (exp3 -> exp4 .)
    EQUALS          shift and go to state 81
    DIFFERENT       shift and go to state 82


state 52

    (52) exp4 -> exp5 .
    (53) exp5 -> exp5 . LESS exp6
    (54) exp5 -> exp5 . GREATER exp6
    (55) exp5 -> exp5 . LESS_EQUAL exp6
    (56) exp5 -> exp5 . GREATER_EQUAL exp6

    EQUALS          reduce using rule 52 (exp4 -> exp5 .)
    DIFFERENT       reduce using rule 52 (exp4 -> exp5 .)
    AND             reduce using rule 52 (exp4 -> exp5 .)
    OR              reduce using rule 52 (exp4 -> exp5 .)
    ASSIGN          reduce using rule 52 (exp4 -> exp5 .)
    COLONEQ         reduce using rule 52 (exp4 -> exp5 .)
    LCHAVES         reduce using rule 52 (exp4 -> exp5 .)
    SEMICOLON       reduce using rule 52 (exp4 -> exp5 .)
    NEWLINE         reduce using rule 52 (exp4 -> exp5 .)
    IF              reduce using rule 52 (exp4 -> exp5 .)
    VAR             reduce using rule 52 (exp4 -> exp5 .)
    FOR             reduce using rule 52 (exp4 -> exp5 .)
    ID              reduce using rule 52 (exp4 -> exp5 .)
    RETURN          reduce using rule 52 (exp4 -> exp5 .)
    BREAK           reduce using rule 52 (exp4 -> exp5 .)
    RCHAVES         reduce using rule 52 (exp4 -> exp5 .)
    RPAREN          reduce using rule 52 (exp4 -> exp5 .)
    COMMA           reduce using rule 52 (exp4 -> exp5 .)
    LESS            shift and go to state 83
    GREATER         shift and go to state 84
    LESS_EQUAL      shift and go to state 85
    GREATER_EQUAL   shift and go to state 86


state 53

    (57) exp5 -> exp6 .
    (58) exp6 -> exp6 . PLUS exp7
    (59) exp6 -> exp6 . MINUS exp7

    LESS            reduce using rule 57 (exp5 -> exp6 .)
    GREATER         reduce using rule 57 (exp5 -> exp6 .)
    LESS_EQUAL      reduce using rule 57 (exp5 -> exp6 .)
    GREATER_EQUAL   reduce using rule 57 (exp5 -> exp6 .)
    EQUALS          reduce using rule 57 (exp5 -> exp6 .)
    DIFFERENT       reduce using rule 57 (exp5 -> exp6 .)
    AND             reduce using rule 57 (exp5 -> exp6 .)
    OR              reduce using rule 57 (exp5 -> exp6 .)
    ASSIGN          reduce using rule 57 (exp5 -> exp6 .)
    COLONEQ         reduce using rule 57 (exp5 -> exp6 .)
    LCHAVES         reduce using rule 57 (exp5 -> exp6 .)
    SEMICOLON       reduce using rule 57 (exp5 -> exp6 .)
    NEWLINE         reduce using rule 57 (exp5 -> exp6 .)
    IF              reduce using rule 57 (exp5 -> exp6 .)
    VAR             reduce using rule 57 (exp5 -> exp6 .)
    FOR             reduce using rule 57 (exp5 -> exp6 .)
    ID              reduce using rule 57 (exp5 -> exp6 .)
    RETURN          reduce using rule 57 (exp5 -> exp6 .)
    BREAK           reduce using rule 57 (exp5 -> exp6 .)
    RCHAVES         reduce using rule 57 (exp5 -> exp6 .)
    RPAREN          reduce using rule 57 (exp5 -> exp6 .)
    COMMA           reduce using rule 57 (exp5 -> exp6 .)
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88


state 54

    (60) exp6 -> exp7 .
    (61) exp7 -> exp7 . TIMES exp8
    (62) exp7 -> exp7 . DIVIDE exp8
    (63) exp7 -> exp7 . MOD exp8

    PLUS            reduce using rule 60 (exp6 -> exp7 .)
    MINUS           reduce using rule 60 (exp6 -> exp7 .)
    LESS            reduce using rule 60 (exp6 -> exp7 .)
    GREATER         reduce using rule 60 (exp6 -> exp7 .)
    LESS_EQUAL      reduce using rule 60 (exp6 -> exp7 .)
    GREATER_EQUAL   reduce using rule 60 (exp6 -> exp7 .)
    EQUALS          reduce using rule 60 (exp6 -> exp7 .)
    DIFFERENT       reduce using rule 60 (exp6 -> exp7 .)
    AND             reduce using rule 60 (exp6 -> exp7 .)
    OR              reduce using rule 60 (exp6 -> exp7 .)
    ASSIGN          reduce using rule 60 (exp6 -> exp7 .)
    COLONEQ         reduce using rule 60 (exp6 -> exp7 .)
    LCHAVES         reduce using rule 60 (exp6 -> exp7 .)
    SEMICOLON       reduce using rule 60 (exp6 -> exp7 .)
    NEWLINE         reduce using rule 60 (exp6 -> exp7 .)
    IF              reduce using rule 60 (exp6 -> exp7 .)
    VAR             reduce using rule 60 (exp6 -> exp7 .)
    FOR             reduce using rule 60 (exp6 -> exp7 .)
    ID              reduce using rule 60 (exp6 -> exp7 .)
    RETURN          reduce using rule 60 (exp6 -> exp7 .)
    BREAK           reduce using rule 60 (exp6 -> exp7 .)
    RCHAVES         reduce using rule 60 (exp6 -> exp7 .)
    RPAREN          reduce using rule 60 (exp6 -> exp7 .)
    COMMA           reduce using rule 60 (exp6 -> exp7 .)
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 90
    MOD             shift and go to state 91


state 55

    (64) exp7 -> exp8 .
    (65) exp8 -> exp8 . DPLUS
    (66) exp8 -> exp8 . DMINUS

    TIMES           reduce using rule 64 (exp7 -> exp8 .)
    DIVIDE          reduce using rule 64 (exp7 -> exp8 .)
    MOD             reduce using rule 64 (exp7 -> exp8 .)
    PLUS            reduce using rule 64 (exp7 -> exp8 .)
    MINUS           reduce using rule 64 (exp7 -> exp8 .)
    LESS            reduce using rule 64 (exp7 -> exp8 .)
    GREATER         reduce using rule 64 (exp7 -> exp8 .)
    LESS_EQUAL      reduce using rule 64 (exp7 -> exp8 .)
    GREATER_EQUAL   reduce using rule 64 (exp7 -> exp8 .)
    EQUALS          reduce using rule 64 (exp7 -> exp8 .)
    DIFFERENT       reduce using rule 64 (exp7 -> exp8 .)
    AND             reduce using rule 64 (exp7 -> exp8 .)
    OR              reduce using rule 64 (exp7 -> exp8 .)
    ASSIGN          reduce using rule 64 (exp7 -> exp8 .)
    COLONEQ         reduce using rule 64 (exp7 -> exp8 .)
    LCHAVES         reduce using rule 64 (exp7 -> exp8 .)
    SEMICOLON       reduce using rule 64 (exp7 -> exp8 .)
    NEWLINE         reduce using rule 64 (exp7 -> exp8 .)
    IF              reduce using rule 64 (exp7 -> exp8 .)
    VAR             reduce using rule 64 (exp7 -> exp8 .)
    FOR             reduce using rule 64 (exp7 -> exp8 .)
    ID              reduce using rule 64 (exp7 -> exp8 .)
    RETURN          reduce using rule 64 (exp7 -> exp8 .)
    BREAK           reduce using rule 64 (exp7 -> exp8 .)
    RCHAVES         reduce using rule 64 (exp7 -> exp8 .)
    RPAREN          reduce using rule 64 (exp7 -> exp8 .)
    COMMA           reduce using rule 64 (exp7 -> exp8 .)
    DPLUS           shift and go to state 92
    DMINUS          shift and go to state 93


state 56

    (67) exp8 -> exp9 .

    DPLUS           reduce using rule 67 (exp8 -> exp9 .)
    DMINUS          reduce using rule 67 (exp8 -> exp9 .)
    TIMES           reduce using rule 67 (exp8 -> exp9 .)
    DIVIDE          reduce using rule 67 (exp8 -> exp9 .)
    MOD             reduce using rule 67 (exp8 -> exp9 .)
    PLUS            reduce using rule 67 (exp8 -> exp9 .)
    MINUS           reduce using rule 67 (exp8 -> exp9 .)
    LESS            reduce using rule 67 (exp8 -> exp9 .)
    GREATER         reduce using rule 67 (exp8 -> exp9 .)
    LESS_EQUAL      reduce using rule 67 (exp8 -> exp9 .)
    GREATER_EQUAL   reduce using rule 67 (exp8 -> exp9 .)
    EQUALS          reduce using rule 67 (exp8 -> exp9 .)
    DIFFERENT       reduce using rule 67 (exp8 -> exp9 .)
    AND             reduce using rule 67 (exp8 -> exp9 .)
    OR              reduce using rule 67 (exp8 -> exp9 .)
    ASSIGN          reduce using rule 67 (exp8 -> exp9 .)
    COLONEQ         reduce using rule 67 (exp8 -> exp9 .)
    LCHAVES         reduce using rule 67 (exp8 -> exp9 .)
    SEMICOLON       reduce using rule 67 (exp8 -> exp9 .)
    NEWLINE         reduce using rule 67 (exp8 -> exp9 .)
    IF              reduce using rule 67 (exp8 -> exp9 .)
    VAR             reduce using rule 67 (exp8 -> exp9 .)
    FOR             reduce using rule 67 (exp8 -> exp9 .)
    ID              reduce using rule 67 (exp8 -> exp9 .)
    RETURN          reduce using rule 67 (exp8 -> exp9 .)
    BREAK           reduce using rule 67 (exp8 -> exp9 .)
    RCHAVES         reduce using rule 67 (exp8 -> exp9 .)
    RPAREN          reduce using rule 67 (exp8 -> exp9 .)
    COMMA           reduce using rule 67 (exp8 -> exp9 .)


state 57

    (68) exp9 -> NOT . exp9
    (68) exp9 -> . NOT exp9
    (69) exp9 -> . NUMBER
    (70) exp9 -> . STRING
    (71) exp9 -> . ID
    (72) exp9 -> . TRUE
    (73) exp9 -> . FALSE
    (74) exp9 -> . LPAREN exp RPAREN

    NOT             shift and go to state 57
    NUMBER          shift and go to state 58
    STRING          shift and go to state 59
    ID              shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    LPAREN          shift and go to state 63

    exp9                           shift and go to state 94

state 58

    (69) exp9 -> NUMBER .

    DPLUS           reduce using rule 69 (exp9 -> NUMBER .)
    DMINUS          reduce using rule 69 (exp9 -> NUMBER .)
    TIMES           reduce using rule 69 (exp9 -> NUMBER .)
    DIVIDE          reduce using rule 69 (exp9 -> NUMBER .)
    MOD             reduce using rule 69 (exp9 -> NUMBER .)
    PLUS            reduce using rule 69 (exp9 -> NUMBER .)
    MINUS           reduce using rule 69 (exp9 -> NUMBER .)
    LESS            reduce using rule 69 (exp9 -> NUMBER .)
    GREATER         reduce using rule 69 (exp9 -> NUMBER .)
    LESS_EQUAL      reduce using rule 69 (exp9 -> NUMBER .)
    GREATER_EQUAL   reduce using rule 69 (exp9 -> NUMBER .)
    EQUALS          reduce using rule 69 (exp9 -> NUMBER .)
    DIFFERENT       reduce using rule 69 (exp9 -> NUMBER .)
    AND             reduce using rule 69 (exp9 -> NUMBER .)
    OR              reduce using rule 69 (exp9 -> NUMBER .)
    ASSIGN          reduce using rule 69 (exp9 -> NUMBER .)
    COLONEQ         reduce using rule 69 (exp9 -> NUMBER .)
    LCHAVES         reduce using rule 69 (exp9 -> NUMBER .)
    SEMICOLON       reduce using rule 69 (exp9 -> NUMBER .)
    NEWLINE         reduce using rule 69 (exp9 -> NUMBER .)
    IF              reduce using rule 69 (exp9 -> NUMBER .)
    VAR             reduce using rule 69 (exp9 -> NUMBER .)
    FOR             reduce using rule 69 (exp9 -> NUMBER .)
    ID              reduce using rule 69 (exp9 -> NUMBER .)
    RETURN          reduce using rule 69 (exp9 -> NUMBER .)
    BREAK           reduce using rule 69 (exp9 -> NUMBER .)
    RCHAVES         reduce using rule 69 (exp9 -> NUMBER .)
    RPAREN          reduce using rule 69 (exp9 -> NUMBER .)
    COMMA           reduce using rule 69 (exp9 -> NUMBER .)


state 59

    (70) exp9 -> STRING .

    DPLUS           reduce using rule 70 (exp9 -> STRING .)
    DMINUS          reduce using rule 70 (exp9 -> STRING .)
    TIMES           reduce using rule 70 (exp9 -> STRING .)
    DIVIDE          reduce using rule 70 (exp9 -> STRING .)
    MOD             reduce using rule 70 (exp9 -> STRING .)
    PLUS            reduce using rule 70 (exp9 -> STRING .)
    MINUS           reduce using rule 70 (exp9 -> STRING .)
    LESS            reduce using rule 70 (exp9 -> STRING .)
    GREATER         reduce using rule 70 (exp9 -> STRING .)
    LESS_EQUAL      reduce using rule 70 (exp9 -> STRING .)
    GREATER_EQUAL   reduce using rule 70 (exp9 -> STRING .)
    EQUALS          reduce using rule 70 (exp9 -> STRING .)
    DIFFERENT       reduce using rule 70 (exp9 -> STRING .)
    AND             reduce using rule 70 (exp9 -> STRING .)
    OR              reduce using rule 70 (exp9 -> STRING .)
    ASSIGN          reduce using rule 70 (exp9 -> STRING .)
    COLONEQ         reduce using rule 70 (exp9 -> STRING .)
    LCHAVES         reduce using rule 70 (exp9 -> STRING .)
    SEMICOLON       reduce using rule 70 (exp9 -> STRING .)
    NEWLINE         reduce using rule 70 (exp9 -> STRING .)
    IF              reduce using rule 70 (exp9 -> STRING .)
    VAR             reduce using rule 70 (exp9 -> STRING .)
    FOR             reduce using rule 70 (exp9 -> STRING .)
    ID              reduce using rule 70 (exp9 -> STRING .)
    RETURN          reduce using rule 70 (exp9 -> STRING .)
    BREAK           reduce using rule 70 (exp9 -> STRING .)
    RCHAVES         reduce using rule 70 (exp9 -> STRING .)
    RPAREN          reduce using rule 70 (exp9 -> STRING .)
    COMMA           reduce using rule 70 (exp9 -> STRING .)


state 60

    (71) exp9 -> ID .

    DPLUS           reduce using rule 71 (exp9 -> ID .)
    DMINUS          reduce using rule 71 (exp9 -> ID .)
    TIMES           reduce using rule 71 (exp9 -> ID .)
    DIVIDE          reduce using rule 71 (exp9 -> ID .)
    MOD             reduce using rule 71 (exp9 -> ID .)
    PLUS            reduce using rule 71 (exp9 -> ID .)
    MINUS           reduce using rule 71 (exp9 -> ID .)
    LESS            reduce using rule 71 (exp9 -> ID .)
    GREATER         reduce using rule 71 (exp9 -> ID .)
    LESS_EQUAL      reduce using rule 71 (exp9 -> ID .)
    GREATER_EQUAL   reduce using rule 71 (exp9 -> ID .)
    EQUALS          reduce using rule 71 (exp9 -> ID .)
    DIFFERENT       reduce using rule 71 (exp9 -> ID .)
    AND             reduce using rule 71 (exp9 -> ID .)
    OR              reduce using rule 71 (exp9 -> ID .)
    ASSIGN          reduce using rule 71 (exp9 -> ID .)
    COLONEQ         reduce using rule 71 (exp9 -> ID .)
    LCHAVES         reduce using rule 71 (exp9 -> ID .)
    SEMICOLON       reduce using rule 71 (exp9 -> ID .)
    NEWLINE         reduce using rule 71 (exp9 -> ID .)
    IF              reduce using rule 71 (exp9 -> ID .)
    VAR             reduce using rule 71 (exp9 -> ID .)
    FOR             reduce using rule 71 (exp9 -> ID .)
    ID              reduce using rule 71 (exp9 -> ID .)
    RETURN          reduce using rule 71 (exp9 -> ID .)
    BREAK           reduce using rule 71 (exp9 -> ID .)
    RCHAVES         reduce using rule 71 (exp9 -> ID .)
    RPAREN          reduce using rule 71 (exp9 -> ID .)
    COMMA           reduce using rule 71 (exp9 -> ID .)


state 61

    (72) exp9 -> TRUE .

    DPLUS           reduce using rule 72 (exp9 -> TRUE .)
    DMINUS          reduce using rule 72 (exp9 -> TRUE .)
    TIMES           reduce using rule 72 (exp9 -> TRUE .)
    DIVIDE          reduce using rule 72 (exp9 -> TRUE .)
    MOD             reduce using rule 72 (exp9 -> TRUE .)
    PLUS            reduce using rule 72 (exp9 -> TRUE .)
    MINUS           reduce using rule 72 (exp9 -> TRUE .)
    LESS            reduce using rule 72 (exp9 -> TRUE .)
    GREATER         reduce using rule 72 (exp9 -> TRUE .)
    LESS_EQUAL      reduce using rule 72 (exp9 -> TRUE .)
    GREATER_EQUAL   reduce using rule 72 (exp9 -> TRUE .)
    EQUALS          reduce using rule 72 (exp9 -> TRUE .)
    DIFFERENT       reduce using rule 72 (exp9 -> TRUE .)
    AND             reduce using rule 72 (exp9 -> TRUE .)
    OR              reduce using rule 72 (exp9 -> TRUE .)
    ASSIGN          reduce using rule 72 (exp9 -> TRUE .)
    COLONEQ         reduce using rule 72 (exp9 -> TRUE .)
    LCHAVES         reduce using rule 72 (exp9 -> TRUE .)
    SEMICOLON       reduce using rule 72 (exp9 -> TRUE .)
    NEWLINE         reduce using rule 72 (exp9 -> TRUE .)
    IF              reduce using rule 72 (exp9 -> TRUE .)
    VAR             reduce using rule 72 (exp9 -> TRUE .)
    FOR             reduce using rule 72 (exp9 -> TRUE .)
    ID              reduce using rule 72 (exp9 -> TRUE .)
    RETURN          reduce using rule 72 (exp9 -> TRUE .)
    BREAK           reduce using rule 72 (exp9 -> TRUE .)
    RCHAVES         reduce using rule 72 (exp9 -> TRUE .)
    RPAREN          reduce using rule 72 (exp9 -> TRUE .)
    COMMA           reduce using rule 72 (exp9 -> TRUE .)


state 62

    (73) exp9 -> FALSE .

    DPLUS           reduce using rule 73 (exp9 -> FALSE .)
    DMINUS          reduce using rule 73 (exp9 -> FALSE .)
    TIMES           reduce using rule 73 (exp9 -> FALSE .)
    DIVIDE          reduce using rule 73 (exp9 -> FALSE .)
    MOD             reduce using rule 73 (exp9 -> FALSE .)
    PLUS            reduce using rule 73 (exp9 -> FALSE .)
    MINUS           reduce using rule 73 (exp9 -> FALSE .)
    LESS            reduce using rule 73 (exp9 -> FALSE .)
    GREATER         reduce using rule 73 (exp9 -> FALSE .)
    LESS_EQUAL      reduce using rule 73 (exp9 -> FALSE .)
    GREATER_EQUAL   reduce using rule 73 (exp9 -> FALSE .)
    EQUALS          reduce using rule 73 (exp9 -> FALSE .)
    DIFFERENT       reduce using rule 73 (exp9 -> FALSE .)
    AND             reduce using rule 73 (exp9 -> FALSE .)
    OR              reduce using rule 73 (exp9 -> FALSE .)
    ASSIGN          reduce using rule 73 (exp9 -> FALSE .)
    COLONEQ         reduce using rule 73 (exp9 -> FALSE .)
    LCHAVES         reduce using rule 73 (exp9 -> FALSE .)
    SEMICOLON       reduce using rule 73 (exp9 -> FALSE .)
    NEWLINE         reduce using rule 73 (exp9 -> FALSE .)
    IF              reduce using rule 73 (exp9 -> FALSE .)
    VAR             reduce using rule 73 (exp9 -> FALSE .)
    FOR             reduce using rule 73 (exp9 -> FALSE .)
    ID              reduce using rule 73 (exp9 -> FALSE .)
    RETURN          reduce using rule 73 (exp9 -> FALSE .)
    BREAK           reduce using rule 73 (exp9 -> FALSE .)
    RCHAVES         reduce using rule 73 (exp9 -> FALSE .)
    RPAREN          reduce using rule 73 (exp9 -> FALSE .)
    COMMA           reduce using rule 73 (exp9 -> FALSE .)


state 63

    (74) exp9 -> LPAREN . exp RPAREN
    (42) exp -> . exp1
    (43) exp1 -> . exp1 ASSIGN exp2
    (44) exp1 -> . exp1 COLONEQ exp2
    (45) exp1 -> . exp2
    (46) exp2 -> . exp2 OR exp3
    (47) exp2 -> . exp3
    (48) exp3 -> . exp3 AND exp4
    (49) exp3 -> . exp4
    (50) exp4 -> . exp4 EQUALS exp5
    (51) exp4 -> . exp4 DIFFERENT exp5
    (52) exp4 -> . exp5
    (53) exp5 -> . exp5 LESS exp6
    (54) exp5 -> . exp5 GREATER exp6
    (55) exp5 -> . exp5 LESS_EQUAL exp6
    (56) exp5 -> . exp5 GREATER_EQUAL exp6
    (57) exp5 -> . exp6
    (58) exp6 -> . exp6 PLUS exp7
    (59) exp6 -> . exp6 MINUS exp7
    (60) exp6 -> . exp7
    (61) exp7 -> . exp7 TIMES exp8
    (62) exp7 -> . exp7 DIVIDE exp8
    (63) exp7 -> . exp7 MOD exp8
    (64) exp7 -> . exp8
    (65) exp8 -> . exp8 DPLUS
    (66) exp8 -> . exp8 DMINUS
    (67) exp8 -> . exp9
    (68) exp9 -> . NOT exp9
    (69) exp9 -> . NUMBER
    (70) exp9 -> . STRING
    (71) exp9 -> . ID
    (72) exp9 -> . TRUE
    (73) exp9 -> . FALSE
    (74) exp9 -> . LPAREN exp RPAREN

    NOT             shift and go to state 57
    NUMBER          shift and go to state 58
    STRING          shift and go to state 59
    ID              shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    LPAREN          shift and go to state 63

    exp                            shift and go to state 95
    exp1                           shift and go to state 48
    exp2                           shift and go to state 49
    exp3                           shift and go to state 50
    exp4                           shift and go to state 51
    exp5                           shift and go to state 52
    exp6                           shift and go to state 53
    exp7                           shift and go to state 54
    exp8                           shift and go to state 55
    exp9                           shift and go to state 56

state 64

    (33) declaration -> VAR ID . type
    (34) declaration -> VAR ID . type ASSIGN exp
    (35) declaration -> VAR ID . type COLONEQ exp
    (36) declaration -> VAR ID . type SEMICOLON
    (37) declaration -> VAR ID . type ASSIGN exp SEMICOLON
    (38) declaration -> VAR ID . type COLONEQ exp SEMICOLON
    (39) type -> . INT
    (40) type -> . STRING
    (41) type -> . BOOL

    INT             shift and go to state 40
    STRING          shift and go to state 41
    BOOL            shift and go to state 42

    type                           shift and go to state 96

state 65

    (81) callFunc -> ID LPAREN . params RPAREN
    (82) callFunc -> ID LPAREN . RPAREN
    (83) callFunc -> ID LPAREN . params RPAREN SEMICOLON
    (84) callFunc -> ID LPAREN . RPAREN SEMICOLON
    (89) params -> . exp COMMA params
    (90) params -> . exp
    (42) exp -> . exp1
    (43) exp1 -> . exp1 ASSIGN exp2
    (44) exp1 -> . exp1 COLONEQ exp2
    (45) exp1 -> . exp2
    (46) exp2 -> . exp2 OR exp3
    (47) exp2 -> . exp3
    (48) exp3 -> . exp3 AND exp4
    (49) exp3 -> . exp4
    (50) exp4 -> . exp4 EQUALS exp5
    (51) exp4 -> . exp4 DIFFERENT exp5
    (52) exp4 -> . exp5
    (53) exp5 -> . exp5 LESS exp6
    (54) exp5 -> . exp5 GREATER exp6
    (55) exp5 -> . exp5 LESS_EQUAL exp6
    (56) exp5 -> . exp5 GREATER_EQUAL exp6
    (57) exp5 -> . exp6
    (58) exp6 -> . exp6 PLUS exp7
    (59) exp6 -> . exp6 MINUS exp7
    (60) exp6 -> . exp7
    (61) exp7 -> . exp7 TIMES exp8
    (62) exp7 -> . exp7 DIVIDE exp8
    (63) exp7 -> . exp7 MOD exp8
    (64) exp7 -> . exp8
    (65) exp8 -> . exp8 DPLUS
    (66) exp8 -> . exp8 DMINUS
    (67) exp8 -> . exp9
    (68) exp9 -> . NOT exp9
    (69) exp9 -> . NUMBER
    (70) exp9 -> . STRING
    (71) exp9 -> . ID
    (72) exp9 -> . TRUE
    (73) exp9 -> . FALSE
    (74) exp9 -> . LPAREN exp RPAREN

    RPAREN          shift and go to state 98
    NOT             shift and go to state 57
    NUMBER          shift and go to state 58
    STRING          shift and go to state 59
    ID              shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    LPAREN          shift and go to state 63

    params                         shift and go to state 97
    exp                            shift and go to state 99
    exp1                           shift and go to state 48
    exp2                           shift and go to state 49
    exp3                           shift and go to state 50
    exp4                           shift and go to state 51
    exp5                           shift and go to state 52
    exp6                           shift and go to state 53
    exp7                           shift and go to state 54
    exp8                           shift and go to state 55
    exp9                           shift and go to state 56

state 66

    (85) callFuncPS -> ID DOT . ID LPAREN params RPAREN
    (86) callFuncPS -> ID DOT . ID LPAREN RPAREN
    (87) callFuncPS -> ID DOT . ID LPAREN params RPAREN SEMICOLON
    (88) callFuncPS -> ID DOT . ID LPAREN RPAREN SEMICOLON

    ID              shift and go to state 100


state 67

    (30) for -> FOR body .

    NEWLINE         reduce using rule 30 (for -> FOR body .)
    IF              reduce using rule 30 (for -> FOR body .)
    VAR             reduce using rule 30 (for -> FOR body .)
    FOR             reduce using rule 30 (for -> FOR body .)
    ID              reduce using rule 30 (for -> FOR body .)
    RETURN          reduce using rule 30 (for -> FOR body .)
    BREAK           reduce using rule 30 (for -> FOR body .)
    RCHAVES         reduce using rule 30 (for -> FOR body .)


state 68

    (31) for -> FOR exp . body
    (32) for -> FOR exp . SEMICOLON exp SEMICOLON exp body
    (15) body -> . LCHAVES stms RCHAVES
    (16) body -> . LCHAVES RCHAVES

    SEMICOLON       shift and go to state 102
    LCHAVES         shift and go to state 16

    body                           shift and go to state 101

state 69

    (75) return -> RETURN exp .
    (77) return -> RETURN exp . SEMICOLON

    NEWLINE         reduce using rule 75 (return -> RETURN exp .)
    IF              reduce using rule 75 (return -> RETURN exp .)
    VAR             reduce using rule 75 (return -> RETURN exp .)
    FOR             reduce using rule 75 (return -> RETURN exp .)
    ID              reduce using rule 75 (return -> RETURN exp .)
    RETURN          reduce using rule 75 (return -> RETURN exp .)
    BREAK           reduce using rule 75 (return -> RETURN exp .)
    RCHAVES         reduce using rule 75 (return -> RETURN exp .)
    SEMICOLON       shift and go to state 103


state 70

    (78) return -> RETURN SEMICOLON .

    NEWLINE         reduce using rule 78 (return -> RETURN SEMICOLON .)
    IF              reduce using rule 78 (return -> RETURN SEMICOLON .)
    VAR             reduce using rule 78 (return -> RETURN SEMICOLON .)
    FOR             reduce using rule 78 (return -> RETURN SEMICOLON .)
    ID              reduce using rule 78 (return -> RETURN SEMICOLON .)
    RETURN          reduce using rule 78 (return -> RETURN SEMICOLON .)
    BREAK           reduce using rule 78 (return -> RETURN SEMICOLON .)
    RCHAVES         reduce using rule 78 (return -> RETURN SEMICOLON .)


state 71

    (80) break -> BREAK SEMICOLON .

    NEWLINE         reduce using rule 80 (break -> BREAK SEMICOLON .)
    IF              reduce using rule 80 (break -> BREAK SEMICOLON .)
    VAR             reduce using rule 80 (break -> BREAK SEMICOLON .)
    FOR             reduce using rule 80 (break -> BREAK SEMICOLON .)
    ID              reduce using rule 80 (break -> BREAK SEMICOLON .)
    RETURN          reduce using rule 80 (break -> BREAK SEMICOLON .)
    BREAK           reduce using rule 80 (break -> BREAK SEMICOLON .)
    RCHAVES         reduce using rule 80 (break -> BREAK SEMICOLON .)


state 72

    (8) signature -> LPAREN sigparams RPAREN funcreturn .

    LCHAVES         reduce using rule 8 (signature -> LPAREN sigparams RPAREN funcreturn .)


state 73

    (14) funcreturn -> LPAREN type . RPAREN

    RPAREN          shift and go to state 104


state 74

    (12) sigparams -> ID type COMMA . sigparams
    (11) sigparams -> . ID type
    (12) sigparams -> . ID type COMMA sigparams

    ID              shift and go to state 19

    sigparams                      shift and go to state 105

state 75

    (19) stms -> statement NEWLINE stms .

    RCHAVES         reduce using rule 19 (stms -> statement NEWLINE stms .)


state 76

    (22) statement1 -> IF exp body . ELSE body
    (23) statement1 -> IF exp body .

    ELSE            shift and go to state 106
    NEWLINE         reduce using rule 23 (statement1 -> IF exp body .)
    IF              reduce using rule 23 (statement1 -> IF exp body .)
    VAR             reduce using rule 23 (statement1 -> IF exp body .)
    FOR             reduce using rule 23 (statement1 -> IF exp body .)
    ID              reduce using rule 23 (statement1 -> IF exp body .)
    RETURN          reduce using rule 23 (statement1 -> IF exp body .)
    BREAK           reduce using rule 23 (statement1 -> IF exp body .)
    RCHAVES         reduce using rule 23 (statement1 -> IF exp body .)


state 77

    (43) exp1 -> exp1 ASSIGN . exp2
    (46) exp2 -> . exp2 OR exp3
    (47) exp2 -> . exp3
    (48) exp3 -> . exp3 AND exp4
    (49) exp3 -> . exp4
    (50) exp4 -> . exp4 EQUALS exp5
    (51) exp4 -> . exp4 DIFFERENT exp5
    (52) exp4 -> . exp5
    (53) exp5 -> . exp5 LESS exp6
    (54) exp5 -> . exp5 GREATER exp6
    (55) exp5 -> . exp5 LESS_EQUAL exp6
    (56) exp5 -> . exp5 GREATER_EQUAL exp6
    (57) exp5 -> . exp6
    (58) exp6 -> . exp6 PLUS exp7
    (59) exp6 -> . exp6 MINUS exp7
    (60) exp6 -> . exp7
    (61) exp7 -> . exp7 TIMES exp8
    (62) exp7 -> . exp7 DIVIDE exp8
    (63) exp7 -> . exp7 MOD exp8
    (64) exp7 -> . exp8
    (65) exp8 -> . exp8 DPLUS
    (66) exp8 -> . exp8 DMINUS
    (67) exp8 -> . exp9
    (68) exp9 -> . NOT exp9
    (69) exp9 -> . NUMBER
    (70) exp9 -> . STRING
    (71) exp9 -> . ID
    (72) exp9 -> . TRUE
    (73) exp9 -> . FALSE
    (74) exp9 -> . LPAREN exp RPAREN

    NOT             shift and go to state 57
    NUMBER          shift and go to state 58
    STRING          shift and go to state 59
    ID              shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    LPAREN          shift and go to state 63

    exp2                           shift and go to state 107
    exp3                           shift and go to state 50
    exp4                           shift and go to state 51
    exp5                           shift and go to state 52
    exp6                           shift and go to state 53
    exp7                           shift and go to state 54
    exp8                           shift and go to state 55
    exp9                           shift and go to state 56

state 78

    (44) exp1 -> exp1 COLONEQ . exp2
    (46) exp2 -> . exp2 OR exp3
    (47) exp2 -> . exp3
    (48) exp3 -> . exp3 AND exp4
    (49) exp3 -> . exp4
    (50) exp4 -> . exp4 EQUALS exp5
    (51) exp4 -> . exp4 DIFFERENT exp5
    (52) exp4 -> . exp5
    (53) exp5 -> . exp5 LESS exp6
    (54) exp5 -> . exp5 GREATER exp6
    (55) exp5 -> . exp5 LESS_EQUAL exp6
    (56) exp5 -> . exp5 GREATER_EQUAL exp6
    (57) exp5 -> . exp6
    (58) exp6 -> . exp6 PLUS exp7
    (59) exp6 -> . exp6 MINUS exp7
    (60) exp6 -> . exp7
    (61) exp7 -> . exp7 TIMES exp8
    (62) exp7 -> . exp7 DIVIDE exp8
    (63) exp7 -> . exp7 MOD exp8
    (64) exp7 -> . exp8
    (65) exp8 -> . exp8 DPLUS
    (66) exp8 -> . exp8 DMINUS
    (67) exp8 -> . exp9
    (68) exp9 -> . NOT exp9
    (69) exp9 -> . NUMBER
    (70) exp9 -> . STRING
    (71) exp9 -> . ID
    (72) exp9 -> . TRUE
    (73) exp9 -> . FALSE
    (74) exp9 -> . LPAREN exp RPAREN

    NOT             shift and go to state 57
    NUMBER          shift and go to state 58
    STRING          shift and go to state 59
    ID              shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    LPAREN          shift and go to state 63

    exp2                           shift and go to state 108
    exp3                           shift and go to state 50
    exp4                           shift and go to state 51
    exp5                           shift and go to state 52
    exp6                           shift and go to state 53
    exp7                           shift and go to state 54
    exp8                           shift and go to state 55
    exp9                           shift and go to state 56

state 79

    (46) exp2 -> exp2 OR . exp3
    (48) exp3 -> . exp3 AND exp4
    (49) exp3 -> . exp4
    (50) exp4 -> . exp4 EQUALS exp5
    (51) exp4 -> . exp4 DIFFERENT exp5
    (52) exp4 -> . exp5
    (53) exp5 -> . exp5 LESS exp6
    (54) exp5 -> . exp5 GREATER exp6
    (55) exp5 -> . exp5 LESS_EQUAL exp6
    (56) exp5 -> . exp5 GREATER_EQUAL exp6
    (57) exp5 -> . exp6
    (58) exp6 -> . exp6 PLUS exp7
    (59) exp6 -> . exp6 MINUS exp7
    (60) exp6 -> . exp7
    (61) exp7 -> . exp7 TIMES exp8
    (62) exp7 -> . exp7 DIVIDE exp8
    (63) exp7 -> . exp7 MOD exp8
    (64) exp7 -> . exp8
    (65) exp8 -> . exp8 DPLUS
    (66) exp8 -> . exp8 DMINUS
    (67) exp8 -> . exp9
    (68) exp9 -> . NOT exp9
    (69) exp9 -> . NUMBER
    (70) exp9 -> . STRING
    (71) exp9 -> . ID
    (72) exp9 -> . TRUE
    (73) exp9 -> . FALSE
    (74) exp9 -> . LPAREN exp RPAREN

    NOT             shift and go to state 57
    NUMBER          shift and go to state 58
    STRING          shift and go to state 59
    ID              shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    LPAREN          shift and go to state 63

    exp3                           shift and go to state 109
    exp4                           shift and go to state 51
    exp5                           shift and go to state 52
    exp6                           shift and go to state 53
    exp7                           shift and go to state 54
    exp8                           shift and go to state 55
    exp9                           shift and go to state 56

state 80

    (48) exp3 -> exp3 AND . exp4
    (50) exp4 -> . exp4 EQUALS exp5
    (51) exp4 -> . exp4 DIFFERENT exp5
    (52) exp4 -> . exp5
    (53) exp5 -> . exp5 LESS exp6
    (54) exp5 -> . exp5 GREATER exp6
    (55) exp5 -> . exp5 LESS_EQUAL exp6
    (56) exp5 -> . exp5 GREATER_EQUAL exp6
    (57) exp5 -> . exp6
    (58) exp6 -> . exp6 PLUS exp7
    (59) exp6 -> . exp6 MINUS exp7
    (60) exp6 -> . exp7
    (61) exp7 -> . exp7 TIMES exp8
    (62) exp7 -> . exp7 DIVIDE exp8
    (63) exp7 -> . exp7 MOD exp8
    (64) exp7 -> . exp8
    (65) exp8 -> . exp8 DPLUS
    (66) exp8 -> . exp8 DMINUS
    (67) exp8 -> . exp9
    (68) exp9 -> . NOT exp9
    (69) exp9 -> . NUMBER
    (70) exp9 -> . STRING
    (71) exp9 -> . ID
    (72) exp9 -> . TRUE
    (73) exp9 -> . FALSE
    (74) exp9 -> . LPAREN exp RPAREN

    NOT             shift and go to state 57
    NUMBER          shift and go to state 58
    STRING          shift and go to state 59
    ID              shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    LPAREN          shift and go to state 63

    exp4                           shift and go to state 110
    exp5                           shift and go to state 52
    exp6                           shift and go to state 53
    exp7                           shift and go to state 54
    exp8                           shift and go to state 55
    exp9                           shift and go to state 56

state 81

    (50) exp4 -> exp4 EQUALS . exp5
    (53) exp5 -> . exp5 LESS exp6
    (54) exp5 -> . exp5 GREATER exp6
    (55) exp5 -> . exp5 LESS_EQUAL exp6
    (56) exp5 -> . exp5 GREATER_EQUAL exp6
    (57) exp5 -> . exp6
    (58) exp6 -> . exp6 PLUS exp7
    (59) exp6 -> . exp6 MINUS exp7
    (60) exp6 -> . exp7
    (61) exp7 -> . exp7 TIMES exp8
    (62) exp7 -> . exp7 DIVIDE exp8
    (63) exp7 -> . exp7 MOD exp8
    (64) exp7 -> . exp8
    (65) exp8 -> . exp8 DPLUS
    (66) exp8 -> . exp8 DMINUS
    (67) exp8 -> . exp9
    (68) exp9 -> . NOT exp9
    (69) exp9 -> . NUMBER
    (70) exp9 -> . STRING
    (71) exp9 -> . ID
    (72) exp9 -> . TRUE
    (73) exp9 -> . FALSE
    (74) exp9 -> . LPAREN exp RPAREN

    NOT             shift and go to state 57
    NUMBER          shift and go to state 58
    STRING          shift and go to state 59
    ID              shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    LPAREN          shift and go to state 63

    exp5                           shift and go to state 111
    exp6                           shift and go to state 53
    exp7                           shift and go to state 54
    exp8                           shift and go to state 55
    exp9                           shift and go to state 56

state 82

    (51) exp4 -> exp4 DIFFERENT . exp5
    (53) exp5 -> . exp5 LESS exp6
    (54) exp5 -> . exp5 GREATER exp6
    (55) exp5 -> . exp5 LESS_EQUAL exp6
    (56) exp5 -> . exp5 GREATER_EQUAL exp6
    (57) exp5 -> . exp6
    (58) exp6 -> . exp6 PLUS exp7
    (59) exp6 -> . exp6 MINUS exp7
    (60) exp6 -> . exp7
    (61) exp7 -> . exp7 TIMES exp8
    (62) exp7 -> . exp7 DIVIDE exp8
    (63) exp7 -> . exp7 MOD exp8
    (64) exp7 -> . exp8
    (65) exp8 -> . exp8 DPLUS
    (66) exp8 -> . exp8 DMINUS
    (67) exp8 -> . exp9
    (68) exp9 -> . NOT exp9
    (69) exp9 -> . NUMBER
    (70) exp9 -> . STRING
    (71) exp9 -> . ID
    (72) exp9 -> . TRUE
    (73) exp9 -> . FALSE
    (74) exp9 -> . LPAREN exp RPAREN

    NOT             shift and go to state 57
    NUMBER          shift and go to state 58
    STRING          shift and go to state 59
    ID              shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    LPAREN          shift and go to state 63

    exp5                           shift and go to state 112
    exp6                           shift and go to state 53
    exp7                           shift and go to state 54
    exp8                           shift and go to state 55
    exp9                           shift and go to state 56

state 83

    (53) exp5 -> exp5 LESS . exp6
    (58) exp6 -> . exp6 PLUS exp7
    (59) exp6 -> . exp6 MINUS exp7
    (60) exp6 -> . exp7
    (61) exp7 -> . exp7 TIMES exp8
    (62) exp7 -> . exp7 DIVIDE exp8
    (63) exp7 -> . exp7 MOD exp8
    (64) exp7 -> . exp8
    (65) exp8 -> . exp8 DPLUS
    (66) exp8 -> . exp8 DMINUS
    (67) exp8 -> . exp9
    (68) exp9 -> . NOT exp9
    (69) exp9 -> . NUMBER
    (70) exp9 -> . STRING
    (71) exp9 -> . ID
    (72) exp9 -> . TRUE
    (73) exp9 -> . FALSE
    (74) exp9 -> . LPAREN exp RPAREN

    NOT             shift and go to state 57
    NUMBER          shift and go to state 58
    STRING          shift and go to state 59
    ID              shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    LPAREN          shift and go to state 63

    exp6                           shift and go to state 113
    exp7                           shift and go to state 54
    exp8                           shift and go to state 55
    exp9                           shift and go to state 56

state 84

    (54) exp5 -> exp5 GREATER . exp6
    (58) exp6 -> . exp6 PLUS exp7
    (59) exp6 -> . exp6 MINUS exp7
    (60) exp6 -> . exp7
    (61) exp7 -> . exp7 TIMES exp8
    (62) exp7 -> . exp7 DIVIDE exp8
    (63) exp7 -> . exp7 MOD exp8
    (64) exp7 -> . exp8
    (65) exp8 -> . exp8 DPLUS
    (66) exp8 -> . exp8 DMINUS
    (67) exp8 -> . exp9
    (68) exp9 -> . NOT exp9
    (69) exp9 -> . NUMBER
    (70) exp9 -> . STRING
    (71) exp9 -> . ID
    (72) exp9 -> . TRUE
    (73) exp9 -> . FALSE
    (74) exp9 -> . LPAREN exp RPAREN

    NOT             shift and go to state 57
    NUMBER          shift and go to state 58
    STRING          shift and go to state 59
    ID              shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    LPAREN          shift and go to state 63

    exp6                           shift and go to state 114
    exp7                           shift and go to state 54
    exp8                           shift and go to state 55
    exp9                           shift and go to state 56

state 85

    (55) exp5 -> exp5 LESS_EQUAL . exp6
    (58) exp6 -> . exp6 PLUS exp7
    (59) exp6 -> . exp6 MINUS exp7
    (60) exp6 -> . exp7
    (61) exp7 -> . exp7 TIMES exp8
    (62) exp7 -> . exp7 DIVIDE exp8
    (63) exp7 -> . exp7 MOD exp8
    (64) exp7 -> . exp8
    (65) exp8 -> . exp8 DPLUS
    (66) exp8 -> . exp8 DMINUS
    (67) exp8 -> . exp9
    (68) exp9 -> . NOT exp9
    (69) exp9 -> . NUMBER
    (70) exp9 -> . STRING
    (71) exp9 -> . ID
    (72) exp9 -> . TRUE
    (73) exp9 -> . FALSE
    (74) exp9 -> . LPAREN exp RPAREN

    NOT             shift and go to state 57
    NUMBER          shift and go to state 58
    STRING          shift and go to state 59
    ID              shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    LPAREN          shift and go to state 63

    exp6                           shift and go to state 115
    exp7                           shift and go to state 54
    exp8                           shift and go to state 55
    exp9                           shift and go to state 56

state 86

    (56) exp5 -> exp5 GREATER_EQUAL . exp6
    (58) exp6 -> . exp6 PLUS exp7
    (59) exp6 -> . exp6 MINUS exp7
    (60) exp6 -> . exp7
    (61) exp7 -> . exp7 TIMES exp8
    (62) exp7 -> . exp7 DIVIDE exp8
    (63) exp7 -> . exp7 MOD exp8
    (64) exp7 -> . exp8
    (65) exp8 -> . exp8 DPLUS
    (66) exp8 -> . exp8 DMINUS
    (67) exp8 -> . exp9
    (68) exp9 -> . NOT exp9
    (69) exp9 -> . NUMBER
    (70) exp9 -> . STRING
    (71) exp9 -> . ID
    (72) exp9 -> . TRUE
    (73) exp9 -> . FALSE
    (74) exp9 -> . LPAREN exp RPAREN

    NOT             shift and go to state 57
    NUMBER          shift and go to state 58
    STRING          shift and go to state 59
    ID              shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    LPAREN          shift and go to state 63

    exp6                           shift and go to state 116
    exp7                           shift and go to state 54
    exp8                           shift and go to state 55
    exp9                           shift and go to state 56

state 87

    (58) exp6 -> exp6 PLUS . exp7
    (61) exp7 -> . exp7 TIMES exp8
    (62) exp7 -> . exp7 DIVIDE exp8
    (63) exp7 -> . exp7 MOD exp8
    (64) exp7 -> . exp8
    (65) exp8 -> . exp8 DPLUS
    (66) exp8 -> . exp8 DMINUS
    (67) exp8 -> . exp9
    (68) exp9 -> . NOT exp9
    (69) exp9 -> . NUMBER
    (70) exp9 -> . STRING
    (71) exp9 -> . ID
    (72) exp9 -> . TRUE
    (73) exp9 -> . FALSE
    (74) exp9 -> . LPAREN exp RPAREN

    NOT             shift and go to state 57
    NUMBER          shift and go to state 58
    STRING          shift and go to state 59
    ID              shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    LPAREN          shift and go to state 63

    exp7                           shift and go to state 117
    exp8                           shift and go to state 55
    exp9                           shift and go to state 56

state 88

    (59) exp6 -> exp6 MINUS . exp7
    (61) exp7 -> . exp7 TIMES exp8
    (62) exp7 -> . exp7 DIVIDE exp8
    (63) exp7 -> . exp7 MOD exp8
    (64) exp7 -> . exp8
    (65) exp8 -> . exp8 DPLUS
    (66) exp8 -> . exp8 DMINUS
    (67) exp8 -> . exp9
    (68) exp9 -> . NOT exp9
    (69) exp9 -> . NUMBER
    (70) exp9 -> . STRING
    (71) exp9 -> . ID
    (72) exp9 -> . TRUE
    (73) exp9 -> . FALSE
    (74) exp9 -> . LPAREN exp RPAREN

    NOT             shift and go to state 57
    NUMBER          shift and go to state 58
    STRING          shift and go to state 59
    ID              shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    LPAREN          shift and go to state 63

    exp7                           shift and go to state 118
    exp8                           shift and go to state 55
    exp9                           shift and go to state 56

state 89

    (61) exp7 -> exp7 TIMES . exp8
    (65) exp8 -> . exp8 DPLUS
    (66) exp8 -> . exp8 DMINUS
    (67) exp8 -> . exp9
    (68) exp9 -> . NOT exp9
    (69) exp9 -> . NUMBER
    (70) exp9 -> . STRING
    (71) exp9 -> . ID
    (72) exp9 -> . TRUE
    (73) exp9 -> . FALSE
    (74) exp9 -> . LPAREN exp RPAREN

    NOT             shift and go to state 57
    NUMBER          shift and go to state 58
    STRING          shift and go to state 59
    ID              shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    LPAREN          shift and go to state 63

    exp8                           shift and go to state 119
    exp9                           shift and go to state 56

state 90

    (62) exp7 -> exp7 DIVIDE . exp8
    (65) exp8 -> . exp8 DPLUS
    (66) exp8 -> . exp8 DMINUS
    (67) exp8 -> . exp9
    (68) exp9 -> . NOT exp9
    (69) exp9 -> . NUMBER
    (70) exp9 -> . STRING
    (71) exp9 -> . ID
    (72) exp9 -> . TRUE
    (73) exp9 -> . FALSE
    (74) exp9 -> . LPAREN exp RPAREN

    NOT             shift and go to state 57
    NUMBER          shift and go to state 58
    STRING          shift and go to state 59
    ID              shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    LPAREN          shift and go to state 63

    exp8                           shift and go to state 120
    exp9                           shift and go to state 56

state 91

    (63) exp7 -> exp7 MOD . exp8
    (65) exp8 -> . exp8 DPLUS
    (66) exp8 -> . exp8 DMINUS
    (67) exp8 -> . exp9
    (68) exp9 -> . NOT exp9
    (69) exp9 -> . NUMBER
    (70) exp9 -> . STRING
    (71) exp9 -> . ID
    (72) exp9 -> . TRUE
    (73) exp9 -> . FALSE
    (74) exp9 -> . LPAREN exp RPAREN

    NOT             shift and go to state 57
    NUMBER          shift and go to state 58
    STRING          shift and go to state 59
    ID              shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    LPAREN          shift and go to state 63

    exp8                           shift and go to state 121
    exp9                           shift and go to state 56

state 92

    (65) exp8 -> exp8 DPLUS .

    DPLUS           reduce using rule 65 (exp8 -> exp8 DPLUS .)
    DMINUS          reduce using rule 65 (exp8 -> exp8 DPLUS .)
    TIMES           reduce using rule 65 (exp8 -> exp8 DPLUS .)
    DIVIDE          reduce using rule 65 (exp8 -> exp8 DPLUS .)
    MOD             reduce using rule 65 (exp8 -> exp8 DPLUS .)
    PLUS            reduce using rule 65 (exp8 -> exp8 DPLUS .)
    MINUS           reduce using rule 65 (exp8 -> exp8 DPLUS .)
    LESS            reduce using rule 65 (exp8 -> exp8 DPLUS .)
    GREATER         reduce using rule 65 (exp8 -> exp8 DPLUS .)
    LESS_EQUAL      reduce using rule 65 (exp8 -> exp8 DPLUS .)
    GREATER_EQUAL   reduce using rule 65 (exp8 -> exp8 DPLUS .)
    EQUALS          reduce using rule 65 (exp8 -> exp8 DPLUS .)
    DIFFERENT       reduce using rule 65 (exp8 -> exp8 DPLUS .)
    AND             reduce using rule 65 (exp8 -> exp8 DPLUS .)
    OR              reduce using rule 65 (exp8 -> exp8 DPLUS .)
    ASSIGN          reduce using rule 65 (exp8 -> exp8 DPLUS .)
    COLONEQ         reduce using rule 65 (exp8 -> exp8 DPLUS .)
    LCHAVES         reduce using rule 65 (exp8 -> exp8 DPLUS .)
    SEMICOLON       reduce using rule 65 (exp8 -> exp8 DPLUS .)
    NEWLINE         reduce using rule 65 (exp8 -> exp8 DPLUS .)
    IF              reduce using rule 65 (exp8 -> exp8 DPLUS .)
    VAR             reduce using rule 65 (exp8 -> exp8 DPLUS .)
    FOR             reduce using rule 65 (exp8 -> exp8 DPLUS .)
    ID              reduce using rule 65 (exp8 -> exp8 DPLUS .)
    RETURN          reduce using rule 65 (exp8 -> exp8 DPLUS .)
    BREAK           reduce using rule 65 (exp8 -> exp8 DPLUS .)
    RCHAVES         reduce using rule 65 (exp8 -> exp8 DPLUS .)
    RPAREN          reduce using rule 65 (exp8 -> exp8 DPLUS .)
    COMMA           reduce using rule 65 (exp8 -> exp8 DPLUS .)


state 93

    (66) exp8 -> exp8 DMINUS .

    DPLUS           reduce using rule 66 (exp8 -> exp8 DMINUS .)
    DMINUS          reduce using rule 66 (exp8 -> exp8 DMINUS .)
    TIMES           reduce using rule 66 (exp8 -> exp8 DMINUS .)
    DIVIDE          reduce using rule 66 (exp8 -> exp8 DMINUS .)
    MOD             reduce using rule 66 (exp8 -> exp8 DMINUS .)
    PLUS            reduce using rule 66 (exp8 -> exp8 DMINUS .)
    MINUS           reduce using rule 66 (exp8 -> exp8 DMINUS .)
    LESS            reduce using rule 66 (exp8 -> exp8 DMINUS .)
    GREATER         reduce using rule 66 (exp8 -> exp8 DMINUS .)
    LESS_EQUAL      reduce using rule 66 (exp8 -> exp8 DMINUS .)
    GREATER_EQUAL   reduce using rule 66 (exp8 -> exp8 DMINUS .)
    EQUALS          reduce using rule 66 (exp8 -> exp8 DMINUS .)
    DIFFERENT       reduce using rule 66 (exp8 -> exp8 DMINUS .)
    AND             reduce using rule 66 (exp8 -> exp8 DMINUS .)
    OR              reduce using rule 66 (exp8 -> exp8 DMINUS .)
    ASSIGN          reduce using rule 66 (exp8 -> exp8 DMINUS .)
    COLONEQ         reduce using rule 66 (exp8 -> exp8 DMINUS .)
    LCHAVES         reduce using rule 66 (exp8 -> exp8 DMINUS .)
    SEMICOLON       reduce using rule 66 (exp8 -> exp8 DMINUS .)
    NEWLINE         reduce using rule 66 (exp8 -> exp8 DMINUS .)
    IF              reduce using rule 66 (exp8 -> exp8 DMINUS .)
    VAR             reduce using rule 66 (exp8 -> exp8 DMINUS .)
    FOR             reduce using rule 66 (exp8 -> exp8 DMINUS .)
    ID              reduce using rule 66 (exp8 -> exp8 DMINUS .)
    RETURN          reduce using rule 66 (exp8 -> exp8 DMINUS .)
    BREAK           reduce using rule 66 (exp8 -> exp8 DMINUS .)
    RCHAVES         reduce using rule 66 (exp8 -> exp8 DMINUS .)
    RPAREN          reduce using rule 66 (exp8 -> exp8 DMINUS .)
    COMMA           reduce using rule 66 (exp8 -> exp8 DMINUS .)


state 94

    (68) exp9 -> NOT exp9 .

    DPLUS           reduce using rule 68 (exp9 -> NOT exp9 .)
    DMINUS          reduce using rule 68 (exp9 -> NOT exp9 .)
    TIMES           reduce using rule 68 (exp9 -> NOT exp9 .)
    DIVIDE          reduce using rule 68 (exp9 -> NOT exp9 .)
    MOD             reduce using rule 68 (exp9 -> NOT exp9 .)
    PLUS            reduce using rule 68 (exp9 -> NOT exp9 .)
    MINUS           reduce using rule 68 (exp9 -> NOT exp9 .)
    LESS            reduce using rule 68 (exp9 -> NOT exp9 .)
    GREATER         reduce using rule 68 (exp9 -> NOT exp9 .)
    LESS_EQUAL      reduce using rule 68 (exp9 -> NOT exp9 .)
    GREATER_EQUAL   reduce using rule 68 (exp9 -> NOT exp9 .)
    EQUALS          reduce using rule 68 (exp9 -> NOT exp9 .)
    DIFFERENT       reduce using rule 68 (exp9 -> NOT exp9 .)
    AND             reduce using rule 68 (exp9 -> NOT exp9 .)
    OR              reduce using rule 68 (exp9 -> NOT exp9 .)
    ASSIGN          reduce using rule 68 (exp9 -> NOT exp9 .)
    COLONEQ         reduce using rule 68 (exp9 -> NOT exp9 .)
    LCHAVES         reduce using rule 68 (exp9 -> NOT exp9 .)
    SEMICOLON       reduce using rule 68 (exp9 -> NOT exp9 .)
    NEWLINE         reduce using rule 68 (exp9 -> NOT exp9 .)
    IF              reduce using rule 68 (exp9 -> NOT exp9 .)
    VAR             reduce using rule 68 (exp9 -> NOT exp9 .)
    FOR             reduce using rule 68 (exp9 -> NOT exp9 .)
    ID              reduce using rule 68 (exp9 -> NOT exp9 .)
    RETURN          reduce using rule 68 (exp9 -> NOT exp9 .)
    BREAK           reduce using rule 68 (exp9 -> NOT exp9 .)
    RCHAVES         reduce using rule 68 (exp9 -> NOT exp9 .)
    RPAREN          reduce using rule 68 (exp9 -> NOT exp9 .)
    COMMA           reduce using rule 68 (exp9 -> NOT exp9 .)


state 95

    (74) exp9 -> LPAREN exp . RPAREN

    RPAREN          shift and go to state 122


state 96

    (33) declaration -> VAR ID type .
    (34) declaration -> VAR ID type . ASSIGN exp
    (35) declaration -> VAR ID type . COLONEQ exp
    (36) declaration -> VAR ID type . SEMICOLON
    (37) declaration -> VAR ID type . ASSIGN exp SEMICOLON
    (38) declaration -> VAR ID type . COLONEQ exp SEMICOLON

    NEWLINE         reduce using rule 33 (declaration -> VAR ID type .)
    IF              reduce using rule 33 (declaration -> VAR ID type .)
    VAR             reduce using rule 33 (declaration -> VAR ID type .)
    FOR             reduce using rule 33 (declaration -> VAR ID type .)
    ID              reduce using rule 33 (declaration -> VAR ID type .)
    RETURN          reduce using rule 33 (declaration -> VAR ID type .)
    BREAK           reduce using rule 33 (declaration -> VAR ID type .)
    RCHAVES         reduce using rule 33 (declaration -> VAR ID type .)
    ASSIGN          shift and go to state 123
    COLONEQ         shift and go to state 124
    SEMICOLON       shift and go to state 125


state 97

    (81) callFunc -> ID LPAREN params . RPAREN
    (83) callFunc -> ID LPAREN params . RPAREN SEMICOLON

    RPAREN          shift and go to state 126


state 98

    (82) callFunc -> ID LPAREN RPAREN .
    (84) callFunc -> ID LPAREN RPAREN . SEMICOLON

    NEWLINE         reduce using rule 82 (callFunc -> ID LPAREN RPAREN .)
    IF              reduce using rule 82 (callFunc -> ID LPAREN RPAREN .)
    VAR             reduce using rule 82 (callFunc -> ID LPAREN RPAREN .)
    FOR             reduce using rule 82 (callFunc -> ID LPAREN RPAREN .)
    ID              reduce using rule 82 (callFunc -> ID LPAREN RPAREN .)
    RETURN          reduce using rule 82 (callFunc -> ID LPAREN RPAREN .)
    BREAK           reduce using rule 82 (callFunc -> ID LPAREN RPAREN .)
    RCHAVES         reduce using rule 82 (callFunc -> ID LPAREN RPAREN .)
    SEMICOLON       shift and go to state 127


state 99

    (89) params -> exp . COMMA params
    (90) params -> exp .

    COMMA           shift and go to state 128
    RPAREN          reduce using rule 90 (params -> exp .)


state 100

    (85) callFuncPS -> ID DOT ID . LPAREN params RPAREN
    (86) callFuncPS -> ID DOT ID . LPAREN RPAREN
    (87) callFuncPS -> ID DOT ID . LPAREN params RPAREN SEMICOLON
    (88) callFuncPS -> ID DOT ID . LPAREN RPAREN SEMICOLON

    LPAREN          shift and go to state 129


state 101

    (31) for -> FOR exp body .

    NEWLINE         reduce using rule 31 (for -> FOR exp body .)
    IF              reduce using rule 31 (for -> FOR exp body .)
    VAR             reduce using rule 31 (for -> FOR exp body .)
    FOR             reduce using rule 31 (for -> FOR exp body .)
    ID              reduce using rule 31 (for -> FOR exp body .)
    RETURN          reduce using rule 31 (for -> FOR exp body .)
    BREAK           reduce using rule 31 (for -> FOR exp body .)
    RCHAVES         reduce using rule 31 (for -> FOR exp body .)


state 102

    (32) for -> FOR exp SEMICOLON . exp SEMICOLON exp body
    (42) exp -> . exp1
    (43) exp1 -> . exp1 ASSIGN exp2
    (44) exp1 -> . exp1 COLONEQ exp2
    (45) exp1 -> . exp2
    (46) exp2 -> . exp2 OR exp3
    (47) exp2 -> . exp3
    (48) exp3 -> . exp3 AND exp4
    (49) exp3 -> . exp4
    (50) exp4 -> . exp4 EQUALS exp5
    (51) exp4 -> . exp4 DIFFERENT exp5
    (52) exp4 -> . exp5
    (53) exp5 -> . exp5 LESS exp6
    (54) exp5 -> . exp5 GREATER exp6
    (55) exp5 -> . exp5 LESS_EQUAL exp6
    (56) exp5 -> . exp5 GREATER_EQUAL exp6
    (57) exp5 -> . exp6
    (58) exp6 -> . exp6 PLUS exp7
    (59) exp6 -> . exp6 MINUS exp7
    (60) exp6 -> . exp7
    (61) exp7 -> . exp7 TIMES exp8
    (62) exp7 -> . exp7 DIVIDE exp8
    (63) exp7 -> . exp7 MOD exp8
    (64) exp7 -> . exp8
    (65) exp8 -> . exp8 DPLUS
    (66) exp8 -> . exp8 DMINUS
    (67) exp8 -> . exp9
    (68) exp9 -> . NOT exp9
    (69) exp9 -> . NUMBER
    (70) exp9 -> . STRING
    (71) exp9 -> . ID
    (72) exp9 -> . TRUE
    (73) exp9 -> . FALSE
    (74) exp9 -> . LPAREN exp RPAREN

    NOT             shift and go to state 57
    NUMBER          shift and go to state 58
    STRING          shift and go to state 59
    ID              shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    LPAREN          shift and go to state 63

    exp                            shift and go to state 130
    exp1                           shift and go to state 48
    exp2                           shift and go to state 49
    exp3                           shift and go to state 50
    exp4                           shift and go to state 51
    exp5                           shift and go to state 52
    exp6                           shift and go to state 53
    exp7                           shift and go to state 54
    exp8                           shift and go to state 55
    exp9                           shift and go to state 56

state 103

    (77) return -> RETURN exp SEMICOLON .

    NEWLINE         reduce using rule 77 (return -> RETURN exp SEMICOLON .)
    IF              reduce using rule 77 (return -> RETURN exp SEMICOLON .)
    VAR             reduce using rule 77 (return -> RETURN exp SEMICOLON .)
    FOR             reduce using rule 77 (return -> RETURN exp SEMICOLON .)
    ID              reduce using rule 77 (return -> RETURN exp SEMICOLON .)
    RETURN          reduce using rule 77 (return -> RETURN exp SEMICOLON .)
    BREAK           reduce using rule 77 (return -> RETURN exp SEMICOLON .)
    RCHAVES         reduce using rule 77 (return -> RETURN exp SEMICOLON .)


state 104

    (14) funcreturn -> LPAREN type RPAREN .

    LCHAVES         reduce using rule 14 (funcreturn -> LPAREN type RPAREN .)


state 105

    (12) sigparams -> ID type COMMA sigparams .

    RPAREN          reduce using rule 12 (sigparams -> ID type COMMA sigparams .)


state 106

    (22) statement1 -> IF exp body ELSE . body
    (15) body -> . LCHAVES stms RCHAVES
    (16) body -> . LCHAVES RCHAVES

    LCHAVES         shift and go to state 16

    body                           shift and go to state 131

state 107

    (43) exp1 -> exp1 ASSIGN exp2 .
    (46) exp2 -> exp2 . OR exp3

    ASSIGN          reduce using rule 43 (exp1 -> exp1 ASSIGN exp2 .)
    COLONEQ         reduce using rule 43 (exp1 -> exp1 ASSIGN exp2 .)
    LCHAVES         reduce using rule 43 (exp1 -> exp1 ASSIGN exp2 .)
    SEMICOLON       reduce using rule 43 (exp1 -> exp1 ASSIGN exp2 .)
    NEWLINE         reduce using rule 43 (exp1 -> exp1 ASSIGN exp2 .)
    IF              reduce using rule 43 (exp1 -> exp1 ASSIGN exp2 .)
    VAR             reduce using rule 43 (exp1 -> exp1 ASSIGN exp2 .)
    FOR             reduce using rule 43 (exp1 -> exp1 ASSIGN exp2 .)
    ID              reduce using rule 43 (exp1 -> exp1 ASSIGN exp2 .)
    RETURN          reduce using rule 43 (exp1 -> exp1 ASSIGN exp2 .)
    BREAK           reduce using rule 43 (exp1 -> exp1 ASSIGN exp2 .)
    RCHAVES         reduce using rule 43 (exp1 -> exp1 ASSIGN exp2 .)
    RPAREN          reduce using rule 43 (exp1 -> exp1 ASSIGN exp2 .)
    COMMA           reduce using rule 43 (exp1 -> exp1 ASSIGN exp2 .)
    OR              shift and go to state 79


state 108

    (44) exp1 -> exp1 COLONEQ exp2 .
    (46) exp2 -> exp2 . OR exp3

    ASSIGN          reduce using rule 44 (exp1 -> exp1 COLONEQ exp2 .)
    COLONEQ         reduce using rule 44 (exp1 -> exp1 COLONEQ exp2 .)
    LCHAVES         reduce using rule 44 (exp1 -> exp1 COLONEQ exp2 .)
    SEMICOLON       reduce using rule 44 (exp1 -> exp1 COLONEQ exp2 .)
    NEWLINE         reduce using rule 44 (exp1 -> exp1 COLONEQ exp2 .)
    IF              reduce using rule 44 (exp1 -> exp1 COLONEQ exp2 .)
    VAR             reduce using rule 44 (exp1 -> exp1 COLONEQ exp2 .)
    FOR             reduce using rule 44 (exp1 -> exp1 COLONEQ exp2 .)
    ID              reduce using rule 44 (exp1 -> exp1 COLONEQ exp2 .)
    RETURN          reduce using rule 44 (exp1 -> exp1 COLONEQ exp2 .)
    BREAK           reduce using rule 44 (exp1 -> exp1 COLONEQ exp2 .)
    RCHAVES         reduce using rule 44 (exp1 -> exp1 COLONEQ exp2 .)
    RPAREN          reduce using rule 44 (exp1 -> exp1 COLONEQ exp2 .)
    COMMA           reduce using rule 44 (exp1 -> exp1 COLONEQ exp2 .)
    OR              shift and go to state 79


state 109

    (46) exp2 -> exp2 OR exp3 .
    (48) exp3 -> exp3 . AND exp4

    OR              reduce using rule 46 (exp2 -> exp2 OR exp3 .)
    ASSIGN          reduce using rule 46 (exp2 -> exp2 OR exp3 .)
    COLONEQ         reduce using rule 46 (exp2 -> exp2 OR exp3 .)
    LCHAVES         reduce using rule 46 (exp2 -> exp2 OR exp3 .)
    SEMICOLON       reduce using rule 46 (exp2 -> exp2 OR exp3 .)
    NEWLINE         reduce using rule 46 (exp2 -> exp2 OR exp3 .)
    IF              reduce using rule 46 (exp2 -> exp2 OR exp3 .)
    VAR             reduce using rule 46 (exp2 -> exp2 OR exp3 .)
    FOR             reduce using rule 46 (exp2 -> exp2 OR exp3 .)
    ID              reduce using rule 46 (exp2 -> exp2 OR exp3 .)
    RETURN          reduce using rule 46 (exp2 -> exp2 OR exp3 .)
    BREAK           reduce using rule 46 (exp2 -> exp2 OR exp3 .)
    RCHAVES         reduce using rule 46 (exp2 -> exp2 OR exp3 .)
    RPAREN          reduce using rule 46 (exp2 -> exp2 OR exp3 .)
    COMMA           reduce using rule 46 (exp2 -> exp2 OR exp3 .)
    AND             shift and go to state 80


state 110

    (48) exp3 -> exp3 AND exp4 .
    (50) exp4 -> exp4 . EQUALS exp5
    (51) exp4 -> exp4 . DIFFERENT exp5

    AND             reduce using rule 48 (exp3 -> exp3 AND exp4 .)
    OR              reduce using rule 48 (exp3 -> exp3 AND exp4 .)
    ASSIGN          reduce using rule 48 (exp3 -> exp3 AND exp4 .)
    COLONEQ         reduce using rule 48 (exp3 -> exp3 AND exp4 .)
    LCHAVES         reduce using rule 48 (exp3 -> exp3 AND exp4 .)
    SEMICOLON       reduce using rule 48 (exp3 -> exp3 AND exp4 .)
    NEWLINE         reduce using rule 48 (exp3 -> exp3 AND exp4 .)
    IF              reduce using rule 48 (exp3 -> exp3 AND exp4 .)
    VAR             reduce using rule 48 (exp3 -> exp3 AND exp4 .)
    FOR             reduce using rule 48 (exp3 -> exp3 AND exp4 .)
    ID              reduce using rule 48 (exp3 -> exp3 AND exp4 .)
    RETURN          reduce using rule 48 (exp3 -> exp3 AND exp4 .)
    BREAK           reduce using rule 48 (exp3 -> exp3 AND exp4 .)
    RCHAVES         reduce using rule 48 (exp3 -> exp3 AND exp4 .)
    RPAREN          reduce using rule 48 (exp3 -> exp3 AND exp4 .)
    COMMA           reduce using rule 48 (exp3 -> exp3 AND exp4 .)
    EQUALS          shift and go to state 81
    DIFFERENT       shift and go to state 82


state 111

    (50) exp4 -> exp4 EQUALS exp5 .
    (53) exp5 -> exp5 . LESS exp6
    (54) exp5 -> exp5 . GREATER exp6
    (55) exp5 -> exp5 . LESS_EQUAL exp6
    (56) exp5 -> exp5 . GREATER_EQUAL exp6

    EQUALS          reduce using rule 50 (exp4 -> exp4 EQUALS exp5 .)
    DIFFERENT       reduce using rule 50 (exp4 -> exp4 EQUALS exp5 .)
    AND             reduce using rule 50 (exp4 -> exp4 EQUALS exp5 .)
    OR              reduce using rule 50 (exp4 -> exp4 EQUALS exp5 .)
    ASSIGN          reduce using rule 50 (exp4 -> exp4 EQUALS exp5 .)
    COLONEQ         reduce using rule 50 (exp4 -> exp4 EQUALS exp5 .)
    LCHAVES         reduce using rule 50 (exp4 -> exp4 EQUALS exp5 .)
    SEMICOLON       reduce using rule 50 (exp4 -> exp4 EQUALS exp5 .)
    NEWLINE         reduce using rule 50 (exp4 -> exp4 EQUALS exp5 .)
    IF              reduce using rule 50 (exp4 -> exp4 EQUALS exp5 .)
    VAR             reduce using rule 50 (exp4 -> exp4 EQUALS exp5 .)
    FOR             reduce using rule 50 (exp4 -> exp4 EQUALS exp5 .)
    ID              reduce using rule 50 (exp4 -> exp4 EQUALS exp5 .)
    RETURN          reduce using rule 50 (exp4 -> exp4 EQUALS exp5 .)
    BREAK           reduce using rule 50 (exp4 -> exp4 EQUALS exp5 .)
    RCHAVES         reduce using rule 50 (exp4 -> exp4 EQUALS exp5 .)
    RPAREN          reduce using rule 50 (exp4 -> exp4 EQUALS exp5 .)
    COMMA           reduce using rule 50 (exp4 -> exp4 EQUALS exp5 .)
    LESS            shift and go to state 83
    GREATER         shift and go to state 84
    LESS_EQUAL      shift and go to state 85
    GREATER_EQUAL   shift and go to state 86


state 112

    (51) exp4 -> exp4 DIFFERENT exp5 .
    (53) exp5 -> exp5 . LESS exp6
    (54) exp5 -> exp5 . GREATER exp6
    (55) exp5 -> exp5 . LESS_EQUAL exp6
    (56) exp5 -> exp5 . GREATER_EQUAL exp6

    EQUALS          reduce using rule 51 (exp4 -> exp4 DIFFERENT exp5 .)
    DIFFERENT       reduce using rule 51 (exp4 -> exp4 DIFFERENT exp5 .)
    AND             reduce using rule 51 (exp4 -> exp4 DIFFERENT exp5 .)
    OR              reduce using rule 51 (exp4 -> exp4 DIFFERENT exp5 .)
    ASSIGN          reduce using rule 51 (exp4 -> exp4 DIFFERENT exp5 .)
    COLONEQ         reduce using rule 51 (exp4 -> exp4 DIFFERENT exp5 .)
    LCHAVES         reduce using rule 51 (exp4 -> exp4 DIFFERENT exp5 .)
    SEMICOLON       reduce using rule 51 (exp4 -> exp4 DIFFERENT exp5 .)
    NEWLINE         reduce using rule 51 (exp4 -> exp4 DIFFERENT exp5 .)
    IF              reduce using rule 51 (exp4 -> exp4 DIFFERENT exp5 .)
    VAR             reduce using rule 51 (exp4 -> exp4 DIFFERENT exp5 .)
    FOR             reduce using rule 51 (exp4 -> exp4 DIFFERENT exp5 .)
    ID              reduce using rule 51 (exp4 -> exp4 DIFFERENT exp5 .)
    RETURN          reduce using rule 51 (exp4 -> exp4 DIFFERENT exp5 .)
    BREAK           reduce using rule 51 (exp4 -> exp4 DIFFERENT exp5 .)
    RCHAVES         reduce using rule 51 (exp4 -> exp4 DIFFERENT exp5 .)
    RPAREN          reduce using rule 51 (exp4 -> exp4 DIFFERENT exp5 .)
    COMMA           reduce using rule 51 (exp4 -> exp4 DIFFERENT exp5 .)
    LESS            shift and go to state 83
    GREATER         shift and go to state 84
    LESS_EQUAL      shift and go to state 85
    GREATER_EQUAL   shift and go to state 86


state 113

    (53) exp5 -> exp5 LESS exp6 .
    (58) exp6 -> exp6 . PLUS exp7
    (59) exp6 -> exp6 . MINUS exp7

    LESS            reduce using rule 53 (exp5 -> exp5 LESS exp6 .)
    GREATER         reduce using rule 53 (exp5 -> exp5 LESS exp6 .)
    LESS_EQUAL      reduce using rule 53 (exp5 -> exp5 LESS exp6 .)
    GREATER_EQUAL   reduce using rule 53 (exp5 -> exp5 LESS exp6 .)
    EQUALS          reduce using rule 53 (exp5 -> exp5 LESS exp6 .)
    DIFFERENT       reduce using rule 53 (exp5 -> exp5 LESS exp6 .)
    AND             reduce using rule 53 (exp5 -> exp5 LESS exp6 .)
    OR              reduce using rule 53 (exp5 -> exp5 LESS exp6 .)
    ASSIGN          reduce using rule 53 (exp5 -> exp5 LESS exp6 .)
    COLONEQ         reduce using rule 53 (exp5 -> exp5 LESS exp6 .)
    LCHAVES         reduce using rule 53 (exp5 -> exp5 LESS exp6 .)
    SEMICOLON       reduce using rule 53 (exp5 -> exp5 LESS exp6 .)
    NEWLINE         reduce using rule 53 (exp5 -> exp5 LESS exp6 .)
    IF              reduce using rule 53 (exp5 -> exp5 LESS exp6 .)
    VAR             reduce using rule 53 (exp5 -> exp5 LESS exp6 .)
    FOR             reduce using rule 53 (exp5 -> exp5 LESS exp6 .)
    ID              reduce using rule 53 (exp5 -> exp5 LESS exp6 .)
    RETURN          reduce using rule 53 (exp5 -> exp5 LESS exp6 .)
    BREAK           reduce using rule 53 (exp5 -> exp5 LESS exp6 .)
    RCHAVES         reduce using rule 53 (exp5 -> exp5 LESS exp6 .)
    RPAREN          reduce using rule 53 (exp5 -> exp5 LESS exp6 .)
    COMMA           reduce using rule 53 (exp5 -> exp5 LESS exp6 .)
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88


state 114

    (54) exp5 -> exp5 GREATER exp6 .
    (58) exp6 -> exp6 . PLUS exp7
    (59) exp6 -> exp6 . MINUS exp7

    LESS            reduce using rule 54 (exp5 -> exp5 GREATER exp6 .)
    GREATER         reduce using rule 54 (exp5 -> exp5 GREATER exp6 .)
    LESS_EQUAL      reduce using rule 54 (exp5 -> exp5 GREATER exp6 .)
    GREATER_EQUAL   reduce using rule 54 (exp5 -> exp5 GREATER exp6 .)
    EQUALS          reduce using rule 54 (exp5 -> exp5 GREATER exp6 .)
    DIFFERENT       reduce using rule 54 (exp5 -> exp5 GREATER exp6 .)
    AND             reduce using rule 54 (exp5 -> exp5 GREATER exp6 .)
    OR              reduce using rule 54 (exp5 -> exp5 GREATER exp6 .)
    ASSIGN          reduce using rule 54 (exp5 -> exp5 GREATER exp6 .)
    COLONEQ         reduce using rule 54 (exp5 -> exp5 GREATER exp6 .)
    LCHAVES         reduce using rule 54 (exp5 -> exp5 GREATER exp6 .)
    SEMICOLON       reduce using rule 54 (exp5 -> exp5 GREATER exp6 .)
    NEWLINE         reduce using rule 54 (exp5 -> exp5 GREATER exp6 .)
    IF              reduce using rule 54 (exp5 -> exp5 GREATER exp6 .)
    VAR             reduce using rule 54 (exp5 -> exp5 GREATER exp6 .)
    FOR             reduce using rule 54 (exp5 -> exp5 GREATER exp6 .)
    ID              reduce using rule 54 (exp5 -> exp5 GREATER exp6 .)
    RETURN          reduce using rule 54 (exp5 -> exp5 GREATER exp6 .)
    BREAK           reduce using rule 54 (exp5 -> exp5 GREATER exp6 .)
    RCHAVES         reduce using rule 54 (exp5 -> exp5 GREATER exp6 .)
    RPAREN          reduce using rule 54 (exp5 -> exp5 GREATER exp6 .)
    COMMA           reduce using rule 54 (exp5 -> exp5 GREATER exp6 .)
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88


state 115

    (55) exp5 -> exp5 LESS_EQUAL exp6 .
    (58) exp6 -> exp6 . PLUS exp7
    (59) exp6 -> exp6 . MINUS exp7

    LESS            reduce using rule 55 (exp5 -> exp5 LESS_EQUAL exp6 .)
    GREATER         reduce using rule 55 (exp5 -> exp5 LESS_EQUAL exp6 .)
    LESS_EQUAL      reduce using rule 55 (exp5 -> exp5 LESS_EQUAL exp6 .)
    GREATER_EQUAL   reduce using rule 55 (exp5 -> exp5 LESS_EQUAL exp6 .)
    EQUALS          reduce using rule 55 (exp5 -> exp5 LESS_EQUAL exp6 .)
    DIFFERENT       reduce using rule 55 (exp5 -> exp5 LESS_EQUAL exp6 .)
    AND             reduce using rule 55 (exp5 -> exp5 LESS_EQUAL exp6 .)
    OR              reduce using rule 55 (exp5 -> exp5 LESS_EQUAL exp6 .)
    ASSIGN          reduce using rule 55 (exp5 -> exp5 LESS_EQUAL exp6 .)
    COLONEQ         reduce using rule 55 (exp5 -> exp5 LESS_EQUAL exp6 .)
    LCHAVES         reduce using rule 55 (exp5 -> exp5 LESS_EQUAL exp6 .)
    SEMICOLON       reduce using rule 55 (exp5 -> exp5 LESS_EQUAL exp6 .)
    NEWLINE         reduce using rule 55 (exp5 -> exp5 LESS_EQUAL exp6 .)
    IF              reduce using rule 55 (exp5 -> exp5 LESS_EQUAL exp6 .)
    VAR             reduce using rule 55 (exp5 -> exp5 LESS_EQUAL exp6 .)
    FOR             reduce using rule 55 (exp5 -> exp5 LESS_EQUAL exp6 .)
    ID              reduce using rule 55 (exp5 -> exp5 LESS_EQUAL exp6 .)
    RETURN          reduce using rule 55 (exp5 -> exp5 LESS_EQUAL exp6 .)
    BREAK           reduce using rule 55 (exp5 -> exp5 LESS_EQUAL exp6 .)
    RCHAVES         reduce using rule 55 (exp5 -> exp5 LESS_EQUAL exp6 .)
    RPAREN          reduce using rule 55 (exp5 -> exp5 LESS_EQUAL exp6 .)
    COMMA           reduce using rule 55 (exp5 -> exp5 LESS_EQUAL exp6 .)
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88


state 116

    (56) exp5 -> exp5 GREATER_EQUAL exp6 .
    (58) exp6 -> exp6 . PLUS exp7
    (59) exp6 -> exp6 . MINUS exp7

    LESS            reduce using rule 56 (exp5 -> exp5 GREATER_EQUAL exp6 .)
    GREATER         reduce using rule 56 (exp5 -> exp5 GREATER_EQUAL exp6 .)
    LESS_EQUAL      reduce using rule 56 (exp5 -> exp5 GREATER_EQUAL exp6 .)
    GREATER_EQUAL   reduce using rule 56 (exp5 -> exp5 GREATER_EQUAL exp6 .)
    EQUALS          reduce using rule 56 (exp5 -> exp5 GREATER_EQUAL exp6 .)
    DIFFERENT       reduce using rule 56 (exp5 -> exp5 GREATER_EQUAL exp6 .)
    AND             reduce using rule 56 (exp5 -> exp5 GREATER_EQUAL exp6 .)
    OR              reduce using rule 56 (exp5 -> exp5 GREATER_EQUAL exp6 .)
    ASSIGN          reduce using rule 56 (exp5 -> exp5 GREATER_EQUAL exp6 .)
    COLONEQ         reduce using rule 56 (exp5 -> exp5 GREATER_EQUAL exp6 .)
    LCHAVES         reduce using rule 56 (exp5 -> exp5 GREATER_EQUAL exp6 .)
    SEMICOLON       reduce using rule 56 (exp5 -> exp5 GREATER_EQUAL exp6 .)
    NEWLINE         reduce using rule 56 (exp5 -> exp5 GREATER_EQUAL exp6 .)
    IF              reduce using rule 56 (exp5 -> exp5 GREATER_EQUAL exp6 .)
    VAR             reduce using rule 56 (exp5 -> exp5 GREATER_EQUAL exp6 .)
    FOR             reduce using rule 56 (exp5 -> exp5 GREATER_EQUAL exp6 .)
    ID              reduce using rule 56 (exp5 -> exp5 GREATER_EQUAL exp6 .)
    RETURN          reduce using rule 56 (exp5 -> exp5 GREATER_EQUAL exp6 .)
    BREAK           reduce using rule 56 (exp5 -> exp5 GREATER_EQUAL exp6 .)
    RCHAVES         reduce using rule 56 (exp5 -> exp5 GREATER_EQUAL exp6 .)
    RPAREN          reduce using rule 56 (exp5 -> exp5 GREATER_EQUAL exp6 .)
    COMMA           reduce using rule 56 (exp5 -> exp5 GREATER_EQUAL exp6 .)
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88


state 117

    (58) exp6 -> exp6 PLUS exp7 .
    (61) exp7 -> exp7 . TIMES exp8
    (62) exp7 -> exp7 . DIVIDE exp8
    (63) exp7 -> exp7 . MOD exp8

    PLUS            reduce using rule 58 (exp6 -> exp6 PLUS exp7 .)
    MINUS           reduce using rule 58 (exp6 -> exp6 PLUS exp7 .)
    LESS            reduce using rule 58 (exp6 -> exp6 PLUS exp7 .)
    GREATER         reduce using rule 58 (exp6 -> exp6 PLUS exp7 .)
    LESS_EQUAL      reduce using rule 58 (exp6 -> exp6 PLUS exp7 .)
    GREATER_EQUAL   reduce using rule 58 (exp6 -> exp6 PLUS exp7 .)
    EQUALS          reduce using rule 58 (exp6 -> exp6 PLUS exp7 .)
    DIFFERENT       reduce using rule 58 (exp6 -> exp6 PLUS exp7 .)
    AND             reduce using rule 58 (exp6 -> exp6 PLUS exp7 .)
    OR              reduce using rule 58 (exp6 -> exp6 PLUS exp7 .)
    ASSIGN          reduce using rule 58 (exp6 -> exp6 PLUS exp7 .)
    COLONEQ         reduce using rule 58 (exp6 -> exp6 PLUS exp7 .)
    LCHAVES         reduce using rule 58 (exp6 -> exp6 PLUS exp7 .)
    SEMICOLON       reduce using rule 58 (exp6 -> exp6 PLUS exp7 .)
    NEWLINE         reduce using rule 58 (exp6 -> exp6 PLUS exp7 .)
    IF              reduce using rule 58 (exp6 -> exp6 PLUS exp7 .)
    VAR             reduce using rule 58 (exp6 -> exp6 PLUS exp7 .)
    FOR             reduce using rule 58 (exp6 -> exp6 PLUS exp7 .)
    ID              reduce using rule 58 (exp6 -> exp6 PLUS exp7 .)
    RETURN          reduce using rule 58 (exp6 -> exp6 PLUS exp7 .)
    BREAK           reduce using rule 58 (exp6 -> exp6 PLUS exp7 .)
    RCHAVES         reduce using rule 58 (exp6 -> exp6 PLUS exp7 .)
    RPAREN          reduce using rule 58 (exp6 -> exp6 PLUS exp7 .)
    COMMA           reduce using rule 58 (exp6 -> exp6 PLUS exp7 .)
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 90
    MOD             shift and go to state 91


state 118

    (59) exp6 -> exp6 MINUS exp7 .
    (61) exp7 -> exp7 . TIMES exp8
    (62) exp7 -> exp7 . DIVIDE exp8
    (63) exp7 -> exp7 . MOD exp8

    PLUS            reduce using rule 59 (exp6 -> exp6 MINUS exp7 .)
    MINUS           reduce using rule 59 (exp6 -> exp6 MINUS exp7 .)
    LESS            reduce using rule 59 (exp6 -> exp6 MINUS exp7 .)
    GREATER         reduce using rule 59 (exp6 -> exp6 MINUS exp7 .)
    LESS_EQUAL      reduce using rule 59 (exp6 -> exp6 MINUS exp7 .)
    GREATER_EQUAL   reduce using rule 59 (exp6 -> exp6 MINUS exp7 .)
    EQUALS          reduce using rule 59 (exp6 -> exp6 MINUS exp7 .)
    DIFFERENT       reduce using rule 59 (exp6 -> exp6 MINUS exp7 .)
    AND             reduce using rule 59 (exp6 -> exp6 MINUS exp7 .)
    OR              reduce using rule 59 (exp6 -> exp6 MINUS exp7 .)
    ASSIGN          reduce using rule 59 (exp6 -> exp6 MINUS exp7 .)
    COLONEQ         reduce using rule 59 (exp6 -> exp6 MINUS exp7 .)
    LCHAVES         reduce using rule 59 (exp6 -> exp6 MINUS exp7 .)
    SEMICOLON       reduce using rule 59 (exp6 -> exp6 MINUS exp7 .)
    NEWLINE         reduce using rule 59 (exp6 -> exp6 MINUS exp7 .)
    IF              reduce using rule 59 (exp6 -> exp6 MINUS exp7 .)
    VAR             reduce using rule 59 (exp6 -> exp6 MINUS exp7 .)
    FOR             reduce using rule 59 (exp6 -> exp6 MINUS exp7 .)
    ID              reduce using rule 59 (exp6 -> exp6 MINUS exp7 .)
    RETURN          reduce using rule 59 (exp6 -> exp6 MINUS exp7 .)
    BREAK           reduce using rule 59 (exp6 -> exp6 MINUS exp7 .)
    RCHAVES         reduce using rule 59 (exp6 -> exp6 MINUS exp7 .)
    RPAREN          reduce using rule 59 (exp6 -> exp6 MINUS exp7 .)
    COMMA           reduce using rule 59 (exp6 -> exp6 MINUS exp7 .)
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 90
    MOD             shift and go to state 91


state 119

    (61) exp7 -> exp7 TIMES exp8 .
    (65) exp8 -> exp8 . DPLUS
    (66) exp8 -> exp8 . DMINUS

    TIMES           reduce using rule 61 (exp7 -> exp7 TIMES exp8 .)
    DIVIDE          reduce using rule 61 (exp7 -> exp7 TIMES exp8 .)
    MOD             reduce using rule 61 (exp7 -> exp7 TIMES exp8 .)
    PLUS            reduce using rule 61 (exp7 -> exp7 TIMES exp8 .)
    MINUS           reduce using rule 61 (exp7 -> exp7 TIMES exp8 .)
    LESS            reduce using rule 61 (exp7 -> exp7 TIMES exp8 .)
    GREATER         reduce using rule 61 (exp7 -> exp7 TIMES exp8 .)
    LESS_EQUAL      reduce using rule 61 (exp7 -> exp7 TIMES exp8 .)
    GREATER_EQUAL   reduce using rule 61 (exp7 -> exp7 TIMES exp8 .)
    EQUALS          reduce using rule 61 (exp7 -> exp7 TIMES exp8 .)
    DIFFERENT       reduce using rule 61 (exp7 -> exp7 TIMES exp8 .)
    AND             reduce using rule 61 (exp7 -> exp7 TIMES exp8 .)
    OR              reduce using rule 61 (exp7 -> exp7 TIMES exp8 .)
    ASSIGN          reduce using rule 61 (exp7 -> exp7 TIMES exp8 .)
    COLONEQ         reduce using rule 61 (exp7 -> exp7 TIMES exp8 .)
    LCHAVES         reduce using rule 61 (exp7 -> exp7 TIMES exp8 .)
    SEMICOLON       reduce using rule 61 (exp7 -> exp7 TIMES exp8 .)
    NEWLINE         reduce using rule 61 (exp7 -> exp7 TIMES exp8 .)
    IF              reduce using rule 61 (exp7 -> exp7 TIMES exp8 .)
    VAR             reduce using rule 61 (exp7 -> exp7 TIMES exp8 .)
    FOR             reduce using rule 61 (exp7 -> exp7 TIMES exp8 .)
    ID              reduce using rule 61 (exp7 -> exp7 TIMES exp8 .)
    RETURN          reduce using rule 61 (exp7 -> exp7 TIMES exp8 .)
    BREAK           reduce using rule 61 (exp7 -> exp7 TIMES exp8 .)
    RCHAVES         reduce using rule 61 (exp7 -> exp7 TIMES exp8 .)
    RPAREN          reduce using rule 61 (exp7 -> exp7 TIMES exp8 .)
    COMMA           reduce using rule 61 (exp7 -> exp7 TIMES exp8 .)
    DPLUS           shift and go to state 92
    DMINUS          shift and go to state 93


state 120

    (62) exp7 -> exp7 DIVIDE exp8 .
    (65) exp8 -> exp8 . DPLUS
    (66) exp8 -> exp8 . DMINUS

    TIMES           reduce using rule 62 (exp7 -> exp7 DIVIDE exp8 .)
    DIVIDE          reduce using rule 62 (exp7 -> exp7 DIVIDE exp8 .)
    MOD             reduce using rule 62 (exp7 -> exp7 DIVIDE exp8 .)
    PLUS            reduce using rule 62 (exp7 -> exp7 DIVIDE exp8 .)
    MINUS           reduce using rule 62 (exp7 -> exp7 DIVIDE exp8 .)
    LESS            reduce using rule 62 (exp7 -> exp7 DIVIDE exp8 .)
    GREATER         reduce using rule 62 (exp7 -> exp7 DIVIDE exp8 .)
    LESS_EQUAL      reduce using rule 62 (exp7 -> exp7 DIVIDE exp8 .)
    GREATER_EQUAL   reduce using rule 62 (exp7 -> exp7 DIVIDE exp8 .)
    EQUALS          reduce using rule 62 (exp7 -> exp7 DIVIDE exp8 .)
    DIFFERENT       reduce using rule 62 (exp7 -> exp7 DIVIDE exp8 .)
    AND             reduce using rule 62 (exp7 -> exp7 DIVIDE exp8 .)
    OR              reduce using rule 62 (exp7 -> exp7 DIVIDE exp8 .)
    ASSIGN          reduce using rule 62 (exp7 -> exp7 DIVIDE exp8 .)
    COLONEQ         reduce using rule 62 (exp7 -> exp7 DIVIDE exp8 .)
    LCHAVES         reduce using rule 62 (exp7 -> exp7 DIVIDE exp8 .)
    SEMICOLON       reduce using rule 62 (exp7 -> exp7 DIVIDE exp8 .)
    NEWLINE         reduce using rule 62 (exp7 -> exp7 DIVIDE exp8 .)
    IF              reduce using rule 62 (exp7 -> exp7 DIVIDE exp8 .)
    VAR             reduce using rule 62 (exp7 -> exp7 DIVIDE exp8 .)
    FOR             reduce using rule 62 (exp7 -> exp7 DIVIDE exp8 .)
    ID              reduce using rule 62 (exp7 -> exp7 DIVIDE exp8 .)
    RETURN          reduce using rule 62 (exp7 -> exp7 DIVIDE exp8 .)
    BREAK           reduce using rule 62 (exp7 -> exp7 DIVIDE exp8 .)
    RCHAVES         reduce using rule 62 (exp7 -> exp7 DIVIDE exp8 .)
    RPAREN          reduce using rule 62 (exp7 -> exp7 DIVIDE exp8 .)
    COMMA           reduce using rule 62 (exp7 -> exp7 DIVIDE exp8 .)
    DPLUS           shift and go to state 92
    DMINUS          shift and go to state 93


state 121

    (63) exp7 -> exp7 MOD exp8 .
    (65) exp8 -> exp8 . DPLUS
    (66) exp8 -> exp8 . DMINUS

    TIMES           reduce using rule 63 (exp7 -> exp7 MOD exp8 .)
    DIVIDE          reduce using rule 63 (exp7 -> exp7 MOD exp8 .)
    MOD             reduce using rule 63 (exp7 -> exp7 MOD exp8 .)
    PLUS            reduce using rule 63 (exp7 -> exp7 MOD exp8 .)
    MINUS           reduce using rule 63 (exp7 -> exp7 MOD exp8 .)
    LESS            reduce using rule 63 (exp7 -> exp7 MOD exp8 .)
    GREATER         reduce using rule 63 (exp7 -> exp7 MOD exp8 .)
    LESS_EQUAL      reduce using rule 63 (exp7 -> exp7 MOD exp8 .)
    GREATER_EQUAL   reduce using rule 63 (exp7 -> exp7 MOD exp8 .)
    EQUALS          reduce using rule 63 (exp7 -> exp7 MOD exp8 .)
    DIFFERENT       reduce using rule 63 (exp7 -> exp7 MOD exp8 .)
    AND             reduce using rule 63 (exp7 -> exp7 MOD exp8 .)
    OR              reduce using rule 63 (exp7 -> exp7 MOD exp8 .)
    ASSIGN          reduce using rule 63 (exp7 -> exp7 MOD exp8 .)
    COLONEQ         reduce using rule 63 (exp7 -> exp7 MOD exp8 .)
    LCHAVES         reduce using rule 63 (exp7 -> exp7 MOD exp8 .)
    SEMICOLON       reduce using rule 63 (exp7 -> exp7 MOD exp8 .)
    NEWLINE         reduce using rule 63 (exp7 -> exp7 MOD exp8 .)
    IF              reduce using rule 63 (exp7 -> exp7 MOD exp8 .)
    VAR             reduce using rule 63 (exp7 -> exp7 MOD exp8 .)
    FOR             reduce using rule 63 (exp7 -> exp7 MOD exp8 .)
    ID              reduce using rule 63 (exp7 -> exp7 MOD exp8 .)
    RETURN          reduce using rule 63 (exp7 -> exp7 MOD exp8 .)
    BREAK           reduce using rule 63 (exp7 -> exp7 MOD exp8 .)
    RCHAVES         reduce using rule 63 (exp7 -> exp7 MOD exp8 .)
    RPAREN          reduce using rule 63 (exp7 -> exp7 MOD exp8 .)
    COMMA           reduce using rule 63 (exp7 -> exp7 MOD exp8 .)
    DPLUS           shift and go to state 92
    DMINUS          shift and go to state 93


state 122

    (74) exp9 -> LPAREN exp RPAREN .

    DPLUS           reduce using rule 74 (exp9 -> LPAREN exp RPAREN .)
    DMINUS          reduce using rule 74 (exp9 -> LPAREN exp RPAREN .)
    TIMES           reduce using rule 74 (exp9 -> LPAREN exp RPAREN .)
    DIVIDE          reduce using rule 74 (exp9 -> LPAREN exp RPAREN .)
    MOD             reduce using rule 74 (exp9 -> LPAREN exp RPAREN .)
    PLUS            reduce using rule 74 (exp9 -> LPAREN exp RPAREN .)
    MINUS           reduce using rule 74 (exp9 -> LPAREN exp RPAREN .)
    LESS            reduce using rule 74 (exp9 -> LPAREN exp RPAREN .)
    GREATER         reduce using rule 74 (exp9 -> LPAREN exp RPAREN .)
    LESS_EQUAL      reduce using rule 74 (exp9 -> LPAREN exp RPAREN .)
    GREATER_EQUAL   reduce using rule 74 (exp9 -> LPAREN exp RPAREN .)
    EQUALS          reduce using rule 74 (exp9 -> LPAREN exp RPAREN .)
    DIFFERENT       reduce using rule 74 (exp9 -> LPAREN exp RPAREN .)
    AND             reduce using rule 74 (exp9 -> LPAREN exp RPAREN .)
    OR              reduce using rule 74 (exp9 -> LPAREN exp RPAREN .)
    ASSIGN          reduce using rule 74 (exp9 -> LPAREN exp RPAREN .)
    COLONEQ         reduce using rule 74 (exp9 -> LPAREN exp RPAREN .)
    LCHAVES         reduce using rule 74 (exp9 -> LPAREN exp RPAREN .)
    SEMICOLON       reduce using rule 74 (exp9 -> LPAREN exp RPAREN .)
    NEWLINE         reduce using rule 74 (exp9 -> LPAREN exp RPAREN .)
    IF              reduce using rule 74 (exp9 -> LPAREN exp RPAREN .)
    VAR             reduce using rule 74 (exp9 -> LPAREN exp RPAREN .)
    FOR             reduce using rule 74 (exp9 -> LPAREN exp RPAREN .)
    ID              reduce using rule 74 (exp9 -> LPAREN exp RPAREN .)
    RETURN          reduce using rule 74 (exp9 -> LPAREN exp RPAREN .)
    BREAK           reduce using rule 74 (exp9 -> LPAREN exp RPAREN .)
    RCHAVES         reduce using rule 74 (exp9 -> LPAREN exp RPAREN .)
    RPAREN          reduce using rule 74 (exp9 -> LPAREN exp RPAREN .)
    COMMA           reduce using rule 74 (exp9 -> LPAREN exp RPAREN .)


state 123

    (34) declaration -> VAR ID type ASSIGN . exp
    (37) declaration -> VAR ID type ASSIGN . exp SEMICOLON
    (42) exp -> . exp1
    (43) exp1 -> . exp1 ASSIGN exp2
    (44) exp1 -> . exp1 COLONEQ exp2
    (45) exp1 -> . exp2
    (46) exp2 -> . exp2 OR exp3
    (47) exp2 -> . exp3
    (48) exp3 -> . exp3 AND exp4
    (49) exp3 -> . exp4
    (50) exp4 -> . exp4 EQUALS exp5
    (51) exp4 -> . exp4 DIFFERENT exp5
    (52) exp4 -> . exp5
    (53) exp5 -> . exp5 LESS exp6
    (54) exp5 -> . exp5 GREATER exp6
    (55) exp5 -> . exp5 LESS_EQUAL exp6
    (56) exp5 -> . exp5 GREATER_EQUAL exp6
    (57) exp5 -> . exp6
    (58) exp6 -> . exp6 PLUS exp7
    (59) exp6 -> . exp6 MINUS exp7
    (60) exp6 -> . exp7
    (61) exp7 -> . exp7 TIMES exp8
    (62) exp7 -> . exp7 DIVIDE exp8
    (63) exp7 -> . exp7 MOD exp8
    (64) exp7 -> . exp8
    (65) exp8 -> . exp8 DPLUS
    (66) exp8 -> . exp8 DMINUS
    (67) exp8 -> . exp9
    (68) exp9 -> . NOT exp9
    (69) exp9 -> . NUMBER
    (70) exp9 -> . STRING
    (71) exp9 -> . ID
    (72) exp9 -> . TRUE
    (73) exp9 -> . FALSE
    (74) exp9 -> . LPAREN exp RPAREN

    NOT             shift and go to state 57
    NUMBER          shift and go to state 58
    STRING          shift and go to state 59
    ID              shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    LPAREN          shift and go to state 63

    exp                            shift and go to state 132
    exp1                           shift and go to state 48
    exp2                           shift and go to state 49
    exp3                           shift and go to state 50
    exp4                           shift and go to state 51
    exp5                           shift and go to state 52
    exp6                           shift and go to state 53
    exp7                           shift and go to state 54
    exp8                           shift and go to state 55
    exp9                           shift and go to state 56

state 124

    (35) declaration -> VAR ID type COLONEQ . exp
    (38) declaration -> VAR ID type COLONEQ . exp SEMICOLON
    (42) exp -> . exp1
    (43) exp1 -> . exp1 ASSIGN exp2
    (44) exp1 -> . exp1 COLONEQ exp2
    (45) exp1 -> . exp2
    (46) exp2 -> . exp2 OR exp3
    (47) exp2 -> . exp3
    (48) exp3 -> . exp3 AND exp4
    (49) exp3 -> . exp4
    (50) exp4 -> . exp4 EQUALS exp5
    (51) exp4 -> . exp4 DIFFERENT exp5
    (52) exp4 -> . exp5
    (53) exp5 -> . exp5 LESS exp6
    (54) exp5 -> . exp5 GREATER exp6
    (55) exp5 -> . exp5 LESS_EQUAL exp6
    (56) exp5 -> . exp5 GREATER_EQUAL exp6
    (57) exp5 -> . exp6
    (58) exp6 -> . exp6 PLUS exp7
    (59) exp6 -> . exp6 MINUS exp7
    (60) exp6 -> . exp7
    (61) exp7 -> . exp7 TIMES exp8
    (62) exp7 -> . exp7 DIVIDE exp8
    (63) exp7 -> . exp7 MOD exp8
    (64) exp7 -> . exp8
    (65) exp8 -> . exp8 DPLUS
    (66) exp8 -> . exp8 DMINUS
    (67) exp8 -> . exp9
    (68) exp9 -> . NOT exp9
    (69) exp9 -> . NUMBER
    (70) exp9 -> . STRING
    (71) exp9 -> . ID
    (72) exp9 -> . TRUE
    (73) exp9 -> . FALSE
    (74) exp9 -> . LPAREN exp RPAREN

    NOT             shift and go to state 57
    NUMBER          shift and go to state 58
    STRING          shift and go to state 59
    ID              shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    LPAREN          shift and go to state 63

    exp                            shift and go to state 133
    exp1                           shift and go to state 48
    exp2                           shift and go to state 49
    exp3                           shift and go to state 50
    exp4                           shift and go to state 51
    exp5                           shift and go to state 52
    exp6                           shift and go to state 53
    exp7                           shift and go to state 54
    exp8                           shift and go to state 55
    exp9                           shift and go to state 56

state 125

    (36) declaration -> VAR ID type SEMICOLON .

    NEWLINE         reduce using rule 36 (declaration -> VAR ID type SEMICOLON .)
    IF              reduce using rule 36 (declaration -> VAR ID type SEMICOLON .)
    VAR             reduce using rule 36 (declaration -> VAR ID type SEMICOLON .)
    FOR             reduce using rule 36 (declaration -> VAR ID type SEMICOLON .)
    ID              reduce using rule 36 (declaration -> VAR ID type SEMICOLON .)
    RETURN          reduce using rule 36 (declaration -> VAR ID type SEMICOLON .)
    BREAK           reduce using rule 36 (declaration -> VAR ID type SEMICOLON .)
    RCHAVES         reduce using rule 36 (declaration -> VAR ID type SEMICOLON .)


state 126

    (81) callFunc -> ID LPAREN params RPAREN .
    (83) callFunc -> ID LPAREN params RPAREN . SEMICOLON

    NEWLINE         reduce using rule 81 (callFunc -> ID LPAREN params RPAREN .)
    IF              reduce using rule 81 (callFunc -> ID LPAREN params RPAREN .)
    VAR             reduce using rule 81 (callFunc -> ID LPAREN params RPAREN .)
    FOR             reduce using rule 81 (callFunc -> ID LPAREN params RPAREN .)
    ID              reduce using rule 81 (callFunc -> ID LPAREN params RPAREN .)
    RETURN          reduce using rule 81 (callFunc -> ID LPAREN params RPAREN .)
    BREAK           reduce using rule 81 (callFunc -> ID LPAREN params RPAREN .)
    RCHAVES         reduce using rule 81 (callFunc -> ID LPAREN params RPAREN .)
    SEMICOLON       shift and go to state 134


state 127

    (84) callFunc -> ID LPAREN RPAREN SEMICOLON .

    NEWLINE         reduce using rule 84 (callFunc -> ID LPAREN RPAREN SEMICOLON .)
    IF              reduce using rule 84 (callFunc -> ID LPAREN RPAREN SEMICOLON .)
    VAR             reduce using rule 84 (callFunc -> ID LPAREN RPAREN SEMICOLON .)
    FOR             reduce using rule 84 (callFunc -> ID LPAREN RPAREN SEMICOLON .)
    ID              reduce using rule 84 (callFunc -> ID LPAREN RPAREN SEMICOLON .)
    RETURN          reduce using rule 84 (callFunc -> ID LPAREN RPAREN SEMICOLON .)
    BREAK           reduce using rule 84 (callFunc -> ID LPAREN RPAREN SEMICOLON .)
    RCHAVES         reduce using rule 84 (callFunc -> ID LPAREN RPAREN SEMICOLON .)


state 128

    (89) params -> exp COMMA . params
    (89) params -> . exp COMMA params
    (90) params -> . exp
    (42) exp -> . exp1
    (43) exp1 -> . exp1 ASSIGN exp2
    (44) exp1 -> . exp1 COLONEQ exp2
    (45) exp1 -> . exp2
    (46) exp2 -> . exp2 OR exp3
    (47) exp2 -> . exp3
    (48) exp3 -> . exp3 AND exp4
    (49) exp3 -> . exp4
    (50) exp4 -> . exp4 EQUALS exp5
    (51) exp4 -> . exp4 DIFFERENT exp5
    (52) exp4 -> . exp5
    (53) exp5 -> . exp5 LESS exp6
    (54) exp5 -> . exp5 GREATER exp6
    (55) exp5 -> . exp5 LESS_EQUAL exp6
    (56) exp5 -> . exp5 GREATER_EQUAL exp6
    (57) exp5 -> . exp6
    (58) exp6 -> . exp6 PLUS exp7
    (59) exp6 -> . exp6 MINUS exp7
    (60) exp6 -> . exp7
    (61) exp7 -> . exp7 TIMES exp8
    (62) exp7 -> . exp7 DIVIDE exp8
    (63) exp7 -> . exp7 MOD exp8
    (64) exp7 -> . exp8
    (65) exp8 -> . exp8 DPLUS
    (66) exp8 -> . exp8 DMINUS
    (67) exp8 -> . exp9
    (68) exp9 -> . NOT exp9
    (69) exp9 -> . NUMBER
    (70) exp9 -> . STRING
    (71) exp9 -> . ID
    (72) exp9 -> . TRUE
    (73) exp9 -> . FALSE
    (74) exp9 -> . LPAREN exp RPAREN

    NOT             shift and go to state 57
    NUMBER          shift and go to state 58
    STRING          shift and go to state 59
    ID              shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    LPAREN          shift and go to state 63

    exp                            shift and go to state 99
    params                         shift and go to state 135
    exp1                           shift and go to state 48
    exp2                           shift and go to state 49
    exp3                           shift and go to state 50
    exp4                           shift and go to state 51
    exp5                           shift and go to state 52
    exp6                           shift and go to state 53
    exp7                           shift and go to state 54
    exp8                           shift and go to state 55
    exp9                           shift and go to state 56

state 129

    (85) callFuncPS -> ID DOT ID LPAREN . params RPAREN
    (86) callFuncPS -> ID DOT ID LPAREN . RPAREN
    (87) callFuncPS -> ID DOT ID LPAREN . params RPAREN SEMICOLON
    (88) callFuncPS -> ID DOT ID LPAREN . RPAREN SEMICOLON
    (89) params -> . exp COMMA params
    (90) params -> . exp
    (42) exp -> . exp1
    (43) exp1 -> . exp1 ASSIGN exp2
    (44) exp1 -> . exp1 COLONEQ exp2
    (45) exp1 -> . exp2
    (46) exp2 -> . exp2 OR exp3
    (47) exp2 -> . exp3
    (48) exp3 -> . exp3 AND exp4
    (49) exp3 -> . exp4
    (50) exp4 -> . exp4 EQUALS exp5
    (51) exp4 -> . exp4 DIFFERENT exp5
    (52) exp4 -> . exp5
    (53) exp5 -> . exp5 LESS exp6
    (54) exp5 -> . exp5 GREATER exp6
    (55) exp5 -> . exp5 LESS_EQUAL exp6
    (56) exp5 -> . exp5 GREATER_EQUAL exp6
    (57) exp5 -> . exp6
    (58) exp6 -> . exp6 PLUS exp7
    (59) exp6 -> . exp6 MINUS exp7
    (60) exp6 -> . exp7
    (61) exp7 -> . exp7 TIMES exp8
    (62) exp7 -> . exp7 DIVIDE exp8
    (63) exp7 -> . exp7 MOD exp8
    (64) exp7 -> . exp8
    (65) exp8 -> . exp8 DPLUS
    (66) exp8 -> . exp8 DMINUS
    (67) exp8 -> . exp9
    (68) exp9 -> . NOT exp9
    (69) exp9 -> . NUMBER
    (70) exp9 -> . STRING
    (71) exp9 -> . ID
    (72) exp9 -> . TRUE
    (73) exp9 -> . FALSE
    (74) exp9 -> . LPAREN exp RPAREN

    RPAREN          shift and go to state 137
    NOT             shift and go to state 57
    NUMBER          shift and go to state 58
    STRING          shift and go to state 59
    ID              shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    LPAREN          shift and go to state 63

    params                         shift and go to state 136
    exp                            shift and go to state 99
    exp1                           shift and go to state 48
    exp2                           shift and go to state 49
    exp3                           shift and go to state 50
    exp4                           shift and go to state 51
    exp5                           shift and go to state 52
    exp6                           shift and go to state 53
    exp7                           shift and go to state 54
    exp8                           shift and go to state 55
    exp9                           shift and go to state 56

state 130

    (32) for -> FOR exp SEMICOLON exp . SEMICOLON exp body

    SEMICOLON       shift and go to state 138


state 131

    (22) statement1 -> IF exp body ELSE body .

    NEWLINE         reduce using rule 22 (statement1 -> IF exp body ELSE body .)
    IF              reduce using rule 22 (statement1 -> IF exp body ELSE body .)
    VAR             reduce using rule 22 (statement1 -> IF exp body ELSE body .)
    FOR             reduce using rule 22 (statement1 -> IF exp body ELSE body .)
    ID              reduce using rule 22 (statement1 -> IF exp body ELSE body .)
    RETURN          reduce using rule 22 (statement1 -> IF exp body ELSE body .)
    BREAK           reduce using rule 22 (statement1 -> IF exp body ELSE body .)
    RCHAVES         reduce using rule 22 (statement1 -> IF exp body ELSE body .)


state 132

    (34) declaration -> VAR ID type ASSIGN exp .
    (37) declaration -> VAR ID type ASSIGN exp . SEMICOLON

    NEWLINE         reduce using rule 34 (declaration -> VAR ID type ASSIGN exp .)
    IF              reduce using rule 34 (declaration -> VAR ID type ASSIGN exp .)
    VAR             reduce using rule 34 (declaration -> VAR ID type ASSIGN exp .)
    FOR             reduce using rule 34 (declaration -> VAR ID type ASSIGN exp .)
    ID              reduce using rule 34 (declaration -> VAR ID type ASSIGN exp .)
    RETURN          reduce using rule 34 (declaration -> VAR ID type ASSIGN exp .)
    BREAK           reduce using rule 34 (declaration -> VAR ID type ASSIGN exp .)
    RCHAVES         reduce using rule 34 (declaration -> VAR ID type ASSIGN exp .)
    SEMICOLON       shift and go to state 139


state 133

    (35) declaration -> VAR ID type COLONEQ exp .
    (38) declaration -> VAR ID type COLONEQ exp . SEMICOLON

    NEWLINE         reduce using rule 35 (declaration -> VAR ID type COLONEQ exp .)
    IF              reduce using rule 35 (declaration -> VAR ID type COLONEQ exp .)
    VAR             reduce using rule 35 (declaration -> VAR ID type COLONEQ exp .)
    FOR             reduce using rule 35 (declaration -> VAR ID type COLONEQ exp .)
    ID              reduce using rule 35 (declaration -> VAR ID type COLONEQ exp .)
    RETURN          reduce using rule 35 (declaration -> VAR ID type COLONEQ exp .)
    BREAK           reduce using rule 35 (declaration -> VAR ID type COLONEQ exp .)
    RCHAVES         reduce using rule 35 (declaration -> VAR ID type COLONEQ exp .)
    SEMICOLON       shift and go to state 140


state 134

    (83) callFunc -> ID LPAREN params RPAREN SEMICOLON .

    NEWLINE         reduce using rule 83 (callFunc -> ID LPAREN params RPAREN SEMICOLON .)
    IF              reduce using rule 83 (callFunc -> ID LPAREN params RPAREN SEMICOLON .)
    VAR             reduce using rule 83 (callFunc -> ID LPAREN params RPAREN SEMICOLON .)
    FOR             reduce using rule 83 (callFunc -> ID LPAREN params RPAREN SEMICOLON .)
    ID              reduce using rule 83 (callFunc -> ID LPAREN params RPAREN SEMICOLON .)
    RETURN          reduce using rule 83 (callFunc -> ID LPAREN params RPAREN SEMICOLON .)
    BREAK           reduce using rule 83 (callFunc -> ID LPAREN params RPAREN SEMICOLON .)
    RCHAVES         reduce using rule 83 (callFunc -> ID LPAREN params RPAREN SEMICOLON .)


state 135

    (89) params -> exp COMMA params .

    RPAREN          reduce using rule 89 (params -> exp COMMA params .)


state 136

    (85) callFuncPS -> ID DOT ID LPAREN params . RPAREN
    (87) callFuncPS -> ID DOT ID LPAREN params . RPAREN SEMICOLON

    RPAREN          shift and go to state 141


state 137

    (86) callFuncPS -> ID DOT ID LPAREN RPAREN .
    (88) callFuncPS -> ID DOT ID LPAREN RPAREN . SEMICOLON

    NEWLINE         reduce using rule 86 (callFuncPS -> ID DOT ID LPAREN RPAREN .)
    IF              reduce using rule 86 (callFuncPS -> ID DOT ID LPAREN RPAREN .)
    VAR             reduce using rule 86 (callFuncPS -> ID DOT ID LPAREN RPAREN .)
    FOR             reduce using rule 86 (callFuncPS -> ID DOT ID LPAREN RPAREN .)
    ID              reduce using rule 86 (callFuncPS -> ID DOT ID LPAREN RPAREN .)
    RETURN          reduce using rule 86 (callFuncPS -> ID DOT ID LPAREN RPAREN .)
    BREAK           reduce using rule 86 (callFuncPS -> ID DOT ID LPAREN RPAREN .)
    RCHAVES         reduce using rule 86 (callFuncPS -> ID DOT ID LPAREN RPAREN .)
    SEMICOLON       shift and go to state 142


state 138

    (32) for -> FOR exp SEMICOLON exp SEMICOLON . exp body
    (42) exp -> . exp1
    (43) exp1 -> . exp1 ASSIGN exp2
    (44) exp1 -> . exp1 COLONEQ exp2
    (45) exp1 -> . exp2
    (46) exp2 -> . exp2 OR exp3
    (47) exp2 -> . exp3
    (48) exp3 -> . exp3 AND exp4
    (49) exp3 -> . exp4
    (50) exp4 -> . exp4 EQUALS exp5
    (51) exp4 -> . exp4 DIFFERENT exp5
    (52) exp4 -> . exp5
    (53) exp5 -> . exp5 LESS exp6
    (54) exp5 -> . exp5 GREATER exp6
    (55) exp5 -> . exp5 LESS_EQUAL exp6
    (56) exp5 -> . exp5 GREATER_EQUAL exp6
    (57) exp5 -> . exp6
    (58) exp6 -> . exp6 PLUS exp7
    (59) exp6 -> . exp6 MINUS exp7
    (60) exp6 -> . exp7
    (61) exp7 -> . exp7 TIMES exp8
    (62) exp7 -> . exp7 DIVIDE exp8
    (63) exp7 -> . exp7 MOD exp8
    (64) exp7 -> . exp8
    (65) exp8 -> . exp8 DPLUS
    (66) exp8 -> . exp8 DMINUS
    (67) exp8 -> . exp9
    (68) exp9 -> . NOT exp9
    (69) exp9 -> . NUMBER
    (70) exp9 -> . STRING
    (71) exp9 -> . ID
    (72) exp9 -> . TRUE
    (73) exp9 -> . FALSE
    (74) exp9 -> . LPAREN exp RPAREN

    NOT             shift and go to state 57
    NUMBER          shift and go to state 58
    STRING          shift and go to state 59
    ID              shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    LPAREN          shift and go to state 63

    exp                            shift and go to state 143
    exp1                           shift and go to state 48
    exp2                           shift and go to state 49
    exp3                           shift and go to state 50
    exp4                           shift and go to state 51
    exp5                           shift and go to state 52
    exp6                           shift and go to state 53
    exp7                           shift and go to state 54
    exp8                           shift and go to state 55
    exp9                           shift and go to state 56

state 139

    (37) declaration -> VAR ID type ASSIGN exp SEMICOLON .

    NEWLINE         reduce using rule 37 (declaration -> VAR ID type ASSIGN exp SEMICOLON .)
    IF              reduce using rule 37 (declaration -> VAR ID type ASSIGN exp SEMICOLON .)
    VAR             reduce using rule 37 (declaration -> VAR ID type ASSIGN exp SEMICOLON .)
    FOR             reduce using rule 37 (declaration -> VAR ID type ASSIGN exp SEMICOLON .)
    ID              reduce using rule 37 (declaration -> VAR ID type ASSIGN exp SEMICOLON .)
    RETURN          reduce using rule 37 (declaration -> VAR ID type ASSIGN exp SEMICOLON .)
    BREAK           reduce using rule 37 (declaration -> VAR ID type ASSIGN exp SEMICOLON .)
    RCHAVES         reduce using rule 37 (declaration -> VAR ID type ASSIGN exp SEMICOLON .)


state 140

    (38) declaration -> VAR ID type COLONEQ exp SEMICOLON .

    NEWLINE         reduce using rule 38 (declaration -> VAR ID type COLONEQ exp SEMICOLON .)
    IF              reduce using rule 38 (declaration -> VAR ID type COLONEQ exp SEMICOLON .)
    VAR             reduce using rule 38 (declaration -> VAR ID type COLONEQ exp SEMICOLON .)
    FOR             reduce using rule 38 (declaration -> VAR ID type COLONEQ exp SEMICOLON .)
    ID              reduce using rule 38 (declaration -> VAR ID type COLONEQ exp SEMICOLON .)
    RETURN          reduce using rule 38 (declaration -> VAR ID type COLONEQ exp SEMICOLON .)
    BREAK           reduce using rule 38 (declaration -> VAR ID type COLONEQ exp SEMICOLON .)
    RCHAVES         reduce using rule 38 (declaration -> VAR ID type COLONEQ exp SEMICOLON .)


state 141

    (85) callFuncPS -> ID DOT ID LPAREN params RPAREN .
    (87) callFuncPS -> ID DOT ID LPAREN params RPAREN . SEMICOLON

    NEWLINE         reduce using rule 85 (callFuncPS -> ID DOT ID LPAREN params RPAREN .)
    IF              reduce using rule 85 (callFuncPS -> ID DOT ID LPAREN params RPAREN .)
    VAR             reduce using rule 85 (callFuncPS -> ID DOT ID LPAREN params RPAREN .)
    FOR             reduce using rule 85 (callFuncPS -> ID DOT ID LPAREN params RPAREN .)
    ID              reduce using rule 85 (callFuncPS -> ID DOT ID LPAREN params RPAREN .)
    RETURN          reduce using rule 85 (callFuncPS -> ID DOT ID LPAREN params RPAREN .)
    BREAK           reduce using rule 85 (callFuncPS -> ID DOT ID LPAREN params RPAREN .)
    RCHAVES         reduce using rule 85 (callFuncPS -> ID DOT ID LPAREN params RPAREN .)
    SEMICOLON       shift and go to state 144


state 142

    (88) callFuncPS -> ID DOT ID LPAREN RPAREN SEMICOLON .

    NEWLINE         reduce using rule 88 (callFuncPS -> ID DOT ID LPAREN RPAREN SEMICOLON .)
    IF              reduce using rule 88 (callFuncPS -> ID DOT ID LPAREN RPAREN SEMICOLON .)
    VAR             reduce using rule 88 (callFuncPS -> ID DOT ID LPAREN RPAREN SEMICOLON .)
    FOR             reduce using rule 88 (callFuncPS -> ID DOT ID LPAREN RPAREN SEMICOLON .)
    ID              reduce using rule 88 (callFuncPS -> ID DOT ID LPAREN RPAREN SEMICOLON .)
    RETURN          reduce using rule 88 (callFuncPS -> ID DOT ID LPAREN RPAREN SEMICOLON .)
    BREAK           reduce using rule 88 (callFuncPS -> ID DOT ID LPAREN RPAREN SEMICOLON .)
    RCHAVES         reduce using rule 88 (callFuncPS -> ID DOT ID LPAREN RPAREN SEMICOLON .)


state 143

    (32) for -> FOR exp SEMICOLON exp SEMICOLON exp . body
    (15) body -> . LCHAVES stms RCHAVES
    (16) body -> . LCHAVES RCHAVES

    LCHAVES         shift and go to state 16

    body                           shift and go to state 145

state 144

    (87) callFuncPS -> ID DOT ID LPAREN params RPAREN SEMICOLON .

    NEWLINE         reduce using rule 87 (callFuncPS -> ID DOT ID LPAREN params RPAREN SEMICOLON .)
    IF              reduce using rule 87 (callFuncPS -> ID DOT ID LPAREN params RPAREN SEMICOLON .)
    VAR             reduce using rule 87 (callFuncPS -> ID DOT ID LPAREN params RPAREN SEMICOLON .)
    FOR             reduce using rule 87 (callFuncPS -> ID DOT ID LPAREN params RPAREN SEMICOLON .)
    ID              reduce using rule 87 (callFuncPS -> ID DOT ID LPAREN params RPAREN SEMICOLON .)
    RETURN          reduce using rule 87 (callFuncPS -> ID DOT ID LPAREN params RPAREN SEMICOLON .)
    BREAK           reduce using rule 87 (callFuncPS -> ID DOT ID LPAREN params RPAREN SEMICOLON .)
    RCHAVES         reduce using rule 87 (callFuncPS -> ID DOT ID LPAREN params RPAREN SEMICOLON .)


state 145

    (32) for -> FOR exp SEMICOLON exp SEMICOLON exp body .

    NEWLINE         reduce using rule 32 (for -> FOR exp SEMICOLON exp SEMICOLON exp body .)
    IF              reduce using rule 32 (for -> FOR exp SEMICOLON exp SEMICOLON exp body .)
    VAR             reduce using rule 32 (for -> FOR exp SEMICOLON exp SEMICOLON exp body .)
    FOR             reduce using rule 32 (for -> FOR exp SEMICOLON exp SEMICOLON exp body .)
    ID              reduce using rule 32 (for -> FOR exp SEMICOLON exp SEMICOLON exp body .)
    RETURN          reduce using rule 32 (for -> FOR exp SEMICOLON exp SEMICOLON exp body .)
    BREAK           reduce using rule 32 (for -> FOR exp SEMICOLON exp SEMICOLON exp body .)
    RCHAVES         reduce using rule 32 (for -> FOR exp SEMICOLON exp SEMICOLON exp body .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ID in state 34 resolved as shift
