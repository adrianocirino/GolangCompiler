Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> programaGO
Rule 1     programaGO -> defpackage defimport funcdecls
Rule 2     programaGO -> NEWLINE defpackage defimport funcdecls
Rule 3     defpackage -> PACKAGE ID NEWLINE
Rule 4     defimport -> IMPORT STRING NEWLINE
Rule 5     funcdecl -> FUNC ID signature NEWLINE body NEWLINE
Rule 6     funcdecl -> FUNC ID signature body
Rule 7     funcdecl -> FUNC ID signature body NEWLINE
Rule 8     funcdecls -> funcdecl
Rule 9     funcdecls -> funcdecl funcdecls
Rule 10    signature -> LPAREN sigparams RPAREN
Rule 11    signature -> LPAREN sigparams RPAREN funcreturn
Rule 12    signature -> LPAREN RPAREN
Rule 13    signature -> LPAREN RPAREN funcreturn
Rule 14    sigparams -> ID type
Rule 15    sigparams -> ID type COMMA sigparams
Rule 16    funcreturn -> type
Rule 17    funcreturn -> LPAREN type RPAREN
Rule 18    body -> LCHAVES NEWLINE stms RCHAVES
Rule 19    body -> LCHAVES NEWLINE RCHAVES
Rule 20    stms -> statement
Rule 21    stms -> statement NEWLINE stms
Rule 22    stms -> statement NEWLINE
Rule 23    statement -> statement1
Rule 24    statement1 -> IF exp body ELSE body
Rule 25    statement1 -> IF exp body
Rule 26    statement1 -> declaration
Rule 27    statement1 -> for
Rule 28    statement1 -> callFunc
Rule 29    statement1 -> callFuncPS
Rule 30    statement1 -> return
Rule 31    statement1 -> break
Rule 32    for -> FOR body
Rule 33    for -> FOR exp body
Rule 34    for -> FOR exp SEMICOLON exp SEMICOLON exp body
Rule 35    declaration -> VAR ID type
Rule 36    declaration -> VAR ID type ASSIGN exp
Rule 37    declaration -> VAR ID type COLONEQ exp
Rule 38    declaration -> VAR ID type SEMICOLON
Rule 39    declaration -> VAR ID type ASSIGN exp SEMICOLON
Rule 40    declaration -> VAR ID type COLONEQ exp SEMICOLON
Rule 41    type -> INT
Rule 42    type -> STRING
Rule 43    type -> BOOL
Rule 44    exp -> exp1
Rule 45    exp1 -> exp1 ASSIGN exp2
Rule 46    exp1 -> exp1 COLONEQ exp2
Rule 47    exp1 -> exp2
Rule 48    exp2 -> exp2 OR exp3
Rule 49    exp2 -> exp3
Rule 50    exp3 -> exp3 AND exp4
Rule 51    exp3 -> exp4
Rule 52    exp4 -> exp4 EQUALS exp5
Rule 53    exp4 -> exp4 DIFFERENT exp5
Rule 54    exp4 -> exp5
Rule 55    exp5 -> exp5 LESS exp6
Rule 56    exp5 -> exp5 GREATER exp6
Rule 57    exp5 -> exp5 LESS_EQUAL exp6
Rule 58    exp5 -> exp5 GREATER_EQUAL exp6
Rule 59    exp5 -> exp6
Rule 60    exp6 -> exp6 PLUS exp7
Rule 61    exp6 -> exp6 MINUS exp7
Rule 62    exp6 -> exp7
Rule 63    exp7 -> exp7 TIMES exp8
Rule 64    exp7 -> exp7 DIVIDE exp8
Rule 65    exp7 -> exp7 MOD exp8
Rule 66    exp7 -> exp8
Rule 67    exp8 -> exp8 DPLUS
Rule 68    exp8 -> exp8 DMINUS
Rule 69    exp8 -> exp9
Rule 70    exp9 -> NOT exp9
Rule 71    exp9 -> NUMBER
Rule 72    exp9 -> STRING
Rule 73    exp9 -> ID
Rule 74    exp9 -> TRUE
Rule 75    exp9 -> FALSE
Rule 76    exp9 -> LPAREN exp RPAREN
Rule 77    return -> RETURN exp
Rule 78    return -> RETURN
Rule 79    return -> RETURN exp SEMICOLON
Rule 80    return -> RETURN SEMICOLON
Rule 81    break -> BREAK
Rule 82    break -> BREAK SEMICOLON
Rule 83    callFunc -> ID LPAREN params RPAREN
Rule 84    callFunc -> ID LPAREN RPAREN
Rule 85    callFunc -> ID LPAREN params RPAREN SEMICOLON
Rule 86    callFunc -> ID LPAREN RPAREN SEMICOLON
Rule 87    callFuncPS -> ID DOT ID LPAREN params RPAREN
Rule 88    callFuncPS -> ID DOT ID LPAREN RPAREN
Rule 89    callFuncPS -> ID DOT ID LPAREN params RPAREN SEMICOLON
Rule 90    callFuncPS -> ID DOT ID LPAREN RPAREN SEMICOLON
Rule 91    params -> exp COMMA params
Rule 92    params -> exp

Terminals, with rules where they appear

AND                  : 50
ASSIGN               : 36 39 45
BOOL                 : 43
BREAK                : 81 82
COLONEQ              : 37 40 46
COMMA                : 15 91
DIFFERENT            : 53
DIVIDE               : 64
DMINUS               : 68
DOT                  : 87 88 89 90
DPLUS                : 67
ELSE                 : 24
EQUALS               : 52
FALSE                : 75
FOR                  : 32 33 34
FUNC                 : 5 6 7
GREATER              : 56
GREATER_EQUAL        : 58
ID                   : 3 5 6 7 14 15 35 36 37 38 39 40 73 83 84 85 86 87 87 88 88 89 89 90 90
IF                   : 24 25
IMPORT               : 4
INT                  : 41
LCHAVES              : 18 19
LESS                 : 55
LESS_EQUAL           : 57
LPAREN               : 10 11 12 13 17 76 83 84 85 86 87 88 89 90
MINUS                : 61
MOD                  : 65
NEWLINE              : 2 3 4 5 5 7 18 19 21 22
NOT                  : 70
NUMBER               : 71
OR                   : 48
PACKAGE              : 3
PLUS                 : 60
RCHAVES              : 18 19
RETURN               : 77 78 79 80
RPAREN               : 10 11 12 13 17 76 83 84 85 86 87 88 89 90
SEMICOLON            : 34 34 38 39 40 79 80 82 85 86 89 90
STRING               : 4 42 72
TIMES                : 63
TRUE                 : 74
VAR                  : 35 36 37 38 39 40
error                : 

Nonterminals, with rules where they appear

body                 : 5 6 7 24 24 25 32 33 34
break                : 31
callFunc             : 28
callFuncPS           : 29
declaration          : 26
defimport            : 1 2
defpackage           : 1 2
exp                  : 24 25 33 34 34 34 36 37 39 40 76 77 79 91 92
exp1                 : 44 45 46
exp2                 : 45 46 47 48
exp3                 : 48 49 50
exp4                 : 50 51 52 53
exp5                 : 52 53 54 55 56 57 58
exp6                 : 55 56 57 58 59 60 61
exp7                 : 60 61 62 63 64 65
exp8                 : 63 64 65 66 67 68
exp9                 : 69 70
for                  : 27
funcdecl             : 8 9
funcdecls            : 1 2 9
funcreturn           : 11 13
params               : 83 85 87 89 91
programaGO           : 0
return               : 30
signature            : 5 6 7
sigparams            : 10 11 15
statement            : 20 21 22
statement1           : 23
stms                 : 18 21
type                 : 14 15 16 17 35 36 37 38 39 40

Parsing method: LALR

state 0

    (0) S' -> . programaGO
    (1) programaGO -> . defpackage defimport funcdecls
    (2) programaGO -> . NEWLINE defpackage defimport funcdecls
    (3) defpackage -> . PACKAGE ID NEWLINE

    NEWLINE         shift and go to state 3
    PACKAGE         shift and go to state 4

    programaGO                     shift and go to state 1
    defpackage                     shift and go to state 2

state 1

    (0) S' -> programaGO .



state 2

    (1) programaGO -> defpackage . defimport funcdecls
    (4) defimport -> . IMPORT STRING NEWLINE

    IMPORT          shift and go to state 6

    defimport                      shift and go to state 5

state 3

    (2) programaGO -> NEWLINE . defpackage defimport funcdecls
    (3) defpackage -> . PACKAGE ID NEWLINE

    PACKAGE         shift and go to state 4

    defpackage                     shift and go to state 7

state 4

    (3) defpackage -> PACKAGE . ID NEWLINE

    ID              shift and go to state 8


state 5

    (1) programaGO -> defpackage defimport . funcdecls
    (8) funcdecls -> . funcdecl
    (9) funcdecls -> . funcdecl funcdecls
    (5) funcdecl -> . FUNC ID signature NEWLINE body NEWLINE
    (6) funcdecl -> . FUNC ID signature body
    (7) funcdecl -> . FUNC ID signature body NEWLINE

    FUNC            shift and go to state 11

    funcdecls                      shift and go to state 9
    funcdecl                       shift and go to state 10

state 6

    (4) defimport -> IMPORT . STRING NEWLINE

    STRING          shift and go to state 12


state 7

    (2) programaGO -> NEWLINE defpackage . defimport funcdecls
    (4) defimport -> . IMPORT STRING NEWLINE

    IMPORT          shift and go to state 6

    defimport                      shift and go to state 13

state 8

    (3) defpackage -> PACKAGE ID . NEWLINE

    NEWLINE         shift and go to state 14


state 9

    (1) programaGO -> defpackage defimport funcdecls .

    $end            reduce using rule 1 (programaGO -> defpackage defimport funcdecls .)


state 10

    (8) funcdecls -> funcdecl .
    (9) funcdecls -> funcdecl . funcdecls
    (8) funcdecls -> . funcdecl
    (9) funcdecls -> . funcdecl funcdecls
    (5) funcdecl -> . FUNC ID signature NEWLINE body NEWLINE
    (6) funcdecl -> . FUNC ID signature body
    (7) funcdecl -> . FUNC ID signature body NEWLINE

    $end            reduce using rule 8 (funcdecls -> funcdecl .)
    FUNC            shift and go to state 11

    funcdecl                       shift and go to state 10
    funcdecls                      shift and go to state 15

state 11

    (5) funcdecl -> FUNC . ID signature NEWLINE body NEWLINE
    (6) funcdecl -> FUNC . ID signature body
    (7) funcdecl -> FUNC . ID signature body NEWLINE

    ID              shift and go to state 16


state 12

    (4) defimport -> IMPORT STRING . NEWLINE

    NEWLINE         shift and go to state 17


state 13

    (2) programaGO -> NEWLINE defpackage defimport . funcdecls
    (8) funcdecls -> . funcdecl
    (9) funcdecls -> . funcdecl funcdecls
    (5) funcdecl -> . FUNC ID signature NEWLINE body NEWLINE
    (6) funcdecl -> . FUNC ID signature body
    (7) funcdecl -> . FUNC ID signature body NEWLINE

    FUNC            shift and go to state 11

    funcdecls                      shift and go to state 18
    funcdecl                       shift and go to state 10

state 14

    (3) defpackage -> PACKAGE ID NEWLINE .

    IMPORT          reduce using rule 3 (defpackage -> PACKAGE ID NEWLINE .)


state 15

    (9) funcdecls -> funcdecl funcdecls .

    $end            reduce using rule 9 (funcdecls -> funcdecl funcdecls .)


state 16

    (5) funcdecl -> FUNC ID . signature NEWLINE body NEWLINE
    (6) funcdecl -> FUNC ID . signature body
    (7) funcdecl -> FUNC ID . signature body NEWLINE
    (10) signature -> . LPAREN sigparams RPAREN
    (11) signature -> . LPAREN sigparams RPAREN funcreturn
    (12) signature -> . LPAREN RPAREN
    (13) signature -> . LPAREN RPAREN funcreturn

    LPAREN          shift and go to state 20

    signature                      shift and go to state 19

state 17

    (4) defimport -> IMPORT STRING NEWLINE .

    FUNC            reduce using rule 4 (defimport -> IMPORT STRING NEWLINE .)


state 18

    (2) programaGO -> NEWLINE defpackage defimport funcdecls .

    $end            reduce using rule 2 (programaGO -> NEWLINE defpackage defimport funcdecls .)


state 19

    (5) funcdecl -> FUNC ID signature . NEWLINE body NEWLINE
    (6) funcdecl -> FUNC ID signature . body
    (7) funcdecl -> FUNC ID signature . body NEWLINE
    (18) body -> . LCHAVES NEWLINE stms RCHAVES
    (19) body -> . LCHAVES NEWLINE RCHAVES

    NEWLINE         shift and go to state 21
    LCHAVES         shift and go to state 23

    body                           shift and go to state 22

state 20

    (10) signature -> LPAREN . sigparams RPAREN
    (11) signature -> LPAREN . sigparams RPAREN funcreturn
    (12) signature -> LPAREN . RPAREN
    (13) signature -> LPAREN . RPAREN funcreturn
    (14) sigparams -> . ID type
    (15) sigparams -> . ID type COMMA sigparams

    RPAREN          shift and go to state 25
    ID              shift and go to state 26

    sigparams                      shift and go to state 24

state 21

    (5) funcdecl -> FUNC ID signature NEWLINE . body NEWLINE
    (18) body -> . LCHAVES NEWLINE stms RCHAVES
    (19) body -> . LCHAVES NEWLINE RCHAVES

    LCHAVES         shift and go to state 23

    body                           shift and go to state 27

state 22

    (6) funcdecl -> FUNC ID signature body .
    (7) funcdecl -> FUNC ID signature body . NEWLINE

    FUNC            reduce using rule 6 (funcdecl -> FUNC ID signature body .)
    $end            reduce using rule 6 (funcdecl -> FUNC ID signature body .)
    NEWLINE         shift and go to state 28


state 23

    (18) body -> LCHAVES . NEWLINE stms RCHAVES
    (19) body -> LCHAVES . NEWLINE RCHAVES

    NEWLINE         shift and go to state 29


state 24

    (10) signature -> LPAREN sigparams . RPAREN
    (11) signature -> LPAREN sigparams . RPAREN funcreturn

    RPAREN          shift and go to state 30


state 25

    (12) signature -> LPAREN RPAREN .
    (13) signature -> LPAREN RPAREN . funcreturn
    (16) funcreturn -> . type
    (17) funcreturn -> . LPAREN type RPAREN
    (41) type -> . INT
    (42) type -> . STRING
    (43) type -> . BOOL

    NEWLINE         reduce using rule 12 (signature -> LPAREN RPAREN .)
    LCHAVES         reduce using rule 12 (signature -> LPAREN RPAREN .)
    LPAREN          shift and go to state 31
    INT             shift and go to state 34
    STRING          shift and go to state 35
    BOOL            shift and go to state 36

    funcreturn                     shift and go to state 32
    type                           shift and go to state 33

state 26

    (14) sigparams -> ID . type
    (15) sigparams -> ID . type COMMA sigparams
    (41) type -> . INT
    (42) type -> . STRING
    (43) type -> . BOOL

    INT             shift and go to state 34
    STRING          shift and go to state 35
    BOOL            shift and go to state 36

    type                           shift and go to state 37

state 27

    (5) funcdecl -> FUNC ID signature NEWLINE body . NEWLINE

    NEWLINE         shift and go to state 38


state 28

    (7) funcdecl -> FUNC ID signature body NEWLINE .

    FUNC            reduce using rule 7 (funcdecl -> FUNC ID signature body NEWLINE .)
    $end            reduce using rule 7 (funcdecl -> FUNC ID signature body NEWLINE .)


state 29

    (18) body -> LCHAVES NEWLINE . stms RCHAVES
    (19) body -> LCHAVES NEWLINE . RCHAVES
    (20) stms -> . statement
    (21) stms -> . statement NEWLINE stms
    (22) stms -> . statement NEWLINE
    (23) statement -> . statement1
    (24) statement1 -> . IF exp body ELSE body
    (25) statement1 -> . IF exp body
    (26) statement1 -> . declaration
    (27) statement1 -> . for
    (28) statement1 -> . callFunc
    (29) statement1 -> . callFuncPS
    (30) statement1 -> . return
    (31) statement1 -> . break
    (35) declaration -> . VAR ID type
    (36) declaration -> . VAR ID type ASSIGN exp
    (37) declaration -> . VAR ID type COLONEQ exp
    (38) declaration -> . VAR ID type SEMICOLON
    (39) declaration -> . VAR ID type ASSIGN exp SEMICOLON
    (40) declaration -> . VAR ID type COLONEQ exp SEMICOLON
    (32) for -> . FOR body
    (33) for -> . FOR exp body
    (34) for -> . FOR exp SEMICOLON exp SEMICOLON exp body
    (83) callFunc -> . ID LPAREN params RPAREN
    (84) callFunc -> . ID LPAREN RPAREN
    (85) callFunc -> . ID LPAREN params RPAREN SEMICOLON
    (86) callFunc -> . ID LPAREN RPAREN SEMICOLON
    (87) callFuncPS -> . ID DOT ID LPAREN params RPAREN
    (88) callFuncPS -> . ID DOT ID LPAREN RPAREN
    (89) callFuncPS -> . ID DOT ID LPAREN params RPAREN SEMICOLON
    (90) callFuncPS -> . ID DOT ID LPAREN RPAREN SEMICOLON
    (77) return -> . RETURN exp
    (78) return -> . RETURN
    (79) return -> . RETURN exp SEMICOLON
    (80) return -> . RETURN SEMICOLON
    (81) break -> . BREAK
    (82) break -> . BREAK SEMICOLON

    RCHAVES         shift and go to state 40
    IF              shift and go to state 43
    VAR             shift and go to state 50
    FOR             shift and go to state 52
    ID              shift and go to state 51
    RETURN          shift and go to state 53
    BREAK           shift and go to state 54

    stms                           shift and go to state 39
    statement                      shift and go to state 41
    statement1                     shift and go to state 42
    declaration                    shift and go to state 44
    for                            shift and go to state 45
    callFunc                       shift and go to state 46
    callFuncPS                     shift and go to state 47
    return                         shift and go to state 48
    break                          shift and go to state 49

state 30

    (10) signature -> LPAREN sigparams RPAREN .
    (11) signature -> LPAREN sigparams RPAREN . funcreturn
    (16) funcreturn -> . type
    (17) funcreturn -> . LPAREN type RPAREN
    (41) type -> . INT
    (42) type -> . STRING
    (43) type -> . BOOL

    NEWLINE         reduce using rule 10 (signature -> LPAREN sigparams RPAREN .)
    LCHAVES         reduce using rule 10 (signature -> LPAREN sigparams RPAREN .)
    LPAREN          shift and go to state 31
    INT             shift and go to state 34
    STRING          shift and go to state 35
    BOOL            shift and go to state 36

    funcreturn                     shift and go to state 55
    type                           shift and go to state 33

state 31

    (17) funcreturn -> LPAREN . type RPAREN
    (41) type -> . INT
    (42) type -> . STRING
    (43) type -> . BOOL

    INT             shift and go to state 34
    STRING          shift and go to state 35
    BOOL            shift and go to state 36

    type                           shift and go to state 56

state 32

    (13) signature -> LPAREN RPAREN funcreturn .

    NEWLINE         reduce using rule 13 (signature -> LPAREN RPAREN funcreturn .)
    LCHAVES         reduce using rule 13 (signature -> LPAREN RPAREN funcreturn .)


state 33

    (16) funcreturn -> type .

    NEWLINE         reduce using rule 16 (funcreturn -> type .)
    LCHAVES         reduce using rule 16 (funcreturn -> type .)


state 34

    (41) type -> INT .

    NEWLINE         reduce using rule 41 (type -> INT .)
    LCHAVES         reduce using rule 41 (type -> INT .)
    COMMA           reduce using rule 41 (type -> INT .)
    RPAREN          reduce using rule 41 (type -> INT .)
    ASSIGN          reduce using rule 41 (type -> INT .)
    COLONEQ         reduce using rule 41 (type -> INT .)
    SEMICOLON       reduce using rule 41 (type -> INT .)
    RCHAVES         reduce using rule 41 (type -> INT .)


state 35

    (42) type -> STRING .

    NEWLINE         reduce using rule 42 (type -> STRING .)
    LCHAVES         reduce using rule 42 (type -> STRING .)
    COMMA           reduce using rule 42 (type -> STRING .)
    RPAREN          reduce using rule 42 (type -> STRING .)
    ASSIGN          reduce using rule 42 (type -> STRING .)
    COLONEQ         reduce using rule 42 (type -> STRING .)
    SEMICOLON       reduce using rule 42 (type -> STRING .)
    RCHAVES         reduce using rule 42 (type -> STRING .)


state 36

    (43) type -> BOOL .

    NEWLINE         reduce using rule 43 (type -> BOOL .)
    LCHAVES         reduce using rule 43 (type -> BOOL .)
    COMMA           reduce using rule 43 (type -> BOOL .)
    RPAREN          reduce using rule 43 (type -> BOOL .)
    ASSIGN          reduce using rule 43 (type -> BOOL .)
    COLONEQ         reduce using rule 43 (type -> BOOL .)
    SEMICOLON       reduce using rule 43 (type -> BOOL .)
    RCHAVES         reduce using rule 43 (type -> BOOL .)


state 37

    (14) sigparams -> ID type .
    (15) sigparams -> ID type . COMMA sigparams

    RPAREN          reduce using rule 14 (sigparams -> ID type .)
    COMMA           shift and go to state 57


state 38

    (5) funcdecl -> FUNC ID signature NEWLINE body NEWLINE .

    FUNC            reduce using rule 5 (funcdecl -> FUNC ID signature NEWLINE body NEWLINE .)
    $end            reduce using rule 5 (funcdecl -> FUNC ID signature NEWLINE body NEWLINE .)


state 39

    (18) body -> LCHAVES NEWLINE stms . RCHAVES

    RCHAVES         shift and go to state 58


state 40

    (19) body -> LCHAVES NEWLINE RCHAVES .

    NEWLINE         reduce using rule 19 (body -> LCHAVES NEWLINE RCHAVES .)
    FUNC            reduce using rule 19 (body -> LCHAVES NEWLINE RCHAVES .)
    $end            reduce using rule 19 (body -> LCHAVES NEWLINE RCHAVES .)
    RCHAVES         reduce using rule 19 (body -> LCHAVES NEWLINE RCHAVES .)
    ELSE            reduce using rule 19 (body -> LCHAVES NEWLINE RCHAVES .)


state 41

    (20) stms -> statement .
    (21) stms -> statement . NEWLINE stms
    (22) stms -> statement . NEWLINE

    RCHAVES         reduce using rule 20 (stms -> statement .)
    NEWLINE         shift and go to state 59


state 42

    (23) statement -> statement1 .

    NEWLINE         reduce using rule 23 (statement -> statement1 .)
    RCHAVES         reduce using rule 23 (statement -> statement1 .)


state 43

    (24) statement1 -> IF . exp body ELSE body
    (25) statement1 -> IF . exp body
    (44) exp -> . exp1
    (45) exp1 -> . exp1 ASSIGN exp2
    (46) exp1 -> . exp1 COLONEQ exp2
    (47) exp1 -> . exp2
    (48) exp2 -> . exp2 OR exp3
    (49) exp2 -> . exp3
    (50) exp3 -> . exp3 AND exp4
    (51) exp3 -> . exp4
    (52) exp4 -> . exp4 EQUALS exp5
    (53) exp4 -> . exp4 DIFFERENT exp5
    (54) exp4 -> . exp5
    (55) exp5 -> . exp5 LESS exp6
    (56) exp5 -> . exp5 GREATER exp6
    (57) exp5 -> . exp5 LESS_EQUAL exp6
    (58) exp5 -> . exp5 GREATER_EQUAL exp6
    (59) exp5 -> . exp6
    (60) exp6 -> . exp6 PLUS exp7
    (61) exp6 -> . exp6 MINUS exp7
    (62) exp6 -> . exp7
    (63) exp7 -> . exp7 TIMES exp8
    (64) exp7 -> . exp7 DIVIDE exp8
    (65) exp7 -> . exp7 MOD exp8
    (66) exp7 -> . exp8
    (67) exp8 -> . exp8 DPLUS
    (68) exp8 -> . exp8 DMINUS
    (69) exp8 -> . exp9
    (70) exp9 -> . NOT exp9
    (71) exp9 -> . NUMBER
    (72) exp9 -> . STRING
    (73) exp9 -> . ID
    (74) exp9 -> . TRUE
    (75) exp9 -> . FALSE
    (76) exp9 -> . LPAREN exp RPAREN

    NOT             shift and go to state 70
    NUMBER          shift and go to state 71
    STRING          shift and go to state 72
    ID              shift and go to state 73
    TRUE            shift and go to state 74
    FALSE           shift and go to state 75
    LPAREN          shift and go to state 76

    exp                            shift and go to state 60
    exp1                           shift and go to state 61
    exp2                           shift and go to state 62
    exp3                           shift and go to state 63
    exp4                           shift and go to state 64
    exp5                           shift and go to state 65
    exp6                           shift and go to state 66
    exp7                           shift and go to state 67
    exp8                           shift and go to state 68
    exp9                           shift and go to state 69

state 44

    (26) statement1 -> declaration .

    NEWLINE         reduce using rule 26 (statement1 -> declaration .)
    RCHAVES         reduce using rule 26 (statement1 -> declaration .)


state 45

    (27) statement1 -> for .

    NEWLINE         reduce using rule 27 (statement1 -> for .)
    RCHAVES         reduce using rule 27 (statement1 -> for .)


state 46

    (28) statement1 -> callFunc .

    NEWLINE         reduce using rule 28 (statement1 -> callFunc .)
    RCHAVES         reduce using rule 28 (statement1 -> callFunc .)


state 47

    (29) statement1 -> callFuncPS .

    NEWLINE         reduce using rule 29 (statement1 -> callFuncPS .)
    RCHAVES         reduce using rule 29 (statement1 -> callFuncPS .)


state 48

    (30) statement1 -> return .

    NEWLINE         reduce using rule 30 (statement1 -> return .)
    RCHAVES         reduce using rule 30 (statement1 -> return .)


state 49

    (31) statement1 -> break .

    NEWLINE         reduce using rule 31 (statement1 -> break .)
    RCHAVES         reduce using rule 31 (statement1 -> break .)


state 50

    (35) declaration -> VAR . ID type
    (36) declaration -> VAR . ID type ASSIGN exp
    (37) declaration -> VAR . ID type COLONEQ exp
    (38) declaration -> VAR . ID type SEMICOLON
    (39) declaration -> VAR . ID type ASSIGN exp SEMICOLON
    (40) declaration -> VAR . ID type COLONEQ exp SEMICOLON

    ID              shift and go to state 77


state 51

    (83) callFunc -> ID . LPAREN params RPAREN
    (84) callFunc -> ID . LPAREN RPAREN
    (85) callFunc -> ID . LPAREN params RPAREN SEMICOLON
    (86) callFunc -> ID . LPAREN RPAREN SEMICOLON
    (87) callFuncPS -> ID . DOT ID LPAREN params RPAREN
    (88) callFuncPS -> ID . DOT ID LPAREN RPAREN
    (89) callFuncPS -> ID . DOT ID LPAREN params RPAREN SEMICOLON
    (90) callFuncPS -> ID . DOT ID LPAREN RPAREN SEMICOLON

    LPAREN          shift and go to state 78
    DOT             shift and go to state 79


state 52

    (32) for -> FOR . body
    (33) for -> FOR . exp body
    (34) for -> FOR . exp SEMICOLON exp SEMICOLON exp body
    (18) body -> . LCHAVES NEWLINE stms RCHAVES
    (19) body -> . LCHAVES NEWLINE RCHAVES
    (44) exp -> . exp1
    (45) exp1 -> . exp1 ASSIGN exp2
    (46) exp1 -> . exp1 COLONEQ exp2
    (47) exp1 -> . exp2
    (48) exp2 -> . exp2 OR exp3
    (49) exp2 -> . exp3
    (50) exp3 -> . exp3 AND exp4
    (51) exp3 -> . exp4
    (52) exp4 -> . exp4 EQUALS exp5
    (53) exp4 -> . exp4 DIFFERENT exp5
    (54) exp4 -> . exp5
    (55) exp5 -> . exp5 LESS exp6
    (56) exp5 -> . exp5 GREATER exp6
    (57) exp5 -> . exp5 LESS_EQUAL exp6
    (58) exp5 -> . exp5 GREATER_EQUAL exp6
    (59) exp5 -> . exp6
    (60) exp6 -> . exp6 PLUS exp7
    (61) exp6 -> . exp6 MINUS exp7
    (62) exp6 -> . exp7
    (63) exp7 -> . exp7 TIMES exp8
    (64) exp7 -> . exp7 DIVIDE exp8
    (65) exp7 -> . exp7 MOD exp8
    (66) exp7 -> . exp8
    (67) exp8 -> . exp8 DPLUS
    (68) exp8 -> . exp8 DMINUS
    (69) exp8 -> . exp9
    (70) exp9 -> . NOT exp9
    (71) exp9 -> . NUMBER
    (72) exp9 -> . STRING
    (73) exp9 -> . ID
    (74) exp9 -> . TRUE
    (75) exp9 -> . FALSE
    (76) exp9 -> . LPAREN exp RPAREN

    LCHAVES         shift and go to state 23
    NOT             shift and go to state 70
    NUMBER          shift and go to state 71
    STRING          shift and go to state 72
    ID              shift and go to state 73
    TRUE            shift and go to state 74
    FALSE           shift and go to state 75
    LPAREN          shift and go to state 76

    body                           shift and go to state 80
    exp                            shift and go to state 81
    exp1                           shift and go to state 61
    exp2                           shift and go to state 62
    exp3                           shift and go to state 63
    exp4                           shift and go to state 64
    exp5                           shift and go to state 65
    exp6                           shift and go to state 66
    exp7                           shift and go to state 67
    exp8                           shift and go to state 68
    exp9                           shift and go to state 69

state 53

    (77) return -> RETURN . exp
    (78) return -> RETURN .
    (79) return -> RETURN . exp SEMICOLON
    (80) return -> RETURN . SEMICOLON
    (44) exp -> . exp1
    (45) exp1 -> . exp1 ASSIGN exp2
    (46) exp1 -> . exp1 COLONEQ exp2
    (47) exp1 -> . exp2
    (48) exp2 -> . exp2 OR exp3
    (49) exp2 -> . exp3
    (50) exp3 -> . exp3 AND exp4
    (51) exp3 -> . exp4
    (52) exp4 -> . exp4 EQUALS exp5
    (53) exp4 -> . exp4 DIFFERENT exp5
    (54) exp4 -> . exp5
    (55) exp5 -> . exp5 LESS exp6
    (56) exp5 -> . exp5 GREATER exp6
    (57) exp5 -> . exp5 LESS_EQUAL exp6
    (58) exp5 -> . exp5 GREATER_EQUAL exp6
    (59) exp5 -> . exp6
    (60) exp6 -> . exp6 PLUS exp7
    (61) exp6 -> . exp6 MINUS exp7
    (62) exp6 -> . exp7
    (63) exp7 -> . exp7 TIMES exp8
    (64) exp7 -> . exp7 DIVIDE exp8
    (65) exp7 -> . exp7 MOD exp8
    (66) exp7 -> . exp8
    (67) exp8 -> . exp8 DPLUS
    (68) exp8 -> . exp8 DMINUS
    (69) exp8 -> . exp9
    (70) exp9 -> . NOT exp9
    (71) exp9 -> . NUMBER
    (72) exp9 -> . STRING
    (73) exp9 -> . ID
    (74) exp9 -> . TRUE
    (75) exp9 -> . FALSE
    (76) exp9 -> . LPAREN exp RPAREN

    NEWLINE         reduce using rule 78 (return -> RETURN .)
    RCHAVES         reduce using rule 78 (return -> RETURN .)
    SEMICOLON       shift and go to state 83
    NOT             shift and go to state 70
    NUMBER          shift and go to state 71
    STRING          shift and go to state 72
    ID              shift and go to state 73
    TRUE            shift and go to state 74
    FALSE           shift and go to state 75
    LPAREN          shift and go to state 76

    exp                            shift and go to state 82
    exp1                           shift and go to state 61
    exp2                           shift and go to state 62
    exp3                           shift and go to state 63
    exp4                           shift and go to state 64
    exp5                           shift and go to state 65
    exp6                           shift and go to state 66
    exp7                           shift and go to state 67
    exp8                           shift and go to state 68
    exp9                           shift and go to state 69

state 54

    (81) break -> BREAK .
    (82) break -> BREAK . SEMICOLON

    NEWLINE         reduce using rule 81 (break -> BREAK .)
    RCHAVES         reduce using rule 81 (break -> BREAK .)
    SEMICOLON       shift and go to state 84


state 55

    (11) signature -> LPAREN sigparams RPAREN funcreturn .

    NEWLINE         reduce using rule 11 (signature -> LPAREN sigparams RPAREN funcreturn .)
    LCHAVES         reduce using rule 11 (signature -> LPAREN sigparams RPAREN funcreturn .)


state 56

    (17) funcreturn -> LPAREN type . RPAREN

    RPAREN          shift and go to state 85


state 57

    (15) sigparams -> ID type COMMA . sigparams
    (14) sigparams -> . ID type
    (15) sigparams -> . ID type COMMA sigparams

    ID              shift and go to state 26

    sigparams                      shift and go to state 86

state 58

    (18) body -> LCHAVES NEWLINE stms RCHAVES .

    NEWLINE         reduce using rule 18 (body -> LCHAVES NEWLINE stms RCHAVES .)
    FUNC            reduce using rule 18 (body -> LCHAVES NEWLINE stms RCHAVES .)
    $end            reduce using rule 18 (body -> LCHAVES NEWLINE stms RCHAVES .)
    RCHAVES         reduce using rule 18 (body -> LCHAVES NEWLINE stms RCHAVES .)
    ELSE            reduce using rule 18 (body -> LCHAVES NEWLINE stms RCHAVES .)


state 59

    (21) stms -> statement NEWLINE . stms
    (22) stms -> statement NEWLINE .
    (20) stms -> . statement
    (21) stms -> . statement NEWLINE stms
    (22) stms -> . statement NEWLINE
    (23) statement -> . statement1
    (24) statement1 -> . IF exp body ELSE body
    (25) statement1 -> . IF exp body
    (26) statement1 -> . declaration
    (27) statement1 -> . for
    (28) statement1 -> . callFunc
    (29) statement1 -> . callFuncPS
    (30) statement1 -> . return
    (31) statement1 -> . break
    (35) declaration -> . VAR ID type
    (36) declaration -> . VAR ID type ASSIGN exp
    (37) declaration -> . VAR ID type COLONEQ exp
    (38) declaration -> . VAR ID type SEMICOLON
    (39) declaration -> . VAR ID type ASSIGN exp SEMICOLON
    (40) declaration -> . VAR ID type COLONEQ exp SEMICOLON
    (32) for -> . FOR body
    (33) for -> . FOR exp body
    (34) for -> . FOR exp SEMICOLON exp SEMICOLON exp body
    (83) callFunc -> . ID LPAREN params RPAREN
    (84) callFunc -> . ID LPAREN RPAREN
    (85) callFunc -> . ID LPAREN params RPAREN SEMICOLON
    (86) callFunc -> . ID LPAREN RPAREN SEMICOLON
    (87) callFuncPS -> . ID DOT ID LPAREN params RPAREN
    (88) callFuncPS -> . ID DOT ID LPAREN RPAREN
    (89) callFuncPS -> . ID DOT ID LPAREN params RPAREN SEMICOLON
    (90) callFuncPS -> . ID DOT ID LPAREN RPAREN SEMICOLON
    (77) return -> . RETURN exp
    (78) return -> . RETURN
    (79) return -> . RETURN exp SEMICOLON
    (80) return -> . RETURN SEMICOLON
    (81) break -> . BREAK
    (82) break -> . BREAK SEMICOLON

    RCHAVES         reduce using rule 22 (stms -> statement NEWLINE .)
    IF              shift and go to state 43
    VAR             shift and go to state 50
    FOR             shift and go to state 52
    ID              shift and go to state 51
    RETURN          shift and go to state 53
    BREAK           shift and go to state 54

    statement                      shift and go to state 41
    stms                           shift and go to state 87
    statement1                     shift and go to state 42
    declaration                    shift and go to state 44
    for                            shift and go to state 45
    callFunc                       shift and go to state 46
    callFuncPS                     shift and go to state 47
    return                         shift and go to state 48
    break                          shift and go to state 49

state 60

    (24) statement1 -> IF exp . body ELSE body
    (25) statement1 -> IF exp . body
    (18) body -> . LCHAVES NEWLINE stms RCHAVES
    (19) body -> . LCHAVES NEWLINE RCHAVES

    LCHAVES         shift and go to state 23

    body                           shift and go to state 88

state 61

    (44) exp -> exp1 .
    (45) exp1 -> exp1 . ASSIGN exp2
    (46) exp1 -> exp1 . COLONEQ exp2

    LCHAVES         reduce using rule 44 (exp -> exp1 .)
    SEMICOLON       reduce using rule 44 (exp -> exp1 .)
    NEWLINE         reduce using rule 44 (exp -> exp1 .)
    RCHAVES         reduce using rule 44 (exp -> exp1 .)
    RPAREN          reduce using rule 44 (exp -> exp1 .)
    COMMA           reduce using rule 44 (exp -> exp1 .)
    ASSIGN          shift and go to state 89
    COLONEQ         shift and go to state 90


state 62

    (47) exp1 -> exp2 .
    (48) exp2 -> exp2 . OR exp3

    ASSIGN          reduce using rule 47 (exp1 -> exp2 .)
    COLONEQ         reduce using rule 47 (exp1 -> exp2 .)
    LCHAVES         reduce using rule 47 (exp1 -> exp2 .)
    SEMICOLON       reduce using rule 47 (exp1 -> exp2 .)
    NEWLINE         reduce using rule 47 (exp1 -> exp2 .)
    RCHAVES         reduce using rule 47 (exp1 -> exp2 .)
    RPAREN          reduce using rule 47 (exp1 -> exp2 .)
    COMMA           reduce using rule 47 (exp1 -> exp2 .)
    OR              shift and go to state 91


state 63

    (49) exp2 -> exp3 .
    (50) exp3 -> exp3 . AND exp4

    OR              reduce using rule 49 (exp2 -> exp3 .)
    ASSIGN          reduce using rule 49 (exp2 -> exp3 .)
    COLONEQ         reduce using rule 49 (exp2 -> exp3 .)
    LCHAVES         reduce using rule 49 (exp2 -> exp3 .)
    SEMICOLON       reduce using rule 49 (exp2 -> exp3 .)
    NEWLINE         reduce using rule 49 (exp2 -> exp3 .)
    RCHAVES         reduce using rule 49 (exp2 -> exp3 .)
    RPAREN          reduce using rule 49 (exp2 -> exp3 .)
    COMMA           reduce using rule 49 (exp2 -> exp3 .)
    AND             shift and go to state 92


state 64

    (51) exp3 -> exp4 .
    (52) exp4 -> exp4 . EQUALS exp5
    (53) exp4 -> exp4 . DIFFERENT exp5

    AND             reduce using rule 51 (exp3 -> exp4 .)
    OR              reduce using rule 51 (exp3 -> exp4 .)
    ASSIGN          reduce using rule 51 (exp3 -> exp4 .)
    COLONEQ         reduce using rule 51 (exp3 -> exp4 .)
    LCHAVES         reduce using rule 51 (exp3 -> exp4 .)
    SEMICOLON       reduce using rule 51 (exp3 -> exp4 .)
    NEWLINE         reduce using rule 51 (exp3 -> exp4 .)
    RCHAVES         reduce using rule 51 (exp3 -> exp4 .)
    RPAREN          reduce using rule 51 (exp3 -> exp4 .)
    COMMA           reduce using rule 51 (exp3 -> exp4 .)
    EQUALS          shift and go to state 93
    DIFFERENT       shift and go to state 94


state 65

    (54) exp4 -> exp5 .
    (55) exp5 -> exp5 . LESS exp6
    (56) exp5 -> exp5 . GREATER exp6
    (57) exp5 -> exp5 . LESS_EQUAL exp6
    (58) exp5 -> exp5 . GREATER_EQUAL exp6

    EQUALS          reduce using rule 54 (exp4 -> exp5 .)
    DIFFERENT       reduce using rule 54 (exp4 -> exp5 .)
    AND             reduce using rule 54 (exp4 -> exp5 .)
    OR              reduce using rule 54 (exp4 -> exp5 .)
    ASSIGN          reduce using rule 54 (exp4 -> exp5 .)
    COLONEQ         reduce using rule 54 (exp4 -> exp5 .)
    LCHAVES         reduce using rule 54 (exp4 -> exp5 .)
    SEMICOLON       reduce using rule 54 (exp4 -> exp5 .)
    NEWLINE         reduce using rule 54 (exp4 -> exp5 .)
    RCHAVES         reduce using rule 54 (exp4 -> exp5 .)
    RPAREN          reduce using rule 54 (exp4 -> exp5 .)
    COMMA           reduce using rule 54 (exp4 -> exp5 .)
    LESS            shift and go to state 95
    GREATER         shift and go to state 96
    LESS_EQUAL      shift and go to state 97
    GREATER_EQUAL   shift and go to state 98


state 66

    (59) exp5 -> exp6 .
    (60) exp6 -> exp6 . PLUS exp7
    (61) exp6 -> exp6 . MINUS exp7

    LESS            reduce using rule 59 (exp5 -> exp6 .)
    GREATER         reduce using rule 59 (exp5 -> exp6 .)
    LESS_EQUAL      reduce using rule 59 (exp5 -> exp6 .)
    GREATER_EQUAL   reduce using rule 59 (exp5 -> exp6 .)
    EQUALS          reduce using rule 59 (exp5 -> exp6 .)
    DIFFERENT       reduce using rule 59 (exp5 -> exp6 .)
    AND             reduce using rule 59 (exp5 -> exp6 .)
    OR              reduce using rule 59 (exp5 -> exp6 .)
    ASSIGN          reduce using rule 59 (exp5 -> exp6 .)
    COLONEQ         reduce using rule 59 (exp5 -> exp6 .)
    LCHAVES         reduce using rule 59 (exp5 -> exp6 .)
    SEMICOLON       reduce using rule 59 (exp5 -> exp6 .)
    NEWLINE         reduce using rule 59 (exp5 -> exp6 .)
    RCHAVES         reduce using rule 59 (exp5 -> exp6 .)
    RPAREN          reduce using rule 59 (exp5 -> exp6 .)
    COMMA           reduce using rule 59 (exp5 -> exp6 .)
    PLUS            shift and go to state 99
    MINUS           shift and go to state 100


state 67

    (62) exp6 -> exp7 .
    (63) exp7 -> exp7 . TIMES exp8
    (64) exp7 -> exp7 . DIVIDE exp8
    (65) exp7 -> exp7 . MOD exp8

    PLUS            reduce using rule 62 (exp6 -> exp7 .)
    MINUS           reduce using rule 62 (exp6 -> exp7 .)
    LESS            reduce using rule 62 (exp6 -> exp7 .)
    GREATER         reduce using rule 62 (exp6 -> exp7 .)
    LESS_EQUAL      reduce using rule 62 (exp6 -> exp7 .)
    GREATER_EQUAL   reduce using rule 62 (exp6 -> exp7 .)
    EQUALS          reduce using rule 62 (exp6 -> exp7 .)
    DIFFERENT       reduce using rule 62 (exp6 -> exp7 .)
    AND             reduce using rule 62 (exp6 -> exp7 .)
    OR              reduce using rule 62 (exp6 -> exp7 .)
    ASSIGN          reduce using rule 62 (exp6 -> exp7 .)
    COLONEQ         reduce using rule 62 (exp6 -> exp7 .)
    LCHAVES         reduce using rule 62 (exp6 -> exp7 .)
    SEMICOLON       reduce using rule 62 (exp6 -> exp7 .)
    NEWLINE         reduce using rule 62 (exp6 -> exp7 .)
    RCHAVES         reduce using rule 62 (exp6 -> exp7 .)
    RPAREN          reduce using rule 62 (exp6 -> exp7 .)
    COMMA           reduce using rule 62 (exp6 -> exp7 .)
    TIMES           shift and go to state 101
    DIVIDE          shift and go to state 102
    MOD             shift and go to state 103


state 68

    (66) exp7 -> exp8 .
    (67) exp8 -> exp8 . DPLUS
    (68) exp8 -> exp8 . DMINUS

    TIMES           reduce using rule 66 (exp7 -> exp8 .)
    DIVIDE          reduce using rule 66 (exp7 -> exp8 .)
    MOD             reduce using rule 66 (exp7 -> exp8 .)
    PLUS            reduce using rule 66 (exp7 -> exp8 .)
    MINUS           reduce using rule 66 (exp7 -> exp8 .)
    LESS            reduce using rule 66 (exp7 -> exp8 .)
    GREATER         reduce using rule 66 (exp7 -> exp8 .)
    LESS_EQUAL      reduce using rule 66 (exp7 -> exp8 .)
    GREATER_EQUAL   reduce using rule 66 (exp7 -> exp8 .)
    EQUALS          reduce using rule 66 (exp7 -> exp8 .)
    DIFFERENT       reduce using rule 66 (exp7 -> exp8 .)
    AND             reduce using rule 66 (exp7 -> exp8 .)
    OR              reduce using rule 66 (exp7 -> exp8 .)
    ASSIGN          reduce using rule 66 (exp7 -> exp8 .)
    COLONEQ         reduce using rule 66 (exp7 -> exp8 .)
    LCHAVES         reduce using rule 66 (exp7 -> exp8 .)
    SEMICOLON       reduce using rule 66 (exp7 -> exp8 .)
    NEWLINE         reduce using rule 66 (exp7 -> exp8 .)
    RCHAVES         reduce using rule 66 (exp7 -> exp8 .)
    RPAREN          reduce using rule 66 (exp7 -> exp8 .)
    COMMA           reduce using rule 66 (exp7 -> exp8 .)
    DPLUS           shift and go to state 104
    DMINUS          shift and go to state 105


state 69

    (69) exp8 -> exp9 .

    DPLUS           reduce using rule 69 (exp8 -> exp9 .)
    DMINUS          reduce using rule 69 (exp8 -> exp9 .)
    TIMES           reduce using rule 69 (exp8 -> exp9 .)
    DIVIDE          reduce using rule 69 (exp8 -> exp9 .)
    MOD             reduce using rule 69 (exp8 -> exp9 .)
    PLUS            reduce using rule 69 (exp8 -> exp9 .)
    MINUS           reduce using rule 69 (exp8 -> exp9 .)
    LESS            reduce using rule 69 (exp8 -> exp9 .)
    GREATER         reduce using rule 69 (exp8 -> exp9 .)
    LESS_EQUAL      reduce using rule 69 (exp8 -> exp9 .)
    GREATER_EQUAL   reduce using rule 69 (exp8 -> exp9 .)
    EQUALS          reduce using rule 69 (exp8 -> exp9 .)
    DIFFERENT       reduce using rule 69 (exp8 -> exp9 .)
    AND             reduce using rule 69 (exp8 -> exp9 .)
    OR              reduce using rule 69 (exp8 -> exp9 .)
    ASSIGN          reduce using rule 69 (exp8 -> exp9 .)
    COLONEQ         reduce using rule 69 (exp8 -> exp9 .)
    LCHAVES         reduce using rule 69 (exp8 -> exp9 .)
    SEMICOLON       reduce using rule 69 (exp8 -> exp9 .)
    NEWLINE         reduce using rule 69 (exp8 -> exp9 .)
    RCHAVES         reduce using rule 69 (exp8 -> exp9 .)
    RPAREN          reduce using rule 69 (exp8 -> exp9 .)
    COMMA           reduce using rule 69 (exp8 -> exp9 .)


state 70

    (70) exp9 -> NOT . exp9
    (70) exp9 -> . NOT exp9
    (71) exp9 -> . NUMBER
    (72) exp9 -> . STRING
    (73) exp9 -> . ID
    (74) exp9 -> . TRUE
    (75) exp9 -> . FALSE
    (76) exp9 -> . LPAREN exp RPAREN

    NOT             shift and go to state 70
    NUMBER          shift and go to state 71
    STRING          shift and go to state 72
    ID              shift and go to state 73
    TRUE            shift and go to state 74
    FALSE           shift and go to state 75
    LPAREN          shift and go to state 76

    exp9                           shift and go to state 106

state 71

    (71) exp9 -> NUMBER .

    DPLUS           reduce using rule 71 (exp9 -> NUMBER .)
    DMINUS          reduce using rule 71 (exp9 -> NUMBER .)
    TIMES           reduce using rule 71 (exp9 -> NUMBER .)
    DIVIDE          reduce using rule 71 (exp9 -> NUMBER .)
    MOD             reduce using rule 71 (exp9 -> NUMBER .)
    PLUS            reduce using rule 71 (exp9 -> NUMBER .)
    MINUS           reduce using rule 71 (exp9 -> NUMBER .)
    LESS            reduce using rule 71 (exp9 -> NUMBER .)
    GREATER         reduce using rule 71 (exp9 -> NUMBER .)
    LESS_EQUAL      reduce using rule 71 (exp9 -> NUMBER .)
    GREATER_EQUAL   reduce using rule 71 (exp9 -> NUMBER .)
    EQUALS          reduce using rule 71 (exp9 -> NUMBER .)
    DIFFERENT       reduce using rule 71 (exp9 -> NUMBER .)
    AND             reduce using rule 71 (exp9 -> NUMBER .)
    OR              reduce using rule 71 (exp9 -> NUMBER .)
    ASSIGN          reduce using rule 71 (exp9 -> NUMBER .)
    COLONEQ         reduce using rule 71 (exp9 -> NUMBER .)
    LCHAVES         reduce using rule 71 (exp9 -> NUMBER .)
    SEMICOLON       reduce using rule 71 (exp9 -> NUMBER .)
    NEWLINE         reduce using rule 71 (exp9 -> NUMBER .)
    RCHAVES         reduce using rule 71 (exp9 -> NUMBER .)
    RPAREN          reduce using rule 71 (exp9 -> NUMBER .)
    COMMA           reduce using rule 71 (exp9 -> NUMBER .)


state 72

    (72) exp9 -> STRING .

    DPLUS           reduce using rule 72 (exp9 -> STRING .)
    DMINUS          reduce using rule 72 (exp9 -> STRING .)
    TIMES           reduce using rule 72 (exp9 -> STRING .)
    DIVIDE          reduce using rule 72 (exp9 -> STRING .)
    MOD             reduce using rule 72 (exp9 -> STRING .)
    PLUS            reduce using rule 72 (exp9 -> STRING .)
    MINUS           reduce using rule 72 (exp9 -> STRING .)
    LESS            reduce using rule 72 (exp9 -> STRING .)
    GREATER         reduce using rule 72 (exp9 -> STRING .)
    LESS_EQUAL      reduce using rule 72 (exp9 -> STRING .)
    GREATER_EQUAL   reduce using rule 72 (exp9 -> STRING .)
    EQUALS          reduce using rule 72 (exp9 -> STRING .)
    DIFFERENT       reduce using rule 72 (exp9 -> STRING .)
    AND             reduce using rule 72 (exp9 -> STRING .)
    OR              reduce using rule 72 (exp9 -> STRING .)
    ASSIGN          reduce using rule 72 (exp9 -> STRING .)
    COLONEQ         reduce using rule 72 (exp9 -> STRING .)
    LCHAVES         reduce using rule 72 (exp9 -> STRING .)
    SEMICOLON       reduce using rule 72 (exp9 -> STRING .)
    NEWLINE         reduce using rule 72 (exp9 -> STRING .)
    RCHAVES         reduce using rule 72 (exp9 -> STRING .)
    RPAREN          reduce using rule 72 (exp9 -> STRING .)
    COMMA           reduce using rule 72 (exp9 -> STRING .)


state 73

    (73) exp9 -> ID .

    DPLUS           reduce using rule 73 (exp9 -> ID .)
    DMINUS          reduce using rule 73 (exp9 -> ID .)
    TIMES           reduce using rule 73 (exp9 -> ID .)
    DIVIDE          reduce using rule 73 (exp9 -> ID .)
    MOD             reduce using rule 73 (exp9 -> ID .)
    PLUS            reduce using rule 73 (exp9 -> ID .)
    MINUS           reduce using rule 73 (exp9 -> ID .)
    LESS            reduce using rule 73 (exp9 -> ID .)
    GREATER         reduce using rule 73 (exp9 -> ID .)
    LESS_EQUAL      reduce using rule 73 (exp9 -> ID .)
    GREATER_EQUAL   reduce using rule 73 (exp9 -> ID .)
    EQUALS          reduce using rule 73 (exp9 -> ID .)
    DIFFERENT       reduce using rule 73 (exp9 -> ID .)
    AND             reduce using rule 73 (exp9 -> ID .)
    OR              reduce using rule 73 (exp9 -> ID .)
    ASSIGN          reduce using rule 73 (exp9 -> ID .)
    COLONEQ         reduce using rule 73 (exp9 -> ID .)
    LCHAVES         reduce using rule 73 (exp9 -> ID .)
    SEMICOLON       reduce using rule 73 (exp9 -> ID .)
    NEWLINE         reduce using rule 73 (exp9 -> ID .)
    RCHAVES         reduce using rule 73 (exp9 -> ID .)
    RPAREN          reduce using rule 73 (exp9 -> ID .)
    COMMA           reduce using rule 73 (exp9 -> ID .)


state 74

    (74) exp9 -> TRUE .

    DPLUS           reduce using rule 74 (exp9 -> TRUE .)
    DMINUS          reduce using rule 74 (exp9 -> TRUE .)
    TIMES           reduce using rule 74 (exp9 -> TRUE .)
    DIVIDE          reduce using rule 74 (exp9 -> TRUE .)
    MOD             reduce using rule 74 (exp9 -> TRUE .)
    PLUS            reduce using rule 74 (exp9 -> TRUE .)
    MINUS           reduce using rule 74 (exp9 -> TRUE .)
    LESS            reduce using rule 74 (exp9 -> TRUE .)
    GREATER         reduce using rule 74 (exp9 -> TRUE .)
    LESS_EQUAL      reduce using rule 74 (exp9 -> TRUE .)
    GREATER_EQUAL   reduce using rule 74 (exp9 -> TRUE .)
    EQUALS          reduce using rule 74 (exp9 -> TRUE .)
    DIFFERENT       reduce using rule 74 (exp9 -> TRUE .)
    AND             reduce using rule 74 (exp9 -> TRUE .)
    OR              reduce using rule 74 (exp9 -> TRUE .)
    ASSIGN          reduce using rule 74 (exp9 -> TRUE .)
    COLONEQ         reduce using rule 74 (exp9 -> TRUE .)
    LCHAVES         reduce using rule 74 (exp9 -> TRUE .)
    SEMICOLON       reduce using rule 74 (exp9 -> TRUE .)
    NEWLINE         reduce using rule 74 (exp9 -> TRUE .)
    RCHAVES         reduce using rule 74 (exp9 -> TRUE .)
    RPAREN          reduce using rule 74 (exp9 -> TRUE .)
    COMMA           reduce using rule 74 (exp9 -> TRUE .)


state 75

    (75) exp9 -> FALSE .

    DPLUS           reduce using rule 75 (exp9 -> FALSE .)
    DMINUS          reduce using rule 75 (exp9 -> FALSE .)
    TIMES           reduce using rule 75 (exp9 -> FALSE .)
    DIVIDE          reduce using rule 75 (exp9 -> FALSE .)
    MOD             reduce using rule 75 (exp9 -> FALSE .)
    PLUS            reduce using rule 75 (exp9 -> FALSE .)
    MINUS           reduce using rule 75 (exp9 -> FALSE .)
    LESS            reduce using rule 75 (exp9 -> FALSE .)
    GREATER         reduce using rule 75 (exp9 -> FALSE .)
    LESS_EQUAL      reduce using rule 75 (exp9 -> FALSE .)
    GREATER_EQUAL   reduce using rule 75 (exp9 -> FALSE .)
    EQUALS          reduce using rule 75 (exp9 -> FALSE .)
    DIFFERENT       reduce using rule 75 (exp9 -> FALSE .)
    AND             reduce using rule 75 (exp9 -> FALSE .)
    OR              reduce using rule 75 (exp9 -> FALSE .)
    ASSIGN          reduce using rule 75 (exp9 -> FALSE .)
    COLONEQ         reduce using rule 75 (exp9 -> FALSE .)
    LCHAVES         reduce using rule 75 (exp9 -> FALSE .)
    SEMICOLON       reduce using rule 75 (exp9 -> FALSE .)
    NEWLINE         reduce using rule 75 (exp9 -> FALSE .)
    RCHAVES         reduce using rule 75 (exp9 -> FALSE .)
    RPAREN          reduce using rule 75 (exp9 -> FALSE .)
    COMMA           reduce using rule 75 (exp9 -> FALSE .)


state 76

    (76) exp9 -> LPAREN . exp RPAREN
    (44) exp -> . exp1
    (45) exp1 -> . exp1 ASSIGN exp2
    (46) exp1 -> . exp1 COLONEQ exp2
    (47) exp1 -> . exp2
    (48) exp2 -> . exp2 OR exp3
    (49) exp2 -> . exp3
    (50) exp3 -> . exp3 AND exp4
    (51) exp3 -> . exp4
    (52) exp4 -> . exp4 EQUALS exp5
    (53) exp4 -> . exp4 DIFFERENT exp5
    (54) exp4 -> . exp5
    (55) exp5 -> . exp5 LESS exp6
    (56) exp5 -> . exp5 GREATER exp6
    (57) exp5 -> . exp5 LESS_EQUAL exp6
    (58) exp5 -> . exp5 GREATER_EQUAL exp6
    (59) exp5 -> . exp6
    (60) exp6 -> . exp6 PLUS exp7
    (61) exp6 -> . exp6 MINUS exp7
    (62) exp6 -> . exp7
    (63) exp7 -> . exp7 TIMES exp8
    (64) exp7 -> . exp7 DIVIDE exp8
    (65) exp7 -> . exp7 MOD exp8
    (66) exp7 -> . exp8
    (67) exp8 -> . exp8 DPLUS
    (68) exp8 -> . exp8 DMINUS
    (69) exp8 -> . exp9
    (70) exp9 -> . NOT exp9
    (71) exp9 -> . NUMBER
    (72) exp9 -> . STRING
    (73) exp9 -> . ID
    (74) exp9 -> . TRUE
    (75) exp9 -> . FALSE
    (76) exp9 -> . LPAREN exp RPAREN

    NOT             shift and go to state 70
    NUMBER          shift and go to state 71
    STRING          shift and go to state 72
    ID              shift and go to state 73
    TRUE            shift and go to state 74
    FALSE           shift and go to state 75
    LPAREN          shift and go to state 76

    exp                            shift and go to state 107
    exp1                           shift and go to state 61
    exp2                           shift and go to state 62
    exp3                           shift and go to state 63
    exp4                           shift and go to state 64
    exp5                           shift and go to state 65
    exp6                           shift and go to state 66
    exp7                           shift and go to state 67
    exp8                           shift and go to state 68
    exp9                           shift and go to state 69

state 77

    (35) declaration -> VAR ID . type
    (36) declaration -> VAR ID . type ASSIGN exp
    (37) declaration -> VAR ID . type COLONEQ exp
    (38) declaration -> VAR ID . type SEMICOLON
    (39) declaration -> VAR ID . type ASSIGN exp SEMICOLON
    (40) declaration -> VAR ID . type COLONEQ exp SEMICOLON
    (41) type -> . INT
    (42) type -> . STRING
    (43) type -> . BOOL

    INT             shift and go to state 34
    STRING          shift and go to state 35
    BOOL            shift and go to state 36

    type                           shift and go to state 108

state 78

    (83) callFunc -> ID LPAREN . params RPAREN
    (84) callFunc -> ID LPAREN . RPAREN
    (85) callFunc -> ID LPAREN . params RPAREN SEMICOLON
    (86) callFunc -> ID LPAREN . RPAREN SEMICOLON
    (91) params -> . exp COMMA params
    (92) params -> . exp
    (44) exp -> . exp1
    (45) exp1 -> . exp1 ASSIGN exp2
    (46) exp1 -> . exp1 COLONEQ exp2
    (47) exp1 -> . exp2
    (48) exp2 -> . exp2 OR exp3
    (49) exp2 -> . exp3
    (50) exp3 -> . exp3 AND exp4
    (51) exp3 -> . exp4
    (52) exp4 -> . exp4 EQUALS exp5
    (53) exp4 -> . exp4 DIFFERENT exp5
    (54) exp4 -> . exp5
    (55) exp5 -> . exp5 LESS exp6
    (56) exp5 -> . exp5 GREATER exp6
    (57) exp5 -> . exp5 LESS_EQUAL exp6
    (58) exp5 -> . exp5 GREATER_EQUAL exp6
    (59) exp5 -> . exp6
    (60) exp6 -> . exp6 PLUS exp7
    (61) exp6 -> . exp6 MINUS exp7
    (62) exp6 -> . exp7
    (63) exp7 -> . exp7 TIMES exp8
    (64) exp7 -> . exp7 DIVIDE exp8
    (65) exp7 -> . exp7 MOD exp8
    (66) exp7 -> . exp8
    (67) exp8 -> . exp8 DPLUS
    (68) exp8 -> . exp8 DMINUS
    (69) exp8 -> . exp9
    (70) exp9 -> . NOT exp9
    (71) exp9 -> . NUMBER
    (72) exp9 -> . STRING
    (73) exp9 -> . ID
    (74) exp9 -> . TRUE
    (75) exp9 -> . FALSE
    (76) exp9 -> . LPAREN exp RPAREN

    RPAREN          shift and go to state 110
    NOT             shift and go to state 70
    NUMBER          shift and go to state 71
    STRING          shift and go to state 72
    ID              shift and go to state 73
    TRUE            shift and go to state 74
    FALSE           shift and go to state 75
    LPAREN          shift and go to state 76

    params                         shift and go to state 109
    exp                            shift and go to state 111
    exp1                           shift and go to state 61
    exp2                           shift and go to state 62
    exp3                           shift and go to state 63
    exp4                           shift and go to state 64
    exp5                           shift and go to state 65
    exp6                           shift and go to state 66
    exp7                           shift and go to state 67
    exp8                           shift and go to state 68
    exp9                           shift and go to state 69

state 79

    (87) callFuncPS -> ID DOT . ID LPAREN params RPAREN
    (88) callFuncPS -> ID DOT . ID LPAREN RPAREN
    (89) callFuncPS -> ID DOT . ID LPAREN params RPAREN SEMICOLON
    (90) callFuncPS -> ID DOT . ID LPAREN RPAREN SEMICOLON

    ID              shift and go to state 112


state 80

    (32) for -> FOR body .

    NEWLINE         reduce using rule 32 (for -> FOR body .)
    RCHAVES         reduce using rule 32 (for -> FOR body .)


state 81

    (33) for -> FOR exp . body
    (34) for -> FOR exp . SEMICOLON exp SEMICOLON exp body
    (18) body -> . LCHAVES NEWLINE stms RCHAVES
    (19) body -> . LCHAVES NEWLINE RCHAVES

    SEMICOLON       shift and go to state 114
    LCHAVES         shift and go to state 23

    body                           shift and go to state 113

state 82

    (77) return -> RETURN exp .
    (79) return -> RETURN exp . SEMICOLON

    NEWLINE         reduce using rule 77 (return -> RETURN exp .)
    RCHAVES         reduce using rule 77 (return -> RETURN exp .)
    SEMICOLON       shift and go to state 115


state 83

    (80) return -> RETURN SEMICOLON .

    NEWLINE         reduce using rule 80 (return -> RETURN SEMICOLON .)
    RCHAVES         reduce using rule 80 (return -> RETURN SEMICOLON .)


state 84

    (82) break -> BREAK SEMICOLON .

    NEWLINE         reduce using rule 82 (break -> BREAK SEMICOLON .)
    RCHAVES         reduce using rule 82 (break -> BREAK SEMICOLON .)


state 85

    (17) funcreturn -> LPAREN type RPAREN .

    NEWLINE         reduce using rule 17 (funcreturn -> LPAREN type RPAREN .)
    LCHAVES         reduce using rule 17 (funcreturn -> LPAREN type RPAREN .)


state 86

    (15) sigparams -> ID type COMMA sigparams .

    RPAREN          reduce using rule 15 (sigparams -> ID type COMMA sigparams .)


state 87

    (21) stms -> statement NEWLINE stms .

    RCHAVES         reduce using rule 21 (stms -> statement NEWLINE stms .)


state 88

    (24) statement1 -> IF exp body . ELSE body
    (25) statement1 -> IF exp body .

    ELSE            shift and go to state 116
    NEWLINE         reduce using rule 25 (statement1 -> IF exp body .)
    RCHAVES         reduce using rule 25 (statement1 -> IF exp body .)


state 89

    (45) exp1 -> exp1 ASSIGN . exp2
    (48) exp2 -> . exp2 OR exp3
    (49) exp2 -> . exp3
    (50) exp3 -> . exp3 AND exp4
    (51) exp3 -> . exp4
    (52) exp4 -> . exp4 EQUALS exp5
    (53) exp4 -> . exp4 DIFFERENT exp5
    (54) exp4 -> . exp5
    (55) exp5 -> . exp5 LESS exp6
    (56) exp5 -> . exp5 GREATER exp6
    (57) exp5 -> . exp5 LESS_EQUAL exp6
    (58) exp5 -> . exp5 GREATER_EQUAL exp6
    (59) exp5 -> . exp6
    (60) exp6 -> . exp6 PLUS exp7
    (61) exp6 -> . exp6 MINUS exp7
    (62) exp6 -> . exp7
    (63) exp7 -> . exp7 TIMES exp8
    (64) exp7 -> . exp7 DIVIDE exp8
    (65) exp7 -> . exp7 MOD exp8
    (66) exp7 -> . exp8
    (67) exp8 -> . exp8 DPLUS
    (68) exp8 -> . exp8 DMINUS
    (69) exp8 -> . exp9
    (70) exp9 -> . NOT exp9
    (71) exp9 -> . NUMBER
    (72) exp9 -> . STRING
    (73) exp9 -> . ID
    (74) exp9 -> . TRUE
    (75) exp9 -> . FALSE
    (76) exp9 -> . LPAREN exp RPAREN

    NOT             shift and go to state 70
    NUMBER          shift and go to state 71
    STRING          shift and go to state 72
    ID              shift and go to state 73
    TRUE            shift and go to state 74
    FALSE           shift and go to state 75
    LPAREN          shift and go to state 76

    exp2                           shift and go to state 117
    exp3                           shift and go to state 63
    exp4                           shift and go to state 64
    exp5                           shift and go to state 65
    exp6                           shift and go to state 66
    exp7                           shift and go to state 67
    exp8                           shift and go to state 68
    exp9                           shift and go to state 69

state 90

    (46) exp1 -> exp1 COLONEQ . exp2
    (48) exp2 -> . exp2 OR exp3
    (49) exp2 -> . exp3
    (50) exp3 -> . exp3 AND exp4
    (51) exp3 -> . exp4
    (52) exp4 -> . exp4 EQUALS exp5
    (53) exp4 -> . exp4 DIFFERENT exp5
    (54) exp4 -> . exp5
    (55) exp5 -> . exp5 LESS exp6
    (56) exp5 -> . exp5 GREATER exp6
    (57) exp5 -> . exp5 LESS_EQUAL exp6
    (58) exp5 -> . exp5 GREATER_EQUAL exp6
    (59) exp5 -> . exp6
    (60) exp6 -> . exp6 PLUS exp7
    (61) exp6 -> . exp6 MINUS exp7
    (62) exp6 -> . exp7
    (63) exp7 -> . exp7 TIMES exp8
    (64) exp7 -> . exp7 DIVIDE exp8
    (65) exp7 -> . exp7 MOD exp8
    (66) exp7 -> . exp8
    (67) exp8 -> . exp8 DPLUS
    (68) exp8 -> . exp8 DMINUS
    (69) exp8 -> . exp9
    (70) exp9 -> . NOT exp9
    (71) exp9 -> . NUMBER
    (72) exp9 -> . STRING
    (73) exp9 -> . ID
    (74) exp9 -> . TRUE
    (75) exp9 -> . FALSE
    (76) exp9 -> . LPAREN exp RPAREN

    NOT             shift and go to state 70
    NUMBER          shift and go to state 71
    STRING          shift and go to state 72
    ID              shift and go to state 73
    TRUE            shift and go to state 74
    FALSE           shift and go to state 75
    LPAREN          shift and go to state 76

    exp2                           shift and go to state 118
    exp3                           shift and go to state 63
    exp4                           shift and go to state 64
    exp5                           shift and go to state 65
    exp6                           shift and go to state 66
    exp7                           shift and go to state 67
    exp8                           shift and go to state 68
    exp9                           shift and go to state 69

state 91

    (48) exp2 -> exp2 OR . exp3
    (50) exp3 -> . exp3 AND exp4
    (51) exp3 -> . exp4
    (52) exp4 -> . exp4 EQUALS exp5
    (53) exp4 -> . exp4 DIFFERENT exp5
    (54) exp4 -> . exp5
    (55) exp5 -> . exp5 LESS exp6
    (56) exp5 -> . exp5 GREATER exp6
    (57) exp5 -> . exp5 LESS_EQUAL exp6
    (58) exp5 -> . exp5 GREATER_EQUAL exp6
    (59) exp5 -> . exp6
    (60) exp6 -> . exp6 PLUS exp7
    (61) exp6 -> . exp6 MINUS exp7
    (62) exp6 -> . exp7
    (63) exp7 -> . exp7 TIMES exp8
    (64) exp7 -> . exp7 DIVIDE exp8
    (65) exp7 -> . exp7 MOD exp8
    (66) exp7 -> . exp8
    (67) exp8 -> . exp8 DPLUS
    (68) exp8 -> . exp8 DMINUS
    (69) exp8 -> . exp9
    (70) exp9 -> . NOT exp9
    (71) exp9 -> . NUMBER
    (72) exp9 -> . STRING
    (73) exp9 -> . ID
    (74) exp9 -> . TRUE
    (75) exp9 -> . FALSE
    (76) exp9 -> . LPAREN exp RPAREN

    NOT             shift and go to state 70
    NUMBER          shift and go to state 71
    STRING          shift and go to state 72
    ID              shift and go to state 73
    TRUE            shift and go to state 74
    FALSE           shift and go to state 75
    LPAREN          shift and go to state 76

    exp3                           shift and go to state 119
    exp4                           shift and go to state 64
    exp5                           shift and go to state 65
    exp6                           shift and go to state 66
    exp7                           shift and go to state 67
    exp8                           shift and go to state 68
    exp9                           shift and go to state 69

state 92

    (50) exp3 -> exp3 AND . exp4
    (52) exp4 -> . exp4 EQUALS exp5
    (53) exp4 -> . exp4 DIFFERENT exp5
    (54) exp4 -> . exp5
    (55) exp5 -> . exp5 LESS exp6
    (56) exp5 -> . exp5 GREATER exp6
    (57) exp5 -> . exp5 LESS_EQUAL exp6
    (58) exp5 -> . exp5 GREATER_EQUAL exp6
    (59) exp5 -> . exp6
    (60) exp6 -> . exp6 PLUS exp7
    (61) exp6 -> . exp6 MINUS exp7
    (62) exp6 -> . exp7
    (63) exp7 -> . exp7 TIMES exp8
    (64) exp7 -> . exp7 DIVIDE exp8
    (65) exp7 -> . exp7 MOD exp8
    (66) exp7 -> . exp8
    (67) exp8 -> . exp8 DPLUS
    (68) exp8 -> . exp8 DMINUS
    (69) exp8 -> . exp9
    (70) exp9 -> . NOT exp9
    (71) exp9 -> . NUMBER
    (72) exp9 -> . STRING
    (73) exp9 -> . ID
    (74) exp9 -> . TRUE
    (75) exp9 -> . FALSE
    (76) exp9 -> . LPAREN exp RPAREN

    NOT             shift and go to state 70
    NUMBER          shift and go to state 71
    STRING          shift and go to state 72
    ID              shift and go to state 73
    TRUE            shift and go to state 74
    FALSE           shift and go to state 75
    LPAREN          shift and go to state 76

    exp4                           shift and go to state 120
    exp5                           shift and go to state 65
    exp6                           shift and go to state 66
    exp7                           shift and go to state 67
    exp8                           shift and go to state 68
    exp9                           shift and go to state 69

state 93

    (52) exp4 -> exp4 EQUALS . exp5
    (55) exp5 -> . exp5 LESS exp6
    (56) exp5 -> . exp5 GREATER exp6
    (57) exp5 -> . exp5 LESS_EQUAL exp6
    (58) exp5 -> . exp5 GREATER_EQUAL exp6
    (59) exp5 -> . exp6
    (60) exp6 -> . exp6 PLUS exp7
    (61) exp6 -> . exp6 MINUS exp7
    (62) exp6 -> . exp7
    (63) exp7 -> . exp7 TIMES exp8
    (64) exp7 -> . exp7 DIVIDE exp8
    (65) exp7 -> . exp7 MOD exp8
    (66) exp7 -> . exp8
    (67) exp8 -> . exp8 DPLUS
    (68) exp8 -> . exp8 DMINUS
    (69) exp8 -> . exp9
    (70) exp9 -> . NOT exp9
    (71) exp9 -> . NUMBER
    (72) exp9 -> . STRING
    (73) exp9 -> . ID
    (74) exp9 -> . TRUE
    (75) exp9 -> . FALSE
    (76) exp9 -> . LPAREN exp RPAREN

    NOT             shift and go to state 70
    NUMBER          shift and go to state 71
    STRING          shift and go to state 72
    ID              shift and go to state 73
    TRUE            shift and go to state 74
    FALSE           shift and go to state 75
    LPAREN          shift and go to state 76

    exp5                           shift and go to state 121
    exp6                           shift and go to state 66
    exp7                           shift and go to state 67
    exp8                           shift and go to state 68
    exp9                           shift and go to state 69

state 94

    (53) exp4 -> exp4 DIFFERENT . exp5
    (55) exp5 -> . exp5 LESS exp6
    (56) exp5 -> . exp5 GREATER exp6
    (57) exp5 -> . exp5 LESS_EQUAL exp6
    (58) exp5 -> . exp5 GREATER_EQUAL exp6
    (59) exp5 -> . exp6
    (60) exp6 -> . exp6 PLUS exp7
    (61) exp6 -> . exp6 MINUS exp7
    (62) exp6 -> . exp7
    (63) exp7 -> . exp7 TIMES exp8
    (64) exp7 -> . exp7 DIVIDE exp8
    (65) exp7 -> . exp7 MOD exp8
    (66) exp7 -> . exp8
    (67) exp8 -> . exp8 DPLUS
    (68) exp8 -> . exp8 DMINUS
    (69) exp8 -> . exp9
    (70) exp9 -> . NOT exp9
    (71) exp9 -> . NUMBER
    (72) exp9 -> . STRING
    (73) exp9 -> . ID
    (74) exp9 -> . TRUE
    (75) exp9 -> . FALSE
    (76) exp9 -> . LPAREN exp RPAREN

    NOT             shift and go to state 70
    NUMBER          shift and go to state 71
    STRING          shift and go to state 72
    ID              shift and go to state 73
    TRUE            shift and go to state 74
    FALSE           shift and go to state 75
    LPAREN          shift and go to state 76

    exp5                           shift and go to state 122
    exp6                           shift and go to state 66
    exp7                           shift and go to state 67
    exp8                           shift and go to state 68
    exp9                           shift and go to state 69

state 95

    (55) exp5 -> exp5 LESS . exp6
    (60) exp6 -> . exp6 PLUS exp7
    (61) exp6 -> . exp6 MINUS exp7
    (62) exp6 -> . exp7
    (63) exp7 -> . exp7 TIMES exp8
    (64) exp7 -> . exp7 DIVIDE exp8
    (65) exp7 -> . exp7 MOD exp8
    (66) exp7 -> . exp8
    (67) exp8 -> . exp8 DPLUS
    (68) exp8 -> . exp8 DMINUS
    (69) exp8 -> . exp9
    (70) exp9 -> . NOT exp9
    (71) exp9 -> . NUMBER
    (72) exp9 -> . STRING
    (73) exp9 -> . ID
    (74) exp9 -> . TRUE
    (75) exp9 -> . FALSE
    (76) exp9 -> . LPAREN exp RPAREN

    NOT             shift and go to state 70
    NUMBER          shift and go to state 71
    STRING          shift and go to state 72
    ID              shift and go to state 73
    TRUE            shift and go to state 74
    FALSE           shift and go to state 75
    LPAREN          shift and go to state 76

    exp6                           shift and go to state 123
    exp7                           shift and go to state 67
    exp8                           shift and go to state 68
    exp9                           shift and go to state 69

state 96

    (56) exp5 -> exp5 GREATER . exp6
    (60) exp6 -> . exp6 PLUS exp7
    (61) exp6 -> . exp6 MINUS exp7
    (62) exp6 -> . exp7
    (63) exp7 -> . exp7 TIMES exp8
    (64) exp7 -> . exp7 DIVIDE exp8
    (65) exp7 -> . exp7 MOD exp8
    (66) exp7 -> . exp8
    (67) exp8 -> . exp8 DPLUS
    (68) exp8 -> . exp8 DMINUS
    (69) exp8 -> . exp9
    (70) exp9 -> . NOT exp9
    (71) exp9 -> . NUMBER
    (72) exp9 -> . STRING
    (73) exp9 -> . ID
    (74) exp9 -> . TRUE
    (75) exp9 -> . FALSE
    (76) exp9 -> . LPAREN exp RPAREN

    NOT             shift and go to state 70
    NUMBER          shift and go to state 71
    STRING          shift and go to state 72
    ID              shift and go to state 73
    TRUE            shift and go to state 74
    FALSE           shift and go to state 75
    LPAREN          shift and go to state 76

    exp6                           shift and go to state 124
    exp7                           shift and go to state 67
    exp8                           shift and go to state 68
    exp9                           shift and go to state 69

state 97

    (57) exp5 -> exp5 LESS_EQUAL . exp6
    (60) exp6 -> . exp6 PLUS exp7
    (61) exp6 -> . exp6 MINUS exp7
    (62) exp6 -> . exp7
    (63) exp7 -> . exp7 TIMES exp8
    (64) exp7 -> . exp7 DIVIDE exp8
    (65) exp7 -> . exp7 MOD exp8
    (66) exp7 -> . exp8
    (67) exp8 -> . exp8 DPLUS
    (68) exp8 -> . exp8 DMINUS
    (69) exp8 -> . exp9
    (70) exp9 -> . NOT exp9
    (71) exp9 -> . NUMBER
    (72) exp9 -> . STRING
    (73) exp9 -> . ID
    (74) exp9 -> . TRUE
    (75) exp9 -> . FALSE
    (76) exp9 -> . LPAREN exp RPAREN

    NOT             shift and go to state 70
    NUMBER          shift and go to state 71
    STRING          shift and go to state 72
    ID              shift and go to state 73
    TRUE            shift and go to state 74
    FALSE           shift and go to state 75
    LPAREN          shift and go to state 76

    exp6                           shift and go to state 125
    exp7                           shift and go to state 67
    exp8                           shift and go to state 68
    exp9                           shift and go to state 69

state 98

    (58) exp5 -> exp5 GREATER_EQUAL . exp6
    (60) exp6 -> . exp6 PLUS exp7
    (61) exp6 -> . exp6 MINUS exp7
    (62) exp6 -> . exp7
    (63) exp7 -> . exp7 TIMES exp8
    (64) exp7 -> . exp7 DIVIDE exp8
    (65) exp7 -> . exp7 MOD exp8
    (66) exp7 -> . exp8
    (67) exp8 -> . exp8 DPLUS
    (68) exp8 -> . exp8 DMINUS
    (69) exp8 -> . exp9
    (70) exp9 -> . NOT exp9
    (71) exp9 -> . NUMBER
    (72) exp9 -> . STRING
    (73) exp9 -> . ID
    (74) exp9 -> . TRUE
    (75) exp9 -> . FALSE
    (76) exp9 -> . LPAREN exp RPAREN

    NOT             shift and go to state 70
    NUMBER          shift and go to state 71
    STRING          shift and go to state 72
    ID              shift and go to state 73
    TRUE            shift and go to state 74
    FALSE           shift and go to state 75
    LPAREN          shift and go to state 76

    exp6                           shift and go to state 126
    exp7                           shift and go to state 67
    exp8                           shift and go to state 68
    exp9                           shift and go to state 69

state 99

    (60) exp6 -> exp6 PLUS . exp7
    (63) exp7 -> . exp7 TIMES exp8
    (64) exp7 -> . exp7 DIVIDE exp8
    (65) exp7 -> . exp7 MOD exp8
    (66) exp7 -> . exp8
    (67) exp8 -> . exp8 DPLUS
    (68) exp8 -> . exp8 DMINUS
    (69) exp8 -> . exp9
    (70) exp9 -> . NOT exp9
    (71) exp9 -> . NUMBER
    (72) exp9 -> . STRING
    (73) exp9 -> . ID
    (74) exp9 -> . TRUE
    (75) exp9 -> . FALSE
    (76) exp9 -> . LPAREN exp RPAREN

    NOT             shift and go to state 70
    NUMBER          shift and go to state 71
    STRING          shift and go to state 72
    ID              shift and go to state 73
    TRUE            shift and go to state 74
    FALSE           shift and go to state 75
    LPAREN          shift and go to state 76

    exp7                           shift and go to state 127
    exp8                           shift and go to state 68
    exp9                           shift and go to state 69

state 100

    (61) exp6 -> exp6 MINUS . exp7
    (63) exp7 -> . exp7 TIMES exp8
    (64) exp7 -> . exp7 DIVIDE exp8
    (65) exp7 -> . exp7 MOD exp8
    (66) exp7 -> . exp8
    (67) exp8 -> . exp8 DPLUS
    (68) exp8 -> . exp8 DMINUS
    (69) exp8 -> . exp9
    (70) exp9 -> . NOT exp9
    (71) exp9 -> . NUMBER
    (72) exp9 -> . STRING
    (73) exp9 -> . ID
    (74) exp9 -> . TRUE
    (75) exp9 -> . FALSE
    (76) exp9 -> . LPAREN exp RPAREN

    NOT             shift and go to state 70
    NUMBER          shift and go to state 71
    STRING          shift and go to state 72
    ID              shift and go to state 73
    TRUE            shift and go to state 74
    FALSE           shift and go to state 75
    LPAREN          shift and go to state 76

    exp7                           shift and go to state 128
    exp8                           shift and go to state 68
    exp9                           shift and go to state 69

state 101

    (63) exp7 -> exp7 TIMES . exp8
    (67) exp8 -> . exp8 DPLUS
    (68) exp8 -> . exp8 DMINUS
    (69) exp8 -> . exp9
    (70) exp9 -> . NOT exp9
    (71) exp9 -> . NUMBER
    (72) exp9 -> . STRING
    (73) exp9 -> . ID
    (74) exp9 -> . TRUE
    (75) exp9 -> . FALSE
    (76) exp9 -> . LPAREN exp RPAREN

    NOT             shift and go to state 70
    NUMBER          shift and go to state 71
    STRING          shift and go to state 72
    ID              shift and go to state 73
    TRUE            shift and go to state 74
    FALSE           shift and go to state 75
    LPAREN          shift and go to state 76

    exp8                           shift and go to state 129
    exp9                           shift and go to state 69

state 102

    (64) exp7 -> exp7 DIVIDE . exp8
    (67) exp8 -> . exp8 DPLUS
    (68) exp8 -> . exp8 DMINUS
    (69) exp8 -> . exp9
    (70) exp9 -> . NOT exp9
    (71) exp9 -> . NUMBER
    (72) exp9 -> . STRING
    (73) exp9 -> . ID
    (74) exp9 -> . TRUE
    (75) exp9 -> . FALSE
    (76) exp9 -> . LPAREN exp RPAREN

    NOT             shift and go to state 70
    NUMBER          shift and go to state 71
    STRING          shift and go to state 72
    ID              shift and go to state 73
    TRUE            shift and go to state 74
    FALSE           shift and go to state 75
    LPAREN          shift and go to state 76

    exp8                           shift and go to state 130
    exp9                           shift and go to state 69

state 103

    (65) exp7 -> exp7 MOD . exp8
    (67) exp8 -> . exp8 DPLUS
    (68) exp8 -> . exp8 DMINUS
    (69) exp8 -> . exp9
    (70) exp9 -> . NOT exp9
    (71) exp9 -> . NUMBER
    (72) exp9 -> . STRING
    (73) exp9 -> . ID
    (74) exp9 -> . TRUE
    (75) exp9 -> . FALSE
    (76) exp9 -> . LPAREN exp RPAREN

    NOT             shift and go to state 70
    NUMBER          shift and go to state 71
    STRING          shift and go to state 72
    ID              shift and go to state 73
    TRUE            shift and go to state 74
    FALSE           shift and go to state 75
    LPAREN          shift and go to state 76

    exp8                           shift and go to state 131
    exp9                           shift and go to state 69

state 104

    (67) exp8 -> exp8 DPLUS .

    DPLUS           reduce using rule 67 (exp8 -> exp8 DPLUS .)
    DMINUS          reduce using rule 67 (exp8 -> exp8 DPLUS .)
    TIMES           reduce using rule 67 (exp8 -> exp8 DPLUS .)
    DIVIDE          reduce using rule 67 (exp8 -> exp8 DPLUS .)
    MOD             reduce using rule 67 (exp8 -> exp8 DPLUS .)
    PLUS            reduce using rule 67 (exp8 -> exp8 DPLUS .)
    MINUS           reduce using rule 67 (exp8 -> exp8 DPLUS .)
    LESS            reduce using rule 67 (exp8 -> exp8 DPLUS .)
    GREATER         reduce using rule 67 (exp8 -> exp8 DPLUS .)
    LESS_EQUAL      reduce using rule 67 (exp8 -> exp8 DPLUS .)
    GREATER_EQUAL   reduce using rule 67 (exp8 -> exp8 DPLUS .)
    EQUALS          reduce using rule 67 (exp8 -> exp8 DPLUS .)
    DIFFERENT       reduce using rule 67 (exp8 -> exp8 DPLUS .)
    AND             reduce using rule 67 (exp8 -> exp8 DPLUS .)
    OR              reduce using rule 67 (exp8 -> exp8 DPLUS .)
    ASSIGN          reduce using rule 67 (exp8 -> exp8 DPLUS .)
    COLONEQ         reduce using rule 67 (exp8 -> exp8 DPLUS .)
    LCHAVES         reduce using rule 67 (exp8 -> exp8 DPLUS .)
    SEMICOLON       reduce using rule 67 (exp8 -> exp8 DPLUS .)
    NEWLINE         reduce using rule 67 (exp8 -> exp8 DPLUS .)
    RCHAVES         reduce using rule 67 (exp8 -> exp8 DPLUS .)
    RPAREN          reduce using rule 67 (exp8 -> exp8 DPLUS .)
    COMMA           reduce using rule 67 (exp8 -> exp8 DPLUS .)


state 105

    (68) exp8 -> exp8 DMINUS .

    DPLUS           reduce using rule 68 (exp8 -> exp8 DMINUS .)
    DMINUS          reduce using rule 68 (exp8 -> exp8 DMINUS .)
    TIMES           reduce using rule 68 (exp8 -> exp8 DMINUS .)
    DIVIDE          reduce using rule 68 (exp8 -> exp8 DMINUS .)
    MOD             reduce using rule 68 (exp8 -> exp8 DMINUS .)
    PLUS            reduce using rule 68 (exp8 -> exp8 DMINUS .)
    MINUS           reduce using rule 68 (exp8 -> exp8 DMINUS .)
    LESS            reduce using rule 68 (exp8 -> exp8 DMINUS .)
    GREATER         reduce using rule 68 (exp8 -> exp8 DMINUS .)
    LESS_EQUAL      reduce using rule 68 (exp8 -> exp8 DMINUS .)
    GREATER_EQUAL   reduce using rule 68 (exp8 -> exp8 DMINUS .)
    EQUALS          reduce using rule 68 (exp8 -> exp8 DMINUS .)
    DIFFERENT       reduce using rule 68 (exp8 -> exp8 DMINUS .)
    AND             reduce using rule 68 (exp8 -> exp8 DMINUS .)
    OR              reduce using rule 68 (exp8 -> exp8 DMINUS .)
    ASSIGN          reduce using rule 68 (exp8 -> exp8 DMINUS .)
    COLONEQ         reduce using rule 68 (exp8 -> exp8 DMINUS .)
    LCHAVES         reduce using rule 68 (exp8 -> exp8 DMINUS .)
    SEMICOLON       reduce using rule 68 (exp8 -> exp8 DMINUS .)
    NEWLINE         reduce using rule 68 (exp8 -> exp8 DMINUS .)
    RCHAVES         reduce using rule 68 (exp8 -> exp8 DMINUS .)
    RPAREN          reduce using rule 68 (exp8 -> exp8 DMINUS .)
    COMMA           reduce using rule 68 (exp8 -> exp8 DMINUS .)


state 106

    (70) exp9 -> NOT exp9 .

    DPLUS           reduce using rule 70 (exp9 -> NOT exp9 .)
    DMINUS          reduce using rule 70 (exp9 -> NOT exp9 .)
    TIMES           reduce using rule 70 (exp9 -> NOT exp9 .)
    DIVIDE          reduce using rule 70 (exp9 -> NOT exp9 .)
    MOD             reduce using rule 70 (exp9 -> NOT exp9 .)
    PLUS            reduce using rule 70 (exp9 -> NOT exp9 .)
    MINUS           reduce using rule 70 (exp9 -> NOT exp9 .)
    LESS            reduce using rule 70 (exp9 -> NOT exp9 .)
    GREATER         reduce using rule 70 (exp9 -> NOT exp9 .)
    LESS_EQUAL      reduce using rule 70 (exp9 -> NOT exp9 .)
    GREATER_EQUAL   reduce using rule 70 (exp9 -> NOT exp9 .)
    EQUALS          reduce using rule 70 (exp9 -> NOT exp9 .)
    DIFFERENT       reduce using rule 70 (exp9 -> NOT exp9 .)
    AND             reduce using rule 70 (exp9 -> NOT exp9 .)
    OR              reduce using rule 70 (exp9 -> NOT exp9 .)
    ASSIGN          reduce using rule 70 (exp9 -> NOT exp9 .)
    COLONEQ         reduce using rule 70 (exp9 -> NOT exp9 .)
    LCHAVES         reduce using rule 70 (exp9 -> NOT exp9 .)
    SEMICOLON       reduce using rule 70 (exp9 -> NOT exp9 .)
    NEWLINE         reduce using rule 70 (exp9 -> NOT exp9 .)
    RCHAVES         reduce using rule 70 (exp9 -> NOT exp9 .)
    RPAREN          reduce using rule 70 (exp9 -> NOT exp9 .)
    COMMA           reduce using rule 70 (exp9 -> NOT exp9 .)


state 107

    (76) exp9 -> LPAREN exp . RPAREN

    RPAREN          shift and go to state 132


state 108

    (35) declaration -> VAR ID type .
    (36) declaration -> VAR ID type . ASSIGN exp
    (37) declaration -> VAR ID type . COLONEQ exp
    (38) declaration -> VAR ID type . SEMICOLON
    (39) declaration -> VAR ID type . ASSIGN exp SEMICOLON
    (40) declaration -> VAR ID type . COLONEQ exp SEMICOLON

    NEWLINE         reduce using rule 35 (declaration -> VAR ID type .)
    RCHAVES         reduce using rule 35 (declaration -> VAR ID type .)
    ASSIGN          shift and go to state 133
    COLONEQ         shift and go to state 134
    SEMICOLON       shift and go to state 135


state 109

    (83) callFunc -> ID LPAREN params . RPAREN
    (85) callFunc -> ID LPAREN params . RPAREN SEMICOLON

    RPAREN          shift and go to state 136


state 110

    (84) callFunc -> ID LPAREN RPAREN .
    (86) callFunc -> ID LPAREN RPAREN . SEMICOLON

    NEWLINE         reduce using rule 84 (callFunc -> ID LPAREN RPAREN .)
    RCHAVES         reduce using rule 84 (callFunc -> ID LPAREN RPAREN .)
    SEMICOLON       shift and go to state 137


state 111

    (91) params -> exp . COMMA params
    (92) params -> exp .

    COMMA           shift and go to state 138
    RPAREN          reduce using rule 92 (params -> exp .)


state 112

    (87) callFuncPS -> ID DOT ID . LPAREN params RPAREN
    (88) callFuncPS -> ID DOT ID . LPAREN RPAREN
    (89) callFuncPS -> ID DOT ID . LPAREN params RPAREN SEMICOLON
    (90) callFuncPS -> ID DOT ID . LPAREN RPAREN SEMICOLON

    LPAREN          shift and go to state 139


state 113

    (33) for -> FOR exp body .

    NEWLINE         reduce using rule 33 (for -> FOR exp body .)
    RCHAVES         reduce using rule 33 (for -> FOR exp body .)


state 114

    (34) for -> FOR exp SEMICOLON . exp SEMICOLON exp body
    (44) exp -> . exp1
    (45) exp1 -> . exp1 ASSIGN exp2
    (46) exp1 -> . exp1 COLONEQ exp2
    (47) exp1 -> . exp2
    (48) exp2 -> . exp2 OR exp3
    (49) exp2 -> . exp3
    (50) exp3 -> . exp3 AND exp4
    (51) exp3 -> . exp4
    (52) exp4 -> . exp4 EQUALS exp5
    (53) exp4 -> . exp4 DIFFERENT exp5
    (54) exp4 -> . exp5
    (55) exp5 -> . exp5 LESS exp6
    (56) exp5 -> . exp5 GREATER exp6
    (57) exp5 -> . exp5 LESS_EQUAL exp6
    (58) exp5 -> . exp5 GREATER_EQUAL exp6
    (59) exp5 -> . exp6
    (60) exp6 -> . exp6 PLUS exp7
    (61) exp6 -> . exp6 MINUS exp7
    (62) exp6 -> . exp7
    (63) exp7 -> . exp7 TIMES exp8
    (64) exp7 -> . exp7 DIVIDE exp8
    (65) exp7 -> . exp7 MOD exp8
    (66) exp7 -> . exp8
    (67) exp8 -> . exp8 DPLUS
    (68) exp8 -> . exp8 DMINUS
    (69) exp8 -> . exp9
    (70) exp9 -> . NOT exp9
    (71) exp9 -> . NUMBER
    (72) exp9 -> . STRING
    (73) exp9 -> . ID
    (74) exp9 -> . TRUE
    (75) exp9 -> . FALSE
    (76) exp9 -> . LPAREN exp RPAREN

    NOT             shift and go to state 70
    NUMBER          shift and go to state 71
    STRING          shift and go to state 72
    ID              shift and go to state 73
    TRUE            shift and go to state 74
    FALSE           shift and go to state 75
    LPAREN          shift and go to state 76

    exp                            shift and go to state 140
    exp1                           shift and go to state 61
    exp2                           shift and go to state 62
    exp3                           shift and go to state 63
    exp4                           shift and go to state 64
    exp5                           shift and go to state 65
    exp6                           shift and go to state 66
    exp7                           shift and go to state 67
    exp8                           shift and go to state 68
    exp9                           shift and go to state 69

state 115

    (79) return -> RETURN exp SEMICOLON .

    NEWLINE         reduce using rule 79 (return -> RETURN exp SEMICOLON .)
    RCHAVES         reduce using rule 79 (return -> RETURN exp SEMICOLON .)


state 116

    (24) statement1 -> IF exp body ELSE . body
    (18) body -> . LCHAVES NEWLINE stms RCHAVES
    (19) body -> . LCHAVES NEWLINE RCHAVES

    LCHAVES         shift and go to state 23

    body                           shift and go to state 141

state 117

    (45) exp1 -> exp1 ASSIGN exp2 .
    (48) exp2 -> exp2 . OR exp3

    ASSIGN          reduce using rule 45 (exp1 -> exp1 ASSIGN exp2 .)
    COLONEQ         reduce using rule 45 (exp1 -> exp1 ASSIGN exp2 .)
    LCHAVES         reduce using rule 45 (exp1 -> exp1 ASSIGN exp2 .)
    SEMICOLON       reduce using rule 45 (exp1 -> exp1 ASSIGN exp2 .)
    NEWLINE         reduce using rule 45 (exp1 -> exp1 ASSIGN exp2 .)
    RCHAVES         reduce using rule 45 (exp1 -> exp1 ASSIGN exp2 .)
    RPAREN          reduce using rule 45 (exp1 -> exp1 ASSIGN exp2 .)
    COMMA           reduce using rule 45 (exp1 -> exp1 ASSIGN exp2 .)
    OR              shift and go to state 91


state 118

    (46) exp1 -> exp1 COLONEQ exp2 .
    (48) exp2 -> exp2 . OR exp3

    ASSIGN          reduce using rule 46 (exp1 -> exp1 COLONEQ exp2 .)
    COLONEQ         reduce using rule 46 (exp1 -> exp1 COLONEQ exp2 .)
    LCHAVES         reduce using rule 46 (exp1 -> exp1 COLONEQ exp2 .)
    SEMICOLON       reduce using rule 46 (exp1 -> exp1 COLONEQ exp2 .)
    NEWLINE         reduce using rule 46 (exp1 -> exp1 COLONEQ exp2 .)
    RCHAVES         reduce using rule 46 (exp1 -> exp1 COLONEQ exp2 .)
    RPAREN          reduce using rule 46 (exp1 -> exp1 COLONEQ exp2 .)
    COMMA           reduce using rule 46 (exp1 -> exp1 COLONEQ exp2 .)
    OR              shift and go to state 91


state 119

    (48) exp2 -> exp2 OR exp3 .
    (50) exp3 -> exp3 . AND exp4

    OR              reduce using rule 48 (exp2 -> exp2 OR exp3 .)
    ASSIGN          reduce using rule 48 (exp2 -> exp2 OR exp3 .)
    COLONEQ         reduce using rule 48 (exp2 -> exp2 OR exp3 .)
    LCHAVES         reduce using rule 48 (exp2 -> exp2 OR exp3 .)
    SEMICOLON       reduce using rule 48 (exp2 -> exp2 OR exp3 .)
    NEWLINE         reduce using rule 48 (exp2 -> exp2 OR exp3 .)
    RCHAVES         reduce using rule 48 (exp2 -> exp2 OR exp3 .)
    RPAREN          reduce using rule 48 (exp2 -> exp2 OR exp3 .)
    COMMA           reduce using rule 48 (exp2 -> exp2 OR exp3 .)
    AND             shift and go to state 92


state 120

    (50) exp3 -> exp3 AND exp4 .
    (52) exp4 -> exp4 . EQUALS exp5
    (53) exp4 -> exp4 . DIFFERENT exp5

    AND             reduce using rule 50 (exp3 -> exp3 AND exp4 .)
    OR              reduce using rule 50 (exp3 -> exp3 AND exp4 .)
    ASSIGN          reduce using rule 50 (exp3 -> exp3 AND exp4 .)
    COLONEQ         reduce using rule 50 (exp3 -> exp3 AND exp4 .)
    LCHAVES         reduce using rule 50 (exp3 -> exp3 AND exp4 .)
    SEMICOLON       reduce using rule 50 (exp3 -> exp3 AND exp4 .)
    NEWLINE         reduce using rule 50 (exp3 -> exp3 AND exp4 .)
    RCHAVES         reduce using rule 50 (exp3 -> exp3 AND exp4 .)
    RPAREN          reduce using rule 50 (exp3 -> exp3 AND exp4 .)
    COMMA           reduce using rule 50 (exp3 -> exp3 AND exp4 .)
    EQUALS          shift and go to state 93
    DIFFERENT       shift and go to state 94


state 121

    (52) exp4 -> exp4 EQUALS exp5 .
    (55) exp5 -> exp5 . LESS exp6
    (56) exp5 -> exp5 . GREATER exp6
    (57) exp5 -> exp5 . LESS_EQUAL exp6
    (58) exp5 -> exp5 . GREATER_EQUAL exp6

    EQUALS          reduce using rule 52 (exp4 -> exp4 EQUALS exp5 .)
    DIFFERENT       reduce using rule 52 (exp4 -> exp4 EQUALS exp5 .)
    AND             reduce using rule 52 (exp4 -> exp4 EQUALS exp5 .)
    OR              reduce using rule 52 (exp4 -> exp4 EQUALS exp5 .)
    ASSIGN          reduce using rule 52 (exp4 -> exp4 EQUALS exp5 .)
    COLONEQ         reduce using rule 52 (exp4 -> exp4 EQUALS exp5 .)
    LCHAVES         reduce using rule 52 (exp4 -> exp4 EQUALS exp5 .)
    SEMICOLON       reduce using rule 52 (exp4 -> exp4 EQUALS exp5 .)
    NEWLINE         reduce using rule 52 (exp4 -> exp4 EQUALS exp5 .)
    RCHAVES         reduce using rule 52 (exp4 -> exp4 EQUALS exp5 .)
    RPAREN          reduce using rule 52 (exp4 -> exp4 EQUALS exp5 .)
    COMMA           reduce using rule 52 (exp4 -> exp4 EQUALS exp5 .)
    LESS            shift and go to state 95
    GREATER         shift and go to state 96
    LESS_EQUAL      shift and go to state 97
    GREATER_EQUAL   shift and go to state 98


state 122

    (53) exp4 -> exp4 DIFFERENT exp5 .
    (55) exp5 -> exp5 . LESS exp6
    (56) exp5 -> exp5 . GREATER exp6
    (57) exp5 -> exp5 . LESS_EQUAL exp6
    (58) exp5 -> exp5 . GREATER_EQUAL exp6

    EQUALS          reduce using rule 53 (exp4 -> exp4 DIFFERENT exp5 .)
    DIFFERENT       reduce using rule 53 (exp4 -> exp4 DIFFERENT exp5 .)
    AND             reduce using rule 53 (exp4 -> exp4 DIFFERENT exp5 .)
    OR              reduce using rule 53 (exp4 -> exp4 DIFFERENT exp5 .)
    ASSIGN          reduce using rule 53 (exp4 -> exp4 DIFFERENT exp5 .)
    COLONEQ         reduce using rule 53 (exp4 -> exp4 DIFFERENT exp5 .)
    LCHAVES         reduce using rule 53 (exp4 -> exp4 DIFFERENT exp5 .)
    SEMICOLON       reduce using rule 53 (exp4 -> exp4 DIFFERENT exp5 .)
    NEWLINE         reduce using rule 53 (exp4 -> exp4 DIFFERENT exp5 .)
    RCHAVES         reduce using rule 53 (exp4 -> exp4 DIFFERENT exp5 .)
    RPAREN          reduce using rule 53 (exp4 -> exp4 DIFFERENT exp5 .)
    COMMA           reduce using rule 53 (exp4 -> exp4 DIFFERENT exp5 .)
    LESS            shift and go to state 95
    GREATER         shift and go to state 96
    LESS_EQUAL      shift and go to state 97
    GREATER_EQUAL   shift and go to state 98


state 123

    (55) exp5 -> exp5 LESS exp6 .
    (60) exp6 -> exp6 . PLUS exp7
    (61) exp6 -> exp6 . MINUS exp7

    LESS            reduce using rule 55 (exp5 -> exp5 LESS exp6 .)
    GREATER         reduce using rule 55 (exp5 -> exp5 LESS exp6 .)
    LESS_EQUAL      reduce using rule 55 (exp5 -> exp5 LESS exp6 .)
    GREATER_EQUAL   reduce using rule 55 (exp5 -> exp5 LESS exp6 .)
    EQUALS          reduce using rule 55 (exp5 -> exp5 LESS exp6 .)
    DIFFERENT       reduce using rule 55 (exp5 -> exp5 LESS exp6 .)
    AND             reduce using rule 55 (exp5 -> exp5 LESS exp6 .)
    OR              reduce using rule 55 (exp5 -> exp5 LESS exp6 .)
    ASSIGN          reduce using rule 55 (exp5 -> exp5 LESS exp6 .)
    COLONEQ         reduce using rule 55 (exp5 -> exp5 LESS exp6 .)
    LCHAVES         reduce using rule 55 (exp5 -> exp5 LESS exp6 .)
    SEMICOLON       reduce using rule 55 (exp5 -> exp5 LESS exp6 .)
    NEWLINE         reduce using rule 55 (exp5 -> exp5 LESS exp6 .)
    RCHAVES         reduce using rule 55 (exp5 -> exp5 LESS exp6 .)
    RPAREN          reduce using rule 55 (exp5 -> exp5 LESS exp6 .)
    COMMA           reduce using rule 55 (exp5 -> exp5 LESS exp6 .)
    PLUS            shift and go to state 99
    MINUS           shift and go to state 100


state 124

    (56) exp5 -> exp5 GREATER exp6 .
    (60) exp6 -> exp6 . PLUS exp7
    (61) exp6 -> exp6 . MINUS exp7

    LESS            reduce using rule 56 (exp5 -> exp5 GREATER exp6 .)
    GREATER         reduce using rule 56 (exp5 -> exp5 GREATER exp6 .)
    LESS_EQUAL      reduce using rule 56 (exp5 -> exp5 GREATER exp6 .)
    GREATER_EQUAL   reduce using rule 56 (exp5 -> exp5 GREATER exp6 .)
    EQUALS          reduce using rule 56 (exp5 -> exp5 GREATER exp6 .)
    DIFFERENT       reduce using rule 56 (exp5 -> exp5 GREATER exp6 .)
    AND             reduce using rule 56 (exp5 -> exp5 GREATER exp6 .)
    OR              reduce using rule 56 (exp5 -> exp5 GREATER exp6 .)
    ASSIGN          reduce using rule 56 (exp5 -> exp5 GREATER exp6 .)
    COLONEQ         reduce using rule 56 (exp5 -> exp5 GREATER exp6 .)
    LCHAVES         reduce using rule 56 (exp5 -> exp5 GREATER exp6 .)
    SEMICOLON       reduce using rule 56 (exp5 -> exp5 GREATER exp6 .)
    NEWLINE         reduce using rule 56 (exp5 -> exp5 GREATER exp6 .)
    RCHAVES         reduce using rule 56 (exp5 -> exp5 GREATER exp6 .)
    RPAREN          reduce using rule 56 (exp5 -> exp5 GREATER exp6 .)
    COMMA           reduce using rule 56 (exp5 -> exp5 GREATER exp6 .)
    PLUS            shift and go to state 99
    MINUS           shift and go to state 100


state 125

    (57) exp5 -> exp5 LESS_EQUAL exp6 .
    (60) exp6 -> exp6 . PLUS exp7
    (61) exp6 -> exp6 . MINUS exp7

    LESS            reduce using rule 57 (exp5 -> exp5 LESS_EQUAL exp6 .)
    GREATER         reduce using rule 57 (exp5 -> exp5 LESS_EQUAL exp6 .)
    LESS_EQUAL      reduce using rule 57 (exp5 -> exp5 LESS_EQUAL exp6 .)
    GREATER_EQUAL   reduce using rule 57 (exp5 -> exp5 LESS_EQUAL exp6 .)
    EQUALS          reduce using rule 57 (exp5 -> exp5 LESS_EQUAL exp6 .)
    DIFFERENT       reduce using rule 57 (exp5 -> exp5 LESS_EQUAL exp6 .)
    AND             reduce using rule 57 (exp5 -> exp5 LESS_EQUAL exp6 .)
    OR              reduce using rule 57 (exp5 -> exp5 LESS_EQUAL exp6 .)
    ASSIGN          reduce using rule 57 (exp5 -> exp5 LESS_EQUAL exp6 .)
    COLONEQ         reduce using rule 57 (exp5 -> exp5 LESS_EQUAL exp6 .)
    LCHAVES         reduce using rule 57 (exp5 -> exp5 LESS_EQUAL exp6 .)
    SEMICOLON       reduce using rule 57 (exp5 -> exp5 LESS_EQUAL exp6 .)
    NEWLINE         reduce using rule 57 (exp5 -> exp5 LESS_EQUAL exp6 .)
    RCHAVES         reduce using rule 57 (exp5 -> exp5 LESS_EQUAL exp6 .)
    RPAREN          reduce using rule 57 (exp5 -> exp5 LESS_EQUAL exp6 .)
    COMMA           reduce using rule 57 (exp5 -> exp5 LESS_EQUAL exp6 .)
    PLUS            shift and go to state 99
    MINUS           shift and go to state 100


state 126

    (58) exp5 -> exp5 GREATER_EQUAL exp6 .
    (60) exp6 -> exp6 . PLUS exp7
    (61) exp6 -> exp6 . MINUS exp7

    LESS            reduce using rule 58 (exp5 -> exp5 GREATER_EQUAL exp6 .)
    GREATER         reduce using rule 58 (exp5 -> exp5 GREATER_EQUAL exp6 .)
    LESS_EQUAL      reduce using rule 58 (exp5 -> exp5 GREATER_EQUAL exp6 .)
    GREATER_EQUAL   reduce using rule 58 (exp5 -> exp5 GREATER_EQUAL exp6 .)
    EQUALS          reduce using rule 58 (exp5 -> exp5 GREATER_EQUAL exp6 .)
    DIFFERENT       reduce using rule 58 (exp5 -> exp5 GREATER_EQUAL exp6 .)
    AND             reduce using rule 58 (exp5 -> exp5 GREATER_EQUAL exp6 .)
    OR              reduce using rule 58 (exp5 -> exp5 GREATER_EQUAL exp6 .)
    ASSIGN          reduce using rule 58 (exp5 -> exp5 GREATER_EQUAL exp6 .)
    COLONEQ         reduce using rule 58 (exp5 -> exp5 GREATER_EQUAL exp6 .)
    LCHAVES         reduce using rule 58 (exp5 -> exp5 GREATER_EQUAL exp6 .)
    SEMICOLON       reduce using rule 58 (exp5 -> exp5 GREATER_EQUAL exp6 .)
    NEWLINE         reduce using rule 58 (exp5 -> exp5 GREATER_EQUAL exp6 .)
    RCHAVES         reduce using rule 58 (exp5 -> exp5 GREATER_EQUAL exp6 .)
    RPAREN          reduce using rule 58 (exp5 -> exp5 GREATER_EQUAL exp6 .)
    COMMA           reduce using rule 58 (exp5 -> exp5 GREATER_EQUAL exp6 .)
    PLUS            shift and go to state 99
    MINUS           shift and go to state 100


state 127

    (60) exp6 -> exp6 PLUS exp7 .
    (63) exp7 -> exp7 . TIMES exp8
    (64) exp7 -> exp7 . DIVIDE exp8
    (65) exp7 -> exp7 . MOD exp8

    PLUS            reduce using rule 60 (exp6 -> exp6 PLUS exp7 .)
    MINUS           reduce using rule 60 (exp6 -> exp6 PLUS exp7 .)
    LESS            reduce using rule 60 (exp6 -> exp6 PLUS exp7 .)
    GREATER         reduce using rule 60 (exp6 -> exp6 PLUS exp7 .)
    LESS_EQUAL      reduce using rule 60 (exp6 -> exp6 PLUS exp7 .)
    GREATER_EQUAL   reduce using rule 60 (exp6 -> exp6 PLUS exp7 .)
    EQUALS          reduce using rule 60 (exp6 -> exp6 PLUS exp7 .)
    DIFFERENT       reduce using rule 60 (exp6 -> exp6 PLUS exp7 .)
    AND             reduce using rule 60 (exp6 -> exp6 PLUS exp7 .)
    OR              reduce using rule 60 (exp6 -> exp6 PLUS exp7 .)
    ASSIGN          reduce using rule 60 (exp6 -> exp6 PLUS exp7 .)
    COLONEQ         reduce using rule 60 (exp6 -> exp6 PLUS exp7 .)
    LCHAVES         reduce using rule 60 (exp6 -> exp6 PLUS exp7 .)
    SEMICOLON       reduce using rule 60 (exp6 -> exp6 PLUS exp7 .)
    NEWLINE         reduce using rule 60 (exp6 -> exp6 PLUS exp7 .)
    RCHAVES         reduce using rule 60 (exp6 -> exp6 PLUS exp7 .)
    RPAREN          reduce using rule 60 (exp6 -> exp6 PLUS exp7 .)
    COMMA           reduce using rule 60 (exp6 -> exp6 PLUS exp7 .)
    TIMES           shift and go to state 101
    DIVIDE          shift and go to state 102
    MOD             shift and go to state 103


state 128

    (61) exp6 -> exp6 MINUS exp7 .
    (63) exp7 -> exp7 . TIMES exp8
    (64) exp7 -> exp7 . DIVIDE exp8
    (65) exp7 -> exp7 . MOD exp8

    PLUS            reduce using rule 61 (exp6 -> exp6 MINUS exp7 .)
    MINUS           reduce using rule 61 (exp6 -> exp6 MINUS exp7 .)
    LESS            reduce using rule 61 (exp6 -> exp6 MINUS exp7 .)
    GREATER         reduce using rule 61 (exp6 -> exp6 MINUS exp7 .)
    LESS_EQUAL      reduce using rule 61 (exp6 -> exp6 MINUS exp7 .)
    GREATER_EQUAL   reduce using rule 61 (exp6 -> exp6 MINUS exp7 .)
    EQUALS          reduce using rule 61 (exp6 -> exp6 MINUS exp7 .)
    DIFFERENT       reduce using rule 61 (exp6 -> exp6 MINUS exp7 .)
    AND             reduce using rule 61 (exp6 -> exp6 MINUS exp7 .)
    OR              reduce using rule 61 (exp6 -> exp6 MINUS exp7 .)
    ASSIGN          reduce using rule 61 (exp6 -> exp6 MINUS exp7 .)
    COLONEQ         reduce using rule 61 (exp6 -> exp6 MINUS exp7 .)
    LCHAVES         reduce using rule 61 (exp6 -> exp6 MINUS exp7 .)
    SEMICOLON       reduce using rule 61 (exp6 -> exp6 MINUS exp7 .)
    NEWLINE         reduce using rule 61 (exp6 -> exp6 MINUS exp7 .)
    RCHAVES         reduce using rule 61 (exp6 -> exp6 MINUS exp7 .)
    RPAREN          reduce using rule 61 (exp6 -> exp6 MINUS exp7 .)
    COMMA           reduce using rule 61 (exp6 -> exp6 MINUS exp7 .)
    TIMES           shift and go to state 101
    DIVIDE          shift and go to state 102
    MOD             shift and go to state 103


state 129

    (63) exp7 -> exp7 TIMES exp8 .
    (67) exp8 -> exp8 . DPLUS
    (68) exp8 -> exp8 . DMINUS

    TIMES           reduce using rule 63 (exp7 -> exp7 TIMES exp8 .)
    DIVIDE          reduce using rule 63 (exp7 -> exp7 TIMES exp8 .)
    MOD             reduce using rule 63 (exp7 -> exp7 TIMES exp8 .)
    PLUS            reduce using rule 63 (exp7 -> exp7 TIMES exp8 .)
    MINUS           reduce using rule 63 (exp7 -> exp7 TIMES exp8 .)
    LESS            reduce using rule 63 (exp7 -> exp7 TIMES exp8 .)
    GREATER         reduce using rule 63 (exp7 -> exp7 TIMES exp8 .)
    LESS_EQUAL      reduce using rule 63 (exp7 -> exp7 TIMES exp8 .)
    GREATER_EQUAL   reduce using rule 63 (exp7 -> exp7 TIMES exp8 .)
    EQUALS          reduce using rule 63 (exp7 -> exp7 TIMES exp8 .)
    DIFFERENT       reduce using rule 63 (exp7 -> exp7 TIMES exp8 .)
    AND             reduce using rule 63 (exp7 -> exp7 TIMES exp8 .)
    OR              reduce using rule 63 (exp7 -> exp7 TIMES exp8 .)
    ASSIGN          reduce using rule 63 (exp7 -> exp7 TIMES exp8 .)
    COLONEQ         reduce using rule 63 (exp7 -> exp7 TIMES exp8 .)
    LCHAVES         reduce using rule 63 (exp7 -> exp7 TIMES exp8 .)
    SEMICOLON       reduce using rule 63 (exp7 -> exp7 TIMES exp8 .)
    NEWLINE         reduce using rule 63 (exp7 -> exp7 TIMES exp8 .)
    RCHAVES         reduce using rule 63 (exp7 -> exp7 TIMES exp8 .)
    RPAREN          reduce using rule 63 (exp7 -> exp7 TIMES exp8 .)
    COMMA           reduce using rule 63 (exp7 -> exp7 TIMES exp8 .)
    DPLUS           shift and go to state 104
    DMINUS          shift and go to state 105


state 130

    (64) exp7 -> exp7 DIVIDE exp8 .
    (67) exp8 -> exp8 . DPLUS
    (68) exp8 -> exp8 . DMINUS

    TIMES           reduce using rule 64 (exp7 -> exp7 DIVIDE exp8 .)
    DIVIDE          reduce using rule 64 (exp7 -> exp7 DIVIDE exp8 .)
    MOD             reduce using rule 64 (exp7 -> exp7 DIVIDE exp8 .)
    PLUS            reduce using rule 64 (exp7 -> exp7 DIVIDE exp8 .)
    MINUS           reduce using rule 64 (exp7 -> exp7 DIVIDE exp8 .)
    LESS            reduce using rule 64 (exp7 -> exp7 DIVIDE exp8 .)
    GREATER         reduce using rule 64 (exp7 -> exp7 DIVIDE exp8 .)
    LESS_EQUAL      reduce using rule 64 (exp7 -> exp7 DIVIDE exp8 .)
    GREATER_EQUAL   reduce using rule 64 (exp7 -> exp7 DIVIDE exp8 .)
    EQUALS          reduce using rule 64 (exp7 -> exp7 DIVIDE exp8 .)
    DIFFERENT       reduce using rule 64 (exp7 -> exp7 DIVIDE exp8 .)
    AND             reduce using rule 64 (exp7 -> exp7 DIVIDE exp8 .)
    OR              reduce using rule 64 (exp7 -> exp7 DIVIDE exp8 .)
    ASSIGN          reduce using rule 64 (exp7 -> exp7 DIVIDE exp8 .)
    COLONEQ         reduce using rule 64 (exp7 -> exp7 DIVIDE exp8 .)
    LCHAVES         reduce using rule 64 (exp7 -> exp7 DIVIDE exp8 .)
    SEMICOLON       reduce using rule 64 (exp7 -> exp7 DIVIDE exp8 .)
    NEWLINE         reduce using rule 64 (exp7 -> exp7 DIVIDE exp8 .)
    RCHAVES         reduce using rule 64 (exp7 -> exp7 DIVIDE exp8 .)
    RPAREN          reduce using rule 64 (exp7 -> exp7 DIVIDE exp8 .)
    COMMA           reduce using rule 64 (exp7 -> exp7 DIVIDE exp8 .)
    DPLUS           shift and go to state 104
    DMINUS          shift and go to state 105


state 131

    (65) exp7 -> exp7 MOD exp8 .
    (67) exp8 -> exp8 . DPLUS
    (68) exp8 -> exp8 . DMINUS

    TIMES           reduce using rule 65 (exp7 -> exp7 MOD exp8 .)
    DIVIDE          reduce using rule 65 (exp7 -> exp7 MOD exp8 .)
    MOD             reduce using rule 65 (exp7 -> exp7 MOD exp8 .)
    PLUS            reduce using rule 65 (exp7 -> exp7 MOD exp8 .)
    MINUS           reduce using rule 65 (exp7 -> exp7 MOD exp8 .)
    LESS            reduce using rule 65 (exp7 -> exp7 MOD exp8 .)
    GREATER         reduce using rule 65 (exp7 -> exp7 MOD exp8 .)
    LESS_EQUAL      reduce using rule 65 (exp7 -> exp7 MOD exp8 .)
    GREATER_EQUAL   reduce using rule 65 (exp7 -> exp7 MOD exp8 .)
    EQUALS          reduce using rule 65 (exp7 -> exp7 MOD exp8 .)
    DIFFERENT       reduce using rule 65 (exp7 -> exp7 MOD exp8 .)
    AND             reduce using rule 65 (exp7 -> exp7 MOD exp8 .)
    OR              reduce using rule 65 (exp7 -> exp7 MOD exp8 .)
    ASSIGN          reduce using rule 65 (exp7 -> exp7 MOD exp8 .)
    COLONEQ         reduce using rule 65 (exp7 -> exp7 MOD exp8 .)
    LCHAVES         reduce using rule 65 (exp7 -> exp7 MOD exp8 .)
    SEMICOLON       reduce using rule 65 (exp7 -> exp7 MOD exp8 .)
    NEWLINE         reduce using rule 65 (exp7 -> exp7 MOD exp8 .)
    RCHAVES         reduce using rule 65 (exp7 -> exp7 MOD exp8 .)
    RPAREN          reduce using rule 65 (exp7 -> exp7 MOD exp8 .)
    COMMA           reduce using rule 65 (exp7 -> exp7 MOD exp8 .)
    DPLUS           shift and go to state 104
    DMINUS          shift and go to state 105


state 132

    (76) exp9 -> LPAREN exp RPAREN .

    DPLUS           reduce using rule 76 (exp9 -> LPAREN exp RPAREN .)
    DMINUS          reduce using rule 76 (exp9 -> LPAREN exp RPAREN .)
    TIMES           reduce using rule 76 (exp9 -> LPAREN exp RPAREN .)
    DIVIDE          reduce using rule 76 (exp9 -> LPAREN exp RPAREN .)
    MOD             reduce using rule 76 (exp9 -> LPAREN exp RPAREN .)
    PLUS            reduce using rule 76 (exp9 -> LPAREN exp RPAREN .)
    MINUS           reduce using rule 76 (exp9 -> LPAREN exp RPAREN .)
    LESS            reduce using rule 76 (exp9 -> LPAREN exp RPAREN .)
    GREATER         reduce using rule 76 (exp9 -> LPAREN exp RPAREN .)
    LESS_EQUAL      reduce using rule 76 (exp9 -> LPAREN exp RPAREN .)
    GREATER_EQUAL   reduce using rule 76 (exp9 -> LPAREN exp RPAREN .)
    EQUALS          reduce using rule 76 (exp9 -> LPAREN exp RPAREN .)
    DIFFERENT       reduce using rule 76 (exp9 -> LPAREN exp RPAREN .)
    AND             reduce using rule 76 (exp9 -> LPAREN exp RPAREN .)
    OR              reduce using rule 76 (exp9 -> LPAREN exp RPAREN .)
    ASSIGN          reduce using rule 76 (exp9 -> LPAREN exp RPAREN .)
    COLONEQ         reduce using rule 76 (exp9 -> LPAREN exp RPAREN .)
    LCHAVES         reduce using rule 76 (exp9 -> LPAREN exp RPAREN .)
    SEMICOLON       reduce using rule 76 (exp9 -> LPAREN exp RPAREN .)
    NEWLINE         reduce using rule 76 (exp9 -> LPAREN exp RPAREN .)
    RCHAVES         reduce using rule 76 (exp9 -> LPAREN exp RPAREN .)
    RPAREN          reduce using rule 76 (exp9 -> LPAREN exp RPAREN .)
    COMMA           reduce using rule 76 (exp9 -> LPAREN exp RPAREN .)


state 133

    (36) declaration -> VAR ID type ASSIGN . exp
    (39) declaration -> VAR ID type ASSIGN . exp SEMICOLON
    (44) exp -> . exp1
    (45) exp1 -> . exp1 ASSIGN exp2
    (46) exp1 -> . exp1 COLONEQ exp2
    (47) exp1 -> . exp2
    (48) exp2 -> . exp2 OR exp3
    (49) exp2 -> . exp3
    (50) exp3 -> . exp3 AND exp4
    (51) exp3 -> . exp4
    (52) exp4 -> . exp4 EQUALS exp5
    (53) exp4 -> . exp4 DIFFERENT exp5
    (54) exp4 -> . exp5
    (55) exp5 -> . exp5 LESS exp6
    (56) exp5 -> . exp5 GREATER exp6
    (57) exp5 -> . exp5 LESS_EQUAL exp6
    (58) exp5 -> . exp5 GREATER_EQUAL exp6
    (59) exp5 -> . exp6
    (60) exp6 -> . exp6 PLUS exp7
    (61) exp6 -> . exp6 MINUS exp7
    (62) exp6 -> . exp7
    (63) exp7 -> . exp7 TIMES exp8
    (64) exp7 -> . exp7 DIVIDE exp8
    (65) exp7 -> . exp7 MOD exp8
    (66) exp7 -> . exp8
    (67) exp8 -> . exp8 DPLUS
    (68) exp8 -> . exp8 DMINUS
    (69) exp8 -> . exp9
    (70) exp9 -> . NOT exp9
    (71) exp9 -> . NUMBER
    (72) exp9 -> . STRING
    (73) exp9 -> . ID
    (74) exp9 -> . TRUE
    (75) exp9 -> . FALSE
    (76) exp9 -> . LPAREN exp RPAREN

    NOT             shift and go to state 70
    NUMBER          shift and go to state 71
    STRING          shift and go to state 72
    ID              shift and go to state 73
    TRUE            shift and go to state 74
    FALSE           shift and go to state 75
    LPAREN          shift and go to state 76

    exp                            shift and go to state 142
    exp1                           shift and go to state 61
    exp2                           shift and go to state 62
    exp3                           shift and go to state 63
    exp4                           shift and go to state 64
    exp5                           shift and go to state 65
    exp6                           shift and go to state 66
    exp7                           shift and go to state 67
    exp8                           shift and go to state 68
    exp9                           shift and go to state 69

state 134

    (37) declaration -> VAR ID type COLONEQ . exp
    (40) declaration -> VAR ID type COLONEQ . exp SEMICOLON
    (44) exp -> . exp1
    (45) exp1 -> . exp1 ASSIGN exp2
    (46) exp1 -> . exp1 COLONEQ exp2
    (47) exp1 -> . exp2
    (48) exp2 -> . exp2 OR exp3
    (49) exp2 -> . exp3
    (50) exp3 -> . exp3 AND exp4
    (51) exp3 -> . exp4
    (52) exp4 -> . exp4 EQUALS exp5
    (53) exp4 -> . exp4 DIFFERENT exp5
    (54) exp4 -> . exp5
    (55) exp5 -> . exp5 LESS exp6
    (56) exp5 -> . exp5 GREATER exp6
    (57) exp5 -> . exp5 LESS_EQUAL exp6
    (58) exp5 -> . exp5 GREATER_EQUAL exp6
    (59) exp5 -> . exp6
    (60) exp6 -> . exp6 PLUS exp7
    (61) exp6 -> . exp6 MINUS exp7
    (62) exp6 -> . exp7
    (63) exp7 -> . exp7 TIMES exp8
    (64) exp7 -> . exp7 DIVIDE exp8
    (65) exp7 -> . exp7 MOD exp8
    (66) exp7 -> . exp8
    (67) exp8 -> . exp8 DPLUS
    (68) exp8 -> . exp8 DMINUS
    (69) exp8 -> . exp9
    (70) exp9 -> . NOT exp9
    (71) exp9 -> . NUMBER
    (72) exp9 -> . STRING
    (73) exp9 -> . ID
    (74) exp9 -> . TRUE
    (75) exp9 -> . FALSE
    (76) exp9 -> . LPAREN exp RPAREN

    NOT             shift and go to state 70
    NUMBER          shift and go to state 71
    STRING          shift and go to state 72
    ID              shift and go to state 73
    TRUE            shift and go to state 74
    FALSE           shift and go to state 75
    LPAREN          shift and go to state 76

    exp                            shift and go to state 143
    exp1                           shift and go to state 61
    exp2                           shift and go to state 62
    exp3                           shift and go to state 63
    exp4                           shift and go to state 64
    exp5                           shift and go to state 65
    exp6                           shift and go to state 66
    exp7                           shift and go to state 67
    exp8                           shift and go to state 68
    exp9                           shift and go to state 69

state 135

    (38) declaration -> VAR ID type SEMICOLON .

    NEWLINE         reduce using rule 38 (declaration -> VAR ID type SEMICOLON .)
    RCHAVES         reduce using rule 38 (declaration -> VAR ID type SEMICOLON .)


state 136

    (83) callFunc -> ID LPAREN params RPAREN .
    (85) callFunc -> ID LPAREN params RPAREN . SEMICOLON

    NEWLINE         reduce using rule 83 (callFunc -> ID LPAREN params RPAREN .)
    RCHAVES         reduce using rule 83 (callFunc -> ID LPAREN params RPAREN .)
    SEMICOLON       shift and go to state 144


state 137

    (86) callFunc -> ID LPAREN RPAREN SEMICOLON .

    NEWLINE         reduce using rule 86 (callFunc -> ID LPAREN RPAREN SEMICOLON .)
    RCHAVES         reduce using rule 86 (callFunc -> ID LPAREN RPAREN SEMICOLON .)


state 138

    (91) params -> exp COMMA . params
    (91) params -> . exp COMMA params
    (92) params -> . exp
    (44) exp -> . exp1
    (45) exp1 -> . exp1 ASSIGN exp2
    (46) exp1 -> . exp1 COLONEQ exp2
    (47) exp1 -> . exp2
    (48) exp2 -> . exp2 OR exp3
    (49) exp2 -> . exp3
    (50) exp3 -> . exp3 AND exp4
    (51) exp3 -> . exp4
    (52) exp4 -> . exp4 EQUALS exp5
    (53) exp4 -> . exp4 DIFFERENT exp5
    (54) exp4 -> . exp5
    (55) exp5 -> . exp5 LESS exp6
    (56) exp5 -> . exp5 GREATER exp6
    (57) exp5 -> . exp5 LESS_EQUAL exp6
    (58) exp5 -> . exp5 GREATER_EQUAL exp6
    (59) exp5 -> . exp6
    (60) exp6 -> . exp6 PLUS exp7
    (61) exp6 -> . exp6 MINUS exp7
    (62) exp6 -> . exp7
    (63) exp7 -> . exp7 TIMES exp8
    (64) exp7 -> . exp7 DIVIDE exp8
    (65) exp7 -> . exp7 MOD exp8
    (66) exp7 -> . exp8
    (67) exp8 -> . exp8 DPLUS
    (68) exp8 -> . exp8 DMINUS
    (69) exp8 -> . exp9
    (70) exp9 -> . NOT exp9
    (71) exp9 -> . NUMBER
    (72) exp9 -> . STRING
    (73) exp9 -> . ID
    (74) exp9 -> . TRUE
    (75) exp9 -> . FALSE
    (76) exp9 -> . LPAREN exp RPAREN

    NOT             shift and go to state 70
    NUMBER          shift and go to state 71
    STRING          shift and go to state 72
    ID              shift and go to state 73
    TRUE            shift and go to state 74
    FALSE           shift and go to state 75
    LPAREN          shift and go to state 76

    exp                            shift and go to state 111
    params                         shift and go to state 145
    exp1                           shift and go to state 61
    exp2                           shift and go to state 62
    exp3                           shift and go to state 63
    exp4                           shift and go to state 64
    exp5                           shift and go to state 65
    exp6                           shift and go to state 66
    exp7                           shift and go to state 67
    exp8                           shift and go to state 68
    exp9                           shift and go to state 69

state 139

    (87) callFuncPS -> ID DOT ID LPAREN . params RPAREN
    (88) callFuncPS -> ID DOT ID LPAREN . RPAREN
    (89) callFuncPS -> ID DOT ID LPAREN . params RPAREN SEMICOLON
    (90) callFuncPS -> ID DOT ID LPAREN . RPAREN SEMICOLON
    (91) params -> . exp COMMA params
    (92) params -> . exp
    (44) exp -> . exp1
    (45) exp1 -> . exp1 ASSIGN exp2
    (46) exp1 -> . exp1 COLONEQ exp2
    (47) exp1 -> . exp2
    (48) exp2 -> . exp2 OR exp3
    (49) exp2 -> . exp3
    (50) exp3 -> . exp3 AND exp4
    (51) exp3 -> . exp4
    (52) exp4 -> . exp4 EQUALS exp5
    (53) exp4 -> . exp4 DIFFERENT exp5
    (54) exp4 -> . exp5
    (55) exp5 -> . exp5 LESS exp6
    (56) exp5 -> . exp5 GREATER exp6
    (57) exp5 -> . exp5 LESS_EQUAL exp6
    (58) exp5 -> . exp5 GREATER_EQUAL exp6
    (59) exp5 -> . exp6
    (60) exp6 -> . exp6 PLUS exp7
    (61) exp6 -> . exp6 MINUS exp7
    (62) exp6 -> . exp7
    (63) exp7 -> . exp7 TIMES exp8
    (64) exp7 -> . exp7 DIVIDE exp8
    (65) exp7 -> . exp7 MOD exp8
    (66) exp7 -> . exp8
    (67) exp8 -> . exp8 DPLUS
    (68) exp8 -> . exp8 DMINUS
    (69) exp8 -> . exp9
    (70) exp9 -> . NOT exp9
    (71) exp9 -> . NUMBER
    (72) exp9 -> . STRING
    (73) exp9 -> . ID
    (74) exp9 -> . TRUE
    (75) exp9 -> . FALSE
    (76) exp9 -> . LPAREN exp RPAREN

    RPAREN          shift and go to state 147
    NOT             shift and go to state 70
    NUMBER          shift and go to state 71
    STRING          shift and go to state 72
    ID              shift and go to state 73
    TRUE            shift and go to state 74
    FALSE           shift and go to state 75
    LPAREN          shift and go to state 76

    params                         shift and go to state 146
    exp                            shift and go to state 111
    exp1                           shift and go to state 61
    exp2                           shift and go to state 62
    exp3                           shift and go to state 63
    exp4                           shift and go to state 64
    exp5                           shift and go to state 65
    exp6                           shift and go to state 66
    exp7                           shift and go to state 67
    exp8                           shift and go to state 68
    exp9                           shift and go to state 69

state 140

    (34) for -> FOR exp SEMICOLON exp . SEMICOLON exp body

    SEMICOLON       shift and go to state 148


state 141

    (24) statement1 -> IF exp body ELSE body .

    NEWLINE         reduce using rule 24 (statement1 -> IF exp body ELSE body .)
    RCHAVES         reduce using rule 24 (statement1 -> IF exp body ELSE body .)


state 142

    (36) declaration -> VAR ID type ASSIGN exp .
    (39) declaration -> VAR ID type ASSIGN exp . SEMICOLON

    NEWLINE         reduce using rule 36 (declaration -> VAR ID type ASSIGN exp .)
    RCHAVES         reduce using rule 36 (declaration -> VAR ID type ASSIGN exp .)
    SEMICOLON       shift and go to state 149


state 143

    (37) declaration -> VAR ID type COLONEQ exp .
    (40) declaration -> VAR ID type COLONEQ exp . SEMICOLON

    NEWLINE         reduce using rule 37 (declaration -> VAR ID type COLONEQ exp .)
    RCHAVES         reduce using rule 37 (declaration -> VAR ID type COLONEQ exp .)
    SEMICOLON       shift and go to state 150


state 144

    (85) callFunc -> ID LPAREN params RPAREN SEMICOLON .

    NEWLINE         reduce using rule 85 (callFunc -> ID LPAREN params RPAREN SEMICOLON .)
    RCHAVES         reduce using rule 85 (callFunc -> ID LPAREN params RPAREN SEMICOLON .)


state 145

    (91) params -> exp COMMA params .

    RPAREN          reduce using rule 91 (params -> exp COMMA params .)


state 146

    (87) callFuncPS -> ID DOT ID LPAREN params . RPAREN
    (89) callFuncPS -> ID DOT ID LPAREN params . RPAREN SEMICOLON

    RPAREN          shift and go to state 151


state 147

    (88) callFuncPS -> ID DOT ID LPAREN RPAREN .
    (90) callFuncPS -> ID DOT ID LPAREN RPAREN . SEMICOLON

    NEWLINE         reduce using rule 88 (callFuncPS -> ID DOT ID LPAREN RPAREN .)
    RCHAVES         reduce using rule 88 (callFuncPS -> ID DOT ID LPAREN RPAREN .)
    SEMICOLON       shift and go to state 152


state 148

    (34) for -> FOR exp SEMICOLON exp SEMICOLON . exp body
    (44) exp -> . exp1
    (45) exp1 -> . exp1 ASSIGN exp2
    (46) exp1 -> . exp1 COLONEQ exp2
    (47) exp1 -> . exp2
    (48) exp2 -> . exp2 OR exp3
    (49) exp2 -> . exp3
    (50) exp3 -> . exp3 AND exp4
    (51) exp3 -> . exp4
    (52) exp4 -> . exp4 EQUALS exp5
    (53) exp4 -> . exp4 DIFFERENT exp5
    (54) exp4 -> . exp5
    (55) exp5 -> . exp5 LESS exp6
    (56) exp5 -> . exp5 GREATER exp6
    (57) exp5 -> . exp5 LESS_EQUAL exp6
    (58) exp5 -> . exp5 GREATER_EQUAL exp6
    (59) exp5 -> . exp6
    (60) exp6 -> . exp6 PLUS exp7
    (61) exp6 -> . exp6 MINUS exp7
    (62) exp6 -> . exp7
    (63) exp7 -> . exp7 TIMES exp8
    (64) exp7 -> . exp7 DIVIDE exp8
    (65) exp7 -> . exp7 MOD exp8
    (66) exp7 -> . exp8
    (67) exp8 -> . exp8 DPLUS
    (68) exp8 -> . exp8 DMINUS
    (69) exp8 -> . exp9
    (70) exp9 -> . NOT exp9
    (71) exp9 -> . NUMBER
    (72) exp9 -> . STRING
    (73) exp9 -> . ID
    (74) exp9 -> . TRUE
    (75) exp9 -> . FALSE
    (76) exp9 -> . LPAREN exp RPAREN

    NOT             shift and go to state 70
    NUMBER          shift and go to state 71
    STRING          shift and go to state 72
    ID              shift and go to state 73
    TRUE            shift and go to state 74
    FALSE           shift and go to state 75
    LPAREN          shift and go to state 76

    exp                            shift and go to state 153
    exp1                           shift and go to state 61
    exp2                           shift and go to state 62
    exp3                           shift and go to state 63
    exp4                           shift and go to state 64
    exp5                           shift and go to state 65
    exp6                           shift and go to state 66
    exp7                           shift and go to state 67
    exp8                           shift and go to state 68
    exp9                           shift and go to state 69

state 149

    (39) declaration -> VAR ID type ASSIGN exp SEMICOLON .

    NEWLINE         reduce using rule 39 (declaration -> VAR ID type ASSIGN exp SEMICOLON .)
    RCHAVES         reduce using rule 39 (declaration -> VAR ID type ASSIGN exp SEMICOLON .)


state 150

    (40) declaration -> VAR ID type COLONEQ exp SEMICOLON .

    NEWLINE         reduce using rule 40 (declaration -> VAR ID type COLONEQ exp SEMICOLON .)
    RCHAVES         reduce using rule 40 (declaration -> VAR ID type COLONEQ exp SEMICOLON .)


state 151

    (87) callFuncPS -> ID DOT ID LPAREN params RPAREN .
    (89) callFuncPS -> ID DOT ID LPAREN params RPAREN . SEMICOLON

    NEWLINE         reduce using rule 87 (callFuncPS -> ID DOT ID LPAREN params RPAREN .)
    RCHAVES         reduce using rule 87 (callFuncPS -> ID DOT ID LPAREN params RPAREN .)
    SEMICOLON       shift and go to state 154


state 152

    (90) callFuncPS -> ID DOT ID LPAREN RPAREN SEMICOLON .

    NEWLINE         reduce using rule 90 (callFuncPS -> ID DOT ID LPAREN RPAREN SEMICOLON .)
    RCHAVES         reduce using rule 90 (callFuncPS -> ID DOT ID LPAREN RPAREN SEMICOLON .)


state 153

    (34) for -> FOR exp SEMICOLON exp SEMICOLON exp . body
    (18) body -> . LCHAVES NEWLINE stms RCHAVES
    (19) body -> . LCHAVES NEWLINE RCHAVES

    LCHAVES         shift and go to state 23

    body                           shift and go to state 155

state 154

    (89) callFuncPS -> ID DOT ID LPAREN params RPAREN SEMICOLON .

    NEWLINE         reduce using rule 89 (callFuncPS -> ID DOT ID LPAREN params RPAREN SEMICOLON .)
    RCHAVES         reduce using rule 89 (callFuncPS -> ID DOT ID LPAREN params RPAREN SEMICOLON .)


state 155

    (34) for -> FOR exp SEMICOLON exp SEMICOLON exp body .

    NEWLINE         reduce using rule 34 (for -> FOR exp SEMICOLON exp SEMICOLON exp body .)
    RCHAVES         reduce using rule 34 (for -> FOR exp SEMICOLON exp SEMICOLON exp body .)

